
prer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a10  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006bb0  08006bb0  00007bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c3c  08006c3c  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006c3c  08006c3c  00007c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c44  08006c44  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c44  08006c44  00007c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c48  08006c48  00007c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006c4c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c78  20000060  08006cac  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cd8  08006cac  00008cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d5e  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a27  00000000  00000000  00021dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00025818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001027  00000000  00000000  00026cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001892f  00000000  00000000  00027d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001887b  00000000  00000000  00040646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097b05  00000000  00000000  00058ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f09c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059ac  00000000  00000000  000f0a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  000f63b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b98 	.word	0x08006b98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006b98 	.word	0x08006b98

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004d4:	4a08      	ldr	r2, [pc, #32]	@ (80004f8 <MX_FREERTOS_Init+0x28>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	4808      	ldr	r0, [pc, #32]	@ (80004fc <MX_FREERTOS_Init+0x2c>)
 80004da:	f003 fd13 	bl	8003f04 <osThreadNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a07      	ldr	r2, [pc, #28]	@ (8000500 <MX_FREERTOS_Init+0x30>)
 80004e2:	6013      	str	r3, [r2, #0]

  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 80004e4:	4a07      	ldr	r2, [pc, #28]	@ (8000504 <MX_FREERTOS_Init+0x34>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	4807      	ldr	r0, [pc, #28]	@ (8000508 <MX_FREERTOS_Init+0x38>)
 80004ea:	f003 fd0b 	bl	8003f04 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a06      	ldr	r2, [pc, #24]	@ (800050c <MX_FREERTOS_Init+0x3c>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	08006bdc 	.word	0x08006bdc
 80004fc:	08000511 	.word	0x08000511
 8000500:	20000084 	.word	0x20000084
 8000504:	08006c00 	.word	0x08006c00
 8000508:	080005b1 	.word	0x080005b1
 800050c:	20000088 	.word	0x20000088

08000510 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive(&huart1, &numByte,1,50);
 8000518:	2332      	movs	r3, #50	@ 0x32
 800051a:	2201      	movs	r2, #1
 800051c:	4920      	ldr	r1, [pc, #128]	@ (80005a0 <StartDefaultTask+0x90>)
 800051e:	4821      	ldr	r0, [pc, #132]	@ (80005a4 <StartDefaultTask+0x94>)
 8000520:	f002 fca4 	bl	8002e6c <HAL_UART_Receive>
	  if (bitcheck(numByte, 7) == 0){
 8000524:	4b1e      	ldr	r3, [pc, #120]	@ (80005a0 <StartDefaultTask+0x90>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b25b      	sxtb	r3, r3
 800052a:	2b00      	cmp	r3, #0
 800052c:	db0a      	blt.n	8000544 <StartDefaultTask+0x34>
		  i = 0;
 800052e:	4b1e      	ldr	r3, [pc, #120]	@ (80005a8 <StartDefaultTask+0x98>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
		  byteArr[i]=numByte;
 8000534:	4b1c      	ldr	r3, [pc, #112]	@ (80005a8 <StartDefaultTask+0x98>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <StartDefaultTask+0x90>)
 800053c:	7819      	ldrb	r1, [r3, #0]
 800053e:	4b1b      	ldr	r3, [pc, #108]	@ (80005ac <StartDefaultTask+0x9c>)
 8000540:	5499      	strb	r1, [r3, r2]
 8000542:	e00c      	b.n	800055e <StartDefaultTask+0x4e>
	  }
	  else  {
		  i++;
 8000544:	4b18      	ldr	r3, [pc, #96]	@ (80005a8 <StartDefaultTask+0x98>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <StartDefaultTask+0x98>)
 800054e:	701a      	strb	r2, [r3, #0]
		  byteArr[i]=numByte;
 8000550:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <StartDefaultTask+0x98>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <StartDefaultTask+0x90>)
 8000558:	7819      	ldrb	r1, [r3, #0]
 800055a:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <StartDefaultTask+0x9c>)
 800055c:	5499      	strb	r1, [r3, r2]
	  }
	  if (i==2){
 800055e:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <StartDefaultTask+0x98>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b02      	cmp	r3, #2
 8000564:	d117      	bne.n	8000596 <StartDefaultTask+0x86>
	  if (bitcheck(byteArr[2],7) != bitcheck(numByte,5)){
 8000566:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <StartDefaultTask+0x9c>)
 8000568:	789b      	ldrb	r3, [r3, #2]
 800056a:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <StartDefaultTask+0x90>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	f003 0320 	and.w	r3, r3, #32
 8000576:	429a      	cmp	r2, r3
 8000578:	d00d      	beq.n	8000596 <StartDefaultTask+0x86>
		  bitflip(byteArr[2],7);
 800057a:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <StartDefaultTask+0x9c>)
 800057c:	789b      	ldrb	r3, [r3, #2]
 800057e:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8000582:	43db      	mvns	r3, r3
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <StartDefaultTask+0x9c>)
 8000588:	709a      	strb	r2, [r3, #2]
		  byteArr[2]=byteArr[2]*2;
 800058a:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <StartDefaultTask+0x9c>)
 800058c:	789b      	ldrb	r3, [r3, #2]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <StartDefaultTask+0x9c>)
 8000594:	709a      	strb	r2, [r3, #2]
	  }
	  }
	  osDelay(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f003 fd46 	bl	8004028 <osDelay>
	  HAL_UART_Receive(&huart1, &numByte,1,50);
 800059c:	e7bc      	b.n	8000518 <StartDefaultTask+0x8>
 800059e:	bf00      	nop
 80005a0:	2000007c 	.word	0x2000007c
 80005a4:	20000164 	.word	0x20000164
 80005a8:	20000083 	.word	0x20000083
 80005ac:	20000080 	.word	0x20000080

080005b0 <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask */
  /* Infinite loop */
  for(;;)
  {
	  Set_PWM_Duty_Cycle(&htim3, TIM_CHANNEL_2, byteArr[2]);
 80005b8:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <StartLedTask+0x20>)
 80005ba:	789b      	ldrb	r3, [r3, #2]
 80005bc:	461a      	mov	r2, r3
 80005be:	2104      	movs	r1, #4
 80005c0:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <StartLedTask+0x24>)
 80005c2:	f000 f887 	bl	80006d4 <Set_PWM_Duty_Cycle>
    osDelay(1);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f003 fd2e 	bl	8004028 <osDelay>
	  Set_PWM_Duty_Cycle(&htim3, TIM_CHANNEL_2, byteArr[2]);
 80005cc:	bf00      	nop
 80005ce:	e7f3      	b.n	80005b8 <StartLedTask+0x8>
 80005d0:	20000080 	.word	0x20000080
 80005d4:	2000011c 	.word	0x2000011c

080005d8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	@ 0x28
 80005dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	4b35      	ldr	r3, [pc, #212]	@ (80006c8 <MX_GPIO_Init+0xf0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a34      	ldr	r2, [pc, #208]	@ (80006c8 <MX_GPIO_Init+0xf0>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_GPIO_Init+0xf0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_GPIO_Init+0xf0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a2d      	ldr	r2, [pc, #180]	@ (80006c8 <MX_GPIO_Init+0xf0>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_GPIO_Init+0xf0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	4b27      	ldr	r3, [pc, #156]	@ (80006c8 <MX_GPIO_Init+0xf0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a26      	ldr	r2, [pc, #152]	@ (80006c8 <MX_GPIO_Init+0xf0>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <MX_GPIO_Init+0xf0>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_GPIO_Init+0xf0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a1f      	ldr	r2, [pc, #124]	@ (80006c8 <MX_GPIO_Init+0xf0>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_GPIO_Init+0xf0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLed_GPIO_Port, GLed_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2120      	movs	r1, #32
 8000662:	481a      	ldr	r0, [pc, #104]	@ (80006cc <MX_GPIO_Init+0xf4>)
 8000664:	f000 ff16 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4814      	ldr	r0, [pc, #80]	@ (80006d0 <MX_GPIO_Init+0xf8>)
 8000680:	f000 fd84 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 8000684:	2308      	movs	r3, #8
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000694:	2307      	movs	r3, #7
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	480b      	ldr	r0, [pc, #44]	@ (80006cc <MX_GPIO_Init+0xf4>)
 80006a0:	f000 fd74 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GLed_Pin;
 80006a4:	2320      	movs	r3, #32
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GLed_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	4804      	ldr	r0, [pc, #16]	@ (80006cc <MX_GPIO_Init+0xf4>)
 80006bc:	f000 fd66 	bl	800118c <HAL_GPIO_Init>

}
 80006c0:	bf00      	nop
 80006c2:	3728      	adds	r7, #40	@ 0x28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020800 	.word	0x40020800

080006d4 <Set_PWM_Duty_Cycle>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
void Set_PWM_Duty_Cycle(TIM_HandleTypeDef *htim, uint32_t Channe1, uint16_t pwm)
  {
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	4613      	mov	r3, r2
 80006e0:	80fb      	strh	r3, [r7, #6]
      __HAL_TIM_SET_COMPARE(htim, Channe1, pwm);
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d104      	bne.n	80006f2 <Set_PWM_Duty_Cycle+0x1e>
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	88fa      	ldrh	r2, [r7, #6]
 80006ee:	635a      	str	r2, [r3, #52]	@ 0x34
  }
 80006f0:	e013      	b.n	800071a <Set_PWM_Duty_Cycle+0x46>
      __HAL_TIM_SET_COMPARE(htim, Channe1, pwm);
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d104      	bne.n	8000702 <Set_PWM_Duty_Cycle+0x2e>
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	6393      	str	r3, [r2, #56]	@ 0x38
  }
 8000700:	e00b      	b.n	800071a <Set_PWM_Duty_Cycle+0x46>
      __HAL_TIM_SET_COMPARE(htim, Channe1, pwm);
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	2b08      	cmp	r3, #8
 8000706:	d104      	bne.n	8000712 <Set_PWM_Duty_Cycle+0x3e>
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	88fb      	ldrh	r3, [r7, #6]
 800070e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  }
 8000710:	e003      	b.n	800071a <Set_PWM_Duty_Cycle+0x46>
      __HAL_TIM_SET_COMPARE(htim, Channe1, pwm);
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	6413      	str	r3, [r2, #64]	@ 0x40
  }
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072c:	f000 fb78 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f81c 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000734:	f7ff ff50 	bl	80005d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000738:	f000 f988 	bl	8000a4c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800073c:	f000 facc 	bl	8000cd8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000740:	f000 f9d4 	bl	8000aec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000744:	4807      	ldr	r0, [pc, #28]	@ (8000764 <main+0x3c>)
 8000746:	f001 fbd9 	bl	8001efc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800074a:	2104      	movs	r1, #4
 800074c:	4806      	ldr	r0, [pc, #24]	@ (8000768 <main+0x40>)
 800074e:	f001 fc91 	bl	8002074 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000752:	f003 fb8d 	bl	8003e70 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000756:	f7ff febb 	bl	80004d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800075a:	f003 fbad 	bl	8003eb8 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_UART_Receive_IT(&huart1, (uint8_t*)buff, 5);

  while (1)
 800075e:	bf00      	nop
 8000760:	e7fd      	b.n	800075e <main+0x36>
 8000762:	bf00      	nop
 8000764:	200000d4 	.word	0x200000d4
 8000768:	2000011c 	.word	0x2000011c

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	@ 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2230      	movs	r2, #48	@ 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f006 f924 	bl	80069c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	4a27      	ldr	r2, [pc, #156]	@ (8000838 <SystemClock_Config+0xcc>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a0:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b22      	ldr	r3, [pc, #136]	@ (800083c <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b8:	4a20      	ldr	r2, [pc, #128]	@ (800083c <SystemClock_Config+0xd0>)
 80007ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e0:	2304      	movs	r3, #4
 80007e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80007e4:	2340      	movs	r3, #64	@ 0x40
 80007e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ec:	2307      	movs	r3, #7
 80007ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 fe67 	bl	80014c8 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000800:	f000 f830 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800080c:	2390      	movs	r3, #144	@ 0x90
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f001 f8c9 	bl	80019b8 <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800082c:	f000 f81a 	bl	8000864 <Error_Handler>
  }
}
 8000830:	bf00      	nop
 8000832:	3750      	adds	r7, #80	@ 0x50
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d101      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000852:	f000 fb07 	bl	8000e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40014400 	.word	0x40014400

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <Error_Handler+0x8>

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	4a11      	ldr	r2, [pc, #68]	@ (80008c4 <HAL_MspInit+0x54>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000884:	6453      	str	r3, [r2, #68]	@ 0x44
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <HAL_MspInit+0x54>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <HAL_MspInit+0x54>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <HAL_MspInit+0x54>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	210f      	movs	r1, #15
 80008b2:	f06f 0001 	mvn.w	r0, #1
 80008b6:	f000 fbad 	bl	8001014 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	@ 0x30
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <HAL_InitTick+0xd0>)
 80008de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e0:	4a2d      	ldr	r2, [pc, #180]	@ (8000998 <HAL_InitTick+0xd0>)
 80008e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000998 <HAL_InitTick+0xd0>)
 80008ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f4:	f107 020c 	add.w	r2, r7, #12
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 fa7a 	bl	8001df8 <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000904:	f001 fa64 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8000908:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800090a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800090c:	4a23      	ldr	r2, [pc, #140]	@ (800099c <HAL_InitTick+0xd4>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	0c9b      	lsrs	r3, r3, #18
 8000914:	3b01      	subs	r3, #1
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000918:	4b21      	ldr	r3, [pc, #132]	@ (80009a0 <HAL_InitTick+0xd8>)
 800091a:	4a22      	ldr	r2, [pc, #136]	@ (80009a4 <HAL_InitTick+0xdc>)
 800091c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <HAL_InitTick+0xd8>)
 8000920:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000924:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000926:	4a1e      	ldr	r2, [pc, #120]	@ (80009a0 <HAL_InitTick+0xd8>)
 8000928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800092c:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <HAL_InitTick+0xd8>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_InitTick+0xd8>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <HAL_InitTick+0xd8>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800093e:	4818      	ldr	r0, [pc, #96]	@ (80009a0 <HAL_InitTick+0xd8>)
 8000940:	f001 fa8c 	bl	8001e5c <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800094a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800094e:	2b00      	cmp	r3, #0
 8000950:	d11b      	bne.n	800098a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000952:	4813      	ldr	r0, [pc, #76]	@ (80009a0 <HAL_InitTick+0xd8>)
 8000954:	f001 fad2 	bl	8001efc <HAL_TIM_Base_Start_IT>
 8000958:	4603      	mov	r3, r0
 800095a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800095e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000962:	2b00      	cmp	r3, #0
 8000964:	d111      	bne.n	800098a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000966:	2019      	movs	r0, #25
 8000968:	f000 fb70 	bl	800104c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b0f      	cmp	r3, #15
 8000970:	d808      	bhi.n	8000984 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000972:	2200      	movs	r2, #0
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	2019      	movs	r0, #25
 8000978:	f000 fb4c 	bl	8001014 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800097c:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <HAL_InitTick+0xe0>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	e002      	b.n	800098a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800098a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800098e:	4618      	mov	r0, r3
 8000990:	3730      	adds	r7, #48	@ 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	431bde83 	.word	0x431bde83
 80009a0:	2000008c 	.word	0x2000008c
 80009a4:	40014400 	.word	0x40014400
 80009a8:	20000004 	.word	0x20000004

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <NMI_Handler+0x4>

080009b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <MemManage_Handler+0x4>

080009c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009e8:	4803      	ldr	r0, [pc, #12]	@ (80009f8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80009ea:	f001 fbf3 	bl	80021d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80009ee:	4803      	ldr	r0, [pc, #12]	@ (80009fc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80009f0:	f001 fbf0 	bl	80021d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000d4 	.word	0x200000d4
 80009fc:	2000008c 	.word	0x2000008c

08000a00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <TIM3_IRQHandler+0x10>)
 8000a06:	f001 fbe5 	bl	80021d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000011c 	.word	0x2000011c

08000a14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a18:	4802      	ldr	r0, [pc, #8]	@ (8000a24 <USART1_IRQHandler+0x10>)
 8000a1a:	f002 fabf 	bl	8002f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000164 	.word	0x20000164

08000a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <SystemInit+0x20>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a32:	4a05      	ldr	r2, [pc, #20]	@ (8000a48 <SystemInit+0x20>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <MX_TIM1_Init+0x98>)
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae8 <MX_TIM1_Init+0x9c>)
 8000a6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <MX_TIM1_Init+0x98>)
 8000a70:	220f      	movs	r2, #15
 8000a72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <MX_TIM1_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_TIM1_Init+0x98>)
 8000a7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <MX_TIM1_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a88:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <MX_TIM1_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_TIM1_Init+0x98>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a94:	4813      	ldr	r0, [pc, #76]	@ (8000ae4 <MX_TIM1_Init+0x98>)
 8000a96:	f001 f9e1 	bl	8001e5c <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000aa0:	f7ff fee0 	bl	8000864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <MX_TIM1_Init+0x98>)
 8000ab2:	f001 fd41 	bl	8002538 <HAL_TIM_ConfigClockSource>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000abc:	f7ff fed2 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_TIM1_Init+0x98>)
 8000ace:	f002 f8fb 	bl	8002cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ad8:	f7ff fec4 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000d4 	.word	0x200000d4
 8000ae8:	40010000 	.word	0x40010000

08000aec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	@ 0x38
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
 8000b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000bd4 <MX_TIM3_Init+0xe8>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000b22:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b24:	220f      	movs	r2, #15
 8000b26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000b2e:	4b28      	ldr	r3, [pc, #160]	@ (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	@ (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b42:	4823      	ldr	r0, [pc, #140]	@ (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b44:	f001 f98a 	bl	8001e5c <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b4e:	f7ff fe89 	bl	8000864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481c      	ldr	r0, [pc, #112]	@ (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b60:	f001 fcea 	bl	8002538 <HAL_TIM_ConfigClockSource>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b6a:	f7ff fe7b 	bl	8000864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b6e:	4818      	ldr	r0, [pc, #96]	@ (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b70:	f001 fa26 	bl	8001fc0 <HAL_TIM_PWM_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b7a:	f7ff fe73 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4810      	ldr	r0, [pc, #64]	@ (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b8e:	f002 f89b 	bl	8002cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b98:	f7ff fe64 	bl	8000864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9c:	2360      	movs	r3, #96	@ 0x60
 8000b9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4807      	ldr	r0, [pc, #28]	@ (8000bd0 <MX_TIM3_Init+0xe4>)
 8000bb4:	f001 fbfe 	bl	80023b4 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bbe:	f7ff fe51 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bc2:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <MX_TIM3_Init+0xe4>)
 8000bc4:	f000 f84e 	bl	8000c64 <HAL_TIM_MspPostInit>

}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	@ 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000011c 	.word	0x2000011c
 8000bd4:	40000400 	.word	0x40000400

08000bd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c58 <HAL_TIM_Base_MspInit+0x80>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d116      	bne.n	8000c18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <HAL_TIM_Base_MspInit+0x84>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c5c <HAL_TIM_Base_MspInit+0x84>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfa:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <HAL_TIM_Base_MspInit+0x84>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	210f      	movs	r1, #15
 8000c0a:	2019      	movs	r0, #25
 8000c0c:	f000 fa02 	bl	8001014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c10:	2019      	movs	r0, #25
 8000c12:	f000 fa1b 	bl	800104c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c16:	e01a      	b.n	8000c4e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a10      	ldr	r2, [pc, #64]	@ (8000c60 <HAL_TIM_Base_MspInit+0x88>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d115      	bne.n	8000c4e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <HAL_TIM_Base_MspInit+0x84>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c5c <HAL_TIM_Base_MspInit+0x84>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_TIM_Base_MspInit+0x84>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2105      	movs	r1, #5
 8000c42:	201d      	movs	r0, #29
 8000c44:	f000 f9e6 	bl	8001014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c48:	201d      	movs	r0, #29
 8000c4a:	f000 f9ff 	bl	800104c <HAL_NVIC_EnableIRQ>
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40000400 	.word	0x40000400

08000c64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a12      	ldr	r2, [pc, #72]	@ (8000ccc <HAL_TIM_MspPostInit+0x68>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d11d      	bne.n	8000cc2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <HAL_TIM_MspPostInit+0x6c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a10      	ldr	r2, [pc, #64]	@ (8000cd0 <HAL_TIM_MspPostInit+0x6c>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <HAL_TIM_MspPostInit+0x6c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ca2:	2380      	movs	r3, #128	@ 0x80
 8000ca4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <HAL_TIM_MspPostInit+0x70>)
 8000cbe:	f000 fa65 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3720      	adds	r7, #32
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40000400 	.word	0x40000400
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	@ (8000d28 <MX_USART1_UART_Init+0x50>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000ce4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ce8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000d10:	f002 f85c 	bl	8002dcc <HAL_UART_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d1a:	f7ff fda3 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000164 	.word	0x20000164
 8000d28:	40011000 	.word	0x40011000

08000d2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	@ 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc0 <HAL_UART_MspInit+0x94>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d134      	bne.n	8000db8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d86:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <HAL_UART_MspInit+0x9c>)
 8000da4:	f000 f9f2 	bl	800118c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2105      	movs	r1, #5
 8000dac:	2025      	movs	r0, #37	@ 0x25
 8000dae:	f000 f931 	bl	8001014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000db2:	2025      	movs	r0, #37	@ 0x25
 8000db4:	f000 f94a 	bl	800104c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	@ 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40011000 	.word	0x40011000
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dd0:	f7ff fe2a 	bl	8000a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd4:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dd6:	490d      	ldr	r1, [pc, #52]	@ (8000e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dec:	4c0a      	ldr	r4, [pc, #40]	@ (8000e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f005 fe43 	bl	8006a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fc93 	bl	8000728 <main>
  bx  lr    
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e10:	08006c4c 	.word	0x08006c4c
  ldr r2, =_sbss
 8000e14:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e18:	20004cd8 	.word	0x20004cd8

08000e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <HAL_Init+0x40>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <HAL_Init+0x40>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	@ (8000e60 <HAL_Init+0x40>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f8d8 	bl	8000ffe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f7ff fd3a 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fd0c 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	200001ac 	.word	0x200001ac

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	@ (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200001ac 	.word	0x200001ac

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	db0b      	blt.n	8000f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 021f 	and.w	r2, r3, #31
 8000f20:	4907      	ldr	r1, [pc, #28]	@ (8000f40 <__NVIC_EnableIRQ+0x38>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	2001      	movs	r0, #1
 8000f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	@ (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	@ (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	@ 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	@ 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ff4c 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001026:	f7ff ff61 	bl	8000eec <__NVIC_GetPriorityGrouping>
 800102a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	68b9      	ldr	r1, [r7, #8]
 8001030:	6978      	ldr	r0, [r7, #20]
 8001032:	f7ff ffb1 	bl	8000f98 <NVIC_EncodePriority>
 8001036:	4602      	mov	r2, r0
 8001038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff80 	bl	8000f44 <__NVIC_SetPriority>
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff54 	bl	8000f08 <__NVIC_EnableIRQ>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001074:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001076:	f7ff ff09 	bl	8000e8c <HAL_GetTick>
 800107a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d008      	beq.n	800109a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2280      	movs	r2, #128	@ 0x80
 800108c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e052      	b.n	8001140 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0216 	bic.w	r2, r2, #22
 80010a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d103      	bne.n	80010ca <HAL_DMA_Abort+0x62>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0208 	bic.w	r2, r2, #8
 80010d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ea:	e013      	b.n	8001114 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ec:	f7ff fece 	bl	8000e8c <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	d90c      	bls.n	8001114 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2220      	movs	r2, #32
 80010fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2203      	movs	r2, #3
 8001104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e015      	b.n	8001140 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1e4      	bne.n	80010ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001126:	223f      	movs	r2, #63	@ 0x3f
 8001128:	409a      	lsls	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d004      	beq.n	8001166 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2280      	movs	r2, #128	@ 0x80
 8001160:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00c      	b.n	8001180 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2205      	movs	r2, #5
 800116a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0201 	bic.w	r2, r2, #1
 800117c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	@ 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e159      	b.n	800145c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8148 	bne.w	8001456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80a2 	beq.w	8001456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b57      	ldr	r3, [pc, #348]	@ (8001474 <HAL_GPIO_Init+0x2e8>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	4a56      	ldr	r2, [pc, #344]	@ (8001474 <HAL_GPIO_Init+0x2e8>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001320:	6453      	str	r3, [r2, #68]	@ 0x44
 8001322:	4b54      	ldr	r3, [pc, #336]	@ (8001474 <HAL_GPIO_Init+0x2e8>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a52      	ldr	r2, [pc, #328]	@ (8001478 <HAL_GPIO_Init+0x2ec>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a49      	ldr	r2, [pc, #292]	@ (800147c <HAL_GPIO_Init+0x2f0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d019      	beq.n	800138e <HAL_GPIO_Init+0x202>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a48      	ldr	r2, [pc, #288]	@ (8001480 <HAL_GPIO_Init+0x2f4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x1fe>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a47      	ldr	r2, [pc, #284]	@ (8001484 <HAL_GPIO_Init+0x2f8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x1fa>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a46      	ldr	r2, [pc, #280]	@ (8001488 <HAL_GPIO_Init+0x2fc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x1f6>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a45      	ldr	r2, [pc, #276]	@ (800148c <HAL_GPIO_Init+0x300>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x1f2>
 800137a:	2304      	movs	r3, #4
 800137c:	e008      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800137e:	2307      	movs	r3, #7
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001382:	2303      	movs	r3, #3
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138e:	2300      	movs	r3, #0
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a0:	4935      	ldr	r1, [pc, #212]	@ (8001478 <HAL_GPIO_Init+0x2ec>)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ae:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013fc:	4a24      	ldr	r2, [pc, #144]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001402:	4b23      	ldr	r3, [pc, #140]	@ (8001490 <HAL_GPIO_Init+0x304>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001426:	4a1a      	ldr	r2, [pc, #104]	@ (8001490 <HAL_GPIO_Init+0x304>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <HAL_GPIO_Init+0x304>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001450:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <HAL_GPIO_Init+0x304>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	f67f aea2 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	4613      	mov	r3, r2
 80014a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b0:	e003      	b.n	80014ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	041a      	lsls	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e267      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d075      	beq.n	80015d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e6:	4b88      	ldr	r3, [pc, #544]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d00c      	beq.n	800150c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f2:	4b85      	ldr	r3, [pc, #532]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d112      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fe:	4b82      	ldr	r3, [pc, #520]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001506:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800150a:	d10b      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4b7e      	ldr	r3, [pc, #504]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d05b      	beq.n	80015d0 <HAL_RCC_OscConfig+0x108>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d157      	bne.n	80015d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e242      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x74>
 800152e:	4b76      	ldr	r3, [pc, #472]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a75      	ldr	r2, [pc, #468]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e01d      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x98>
 8001546:	4b70      	ldr	r3, [pc, #448]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6f      	ldr	r2, [pc, #444]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b6d      	ldr	r3, [pc, #436]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a6c      	ldr	r2, [pc, #432]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 8001560:	4b69      	ldr	r3, [pc, #420]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a68      	ldr	r2, [pc, #416]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 8001566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b66      	ldr	r3, [pc, #408]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a65      	ldr	r2, [pc, #404]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fc84 	bl	8000e8c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fc80 	bl	8000e8c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	@ 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e207      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b5b      	ldr	r3, [pc, #364]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0xc0>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fc70 	bl	8000e8c <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fc6c 	bl	8000e8c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	@ 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1f3      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	4b51      	ldr	r3, [pc, #324]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0xe8>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d063      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015de:	4b4a      	ldr	r3, [pc, #296]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ea:	4b47      	ldr	r3, [pc, #284]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d11c      	bne.n	8001630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f6:	4b44      	ldr	r3, [pc, #272]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d116      	bne.n	8001630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	4b41      	ldr	r3, [pc, #260]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x152>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e1c7      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b3b      	ldr	r3, [pc, #236]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4937      	ldr	r1, [pc, #220]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	e03a      	b.n	80016a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001638:	4b34      	ldr	r3, [pc, #208]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fc25 	bl	8000e8c <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fc21 	bl	8000e8c <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1a8      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001658:	4b2b      	ldr	r3, [pc, #172]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b28      	ldr	r3, [pc, #160]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4925      	ldr	r1, [pc, #148]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b24      	ldr	r3, [pc, #144]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fc04 	bl	8000e8c <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff fc00 	bl	8000e8c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e187      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d036      	beq.n	8001720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d016      	beq.n	80016e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <HAL_RCC_OscConfig+0x248>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c0:	f7ff fbe4 	bl	8000e8c <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fbe0 	bl	8000e8c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e167      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <HAL_RCC_OscConfig+0x240>)
 80016dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x200>
 80016e6:	e01b      	b.n	8001720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <HAL_RCC_OscConfig+0x248>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fbcd 	bl	8000e8c <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	e00e      	b.n	8001714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff fbc9 	bl	8000e8c <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d907      	bls.n	8001714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e150      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
 8001708:	40023800 	.word	0x40023800
 800170c:	42470000 	.word	0x42470000
 8001710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001714:	4b88      	ldr	r3, [pc, #544]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 8001716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ea      	bne.n	80016f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8097 	beq.w	800185c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b81      	ldr	r3, [pc, #516]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10f      	bne.n	800175e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b7d      	ldr	r3, [pc, #500]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	4a7c      	ldr	r2, [pc, #496]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174c:	6413      	str	r3, [r2, #64]	@ 0x40
 800174e:	4b7a      	ldr	r3, [pc, #488]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175a:	2301      	movs	r3, #1
 800175c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	4b77      	ldr	r3, [pc, #476]	@ (800193c <HAL_RCC_OscConfig+0x474>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d118      	bne.n	800179c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176a:	4b74      	ldr	r3, [pc, #464]	@ (800193c <HAL_RCC_OscConfig+0x474>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a73      	ldr	r2, [pc, #460]	@ (800193c <HAL_RCC_OscConfig+0x474>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001776:	f7ff fb89 	bl	8000e8c <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177e:	f7ff fb85 	bl	8000e8c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e10c      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	4b6a      	ldr	r3, [pc, #424]	@ (800193c <HAL_RCC_OscConfig+0x474>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x2ea>
 80017a4:	4b64      	ldr	r3, [pc, #400]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a8:	4a63      	ldr	r2, [pc, #396]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b0:	e01c      	b.n	80017ec <HAL_RCC_OscConfig+0x324>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x30c>
 80017ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017be:	4a5e      	ldr	r2, [pc, #376]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0x324>
 80017d4:	4b58      	ldr	r3, [pc, #352]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d8:	4a57      	ldr	r2, [pc, #348]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e0:	4b55      	ldr	r3, [pc, #340]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e4:	4a54      	ldr	r2, [pc, #336]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 80017e6:	f023 0304 	bic.w	r3, r3, #4
 80017ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d015      	beq.n	8001820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff fb4a 	bl	8000e8c <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fa:	e00a      	b.n	8001812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fc:	f7ff fb46 	bl	8000e8c <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e0cb      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001812:	4b49      	ldr	r3, [pc, #292]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0ee      	beq.n	80017fc <HAL_RCC_OscConfig+0x334>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001820:	f7ff fb34 	bl	8000e8c <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f7ff fb30 	bl	8000e8c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e0b5      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183e:	4b3e      	ldr	r3, [pc, #248]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ee      	bne.n	8001828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001850:	4b39      	ldr	r3, [pc, #228]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	4a38      	ldr	r2, [pc, #224]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 8001856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800185a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a1 	beq.w	80019a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001866:	4b34      	ldr	r3, [pc, #208]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b08      	cmp	r3, #8
 8001870:	d05c      	beq.n	800192c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d141      	bne.n	80018fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b31      	ldr	r3, [pc, #196]	@ (8001940 <HAL_RCC_OscConfig+0x478>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fb04 	bl	8000e8c <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff fb00 	bl	8000e8c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e087      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b4:	019b      	lsls	r3, r3, #6
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018bc:	085b      	lsrs	r3, r3, #1
 80018be:	3b01      	subs	r3, #1
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c8:	061b      	lsls	r3, r3, #24
 80018ca:	491b      	ldr	r1, [pc, #108]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001940 <HAL_RCC_OscConfig+0x478>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fad9 	bl	8000e8c <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff fad5 	bl	8000e8c <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e05c      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x416>
 80018fc:	e054      	b.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <HAL_RCC_OscConfig+0x478>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fac2 	bl	8000e8c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fabe 	bl	8000e8c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e045      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <HAL_RCC_OscConfig+0x470>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x444>
 800192a:	e03d      	b.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e038      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
 8001938:	40023800 	.word	0x40023800
 800193c:	40007000 	.word	0x40007000
 8001940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001944:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <HAL_RCC_OscConfig+0x4ec>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d028      	beq.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d121      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d11a      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800197a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800197c:	4293      	cmp	r3, r2
 800197e:	d111      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	3b01      	subs	r3, #1
 800198e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0cc      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b68      	ldr	r3, [pc, #416]	@ (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d90c      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b65      	ldr	r3, [pc, #404]	@ (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	@ (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a58      	ldr	r2, [pc, #352]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a52      	ldr	r2, [pc, #328]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d044      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d119      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	4b3f      	ldr	r3, [pc, #252]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a86:	4b3b      	ldr	r3, [pc, #236]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e067      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a96:	4b37      	ldr	r3, [pc, #220]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 0203 	bic.w	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4934      	ldr	r1, [pc, #208]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa8:	f7ff f9f0 	bl	8000e8c <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f7ff f9ec 	bl	8000e8c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e04f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 020c 	and.w	r2, r3, #12
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1eb      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d20c      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b22      	ldr	r3, [pc, #136]	@ (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490a      	ldr	r1, [pc, #40]	@ (8001b78 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	@ (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe feb2 	bl	80008c8 <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08006c24 	.word	0x08006c24
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b88:	b094      	sub	sp, #80	@ 0x50
 8001b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b90:	2300      	movs	r3, #0
 8001b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b94:	2300      	movs	r3, #0
 8001b96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b9c:	4b79      	ldr	r3, [pc, #484]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	f200 80e1 	bhi.w	8001d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8001bb6:	e0db      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b73      	ldr	r3, [pc, #460]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bba:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001bbc:	e0db      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bbe:	4b73      	ldr	r3, [pc, #460]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8001bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bc2:	e0d8      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bcc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bce:	4b6d      	ldr	r3, [pc, #436]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d063      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bda:	4b6a      	ldr	r3, [pc, #424]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	099b      	lsrs	r3, r3, #6
 8001be0:	2200      	movs	r2, #0
 8001be2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001be4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bee:	2300      	movs	r3, #0
 8001bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bf6:	4622      	mov	r2, r4
 8001bf8:	462b      	mov	r3, r5
 8001bfa:	f04f 0000 	mov.w	r0, #0
 8001bfe:	f04f 0100 	mov.w	r1, #0
 8001c02:	0159      	lsls	r1, r3, #5
 8001c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c08:	0150      	lsls	r0, r2, #5
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4621      	mov	r1, r4
 8001c10:	1a51      	subs	r1, r2, r1
 8001c12:	6139      	str	r1, [r7, #16]
 8001c14:	4629      	mov	r1, r5
 8001c16:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c28:	4659      	mov	r1, fp
 8001c2a:	018b      	lsls	r3, r1, #6
 8001c2c:	4651      	mov	r1, sl
 8001c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c32:	4651      	mov	r1, sl
 8001c34:	018a      	lsls	r2, r1, #6
 8001c36:	4651      	mov	r1, sl
 8001c38:	ebb2 0801 	subs.w	r8, r2, r1
 8001c3c:	4659      	mov	r1, fp
 8001c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c56:	4690      	mov	r8, r2
 8001c58:	4699      	mov	r9, r3
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	eb18 0303 	adds.w	r3, r8, r3
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	462b      	mov	r3, r5
 8001c64:	eb49 0303 	adc.w	r3, r9, r3
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c76:	4629      	mov	r1, r5
 8001c78:	024b      	lsls	r3, r1, #9
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c80:	4621      	mov	r1, r4
 8001c82:	024a      	lsls	r2, r1, #9
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c94:	f7fe faa4 	bl	80001e0 <__aeabi_uldivmod>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ca0:	e058      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca2:	4b38      	ldr	r3, [pc, #224]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	4611      	mov	r1, r2
 8001cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cb2:	623b      	str	r3, [r7, #32]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cbc:	4642      	mov	r2, r8
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	f04f 0000 	mov.w	r0, #0
 8001cc4:	f04f 0100 	mov.w	r1, #0
 8001cc8:	0159      	lsls	r1, r3, #5
 8001cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cce:	0150      	lsls	r0, r2, #5
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4641      	mov	r1, r8
 8001cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cda:	4649      	mov	r1, r9
 8001cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8001cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	00eb      	lsls	r3, r5, #3
 8001d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d0a:	00e2      	lsls	r2, r4, #3
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	461d      	mov	r5, r3
 8001d10:	4643      	mov	r3, r8
 8001d12:	18e3      	adds	r3, r4, r3
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	464b      	mov	r3, r9
 8001d18:	eb45 0303 	adc.w	r3, r5, r3
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	028b      	lsls	r3, r1, #10
 8001d2e:	4621      	mov	r1, r4
 8001d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d34:	4621      	mov	r1, r4
 8001d36:	028a      	lsls	r2, r1, #10
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	61fa      	str	r2, [r7, #28]
 8001d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d48:	f7fe fa4a 	bl	80001e0 <__aeabi_uldivmod>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4613      	mov	r3, r2
 8001d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001d64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d6e:	e002      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3750      	adds	r7, #80	@ 0x50
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	00f42400 	.word	0x00f42400
 8001d8c:	007a1200 	.word	0x007a1200

08001d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d94:	4b03      	ldr	r3, [pc, #12]	@ (8001da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000000 	.word	0x20000000

08001da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dac:	f7ff fff0 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	0a9b      	lsrs	r3, r3, #10
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	4903      	ldr	r1, [pc, #12]	@ (8001dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	08006c34 	.word	0x08006c34

08001dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dd4:	f7ff ffdc 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0b5b      	lsrs	r3, r3, #13
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4903      	ldr	r1, [pc, #12]	@ (8001df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	08006c34 	.word	0x08006c34

08001df8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	220f      	movs	r2, #15
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0203 	and.w	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e14:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	08db      	lsrs	r3, r3, #3
 8001e32:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e3a:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <HAL_RCC_GetClockConfig+0x60>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0207 	and.w	r2, r3, #7
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	601a      	str	r2, [r3, #0]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40023c00 	.word	0x40023c00

08001e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e041      	b.n	8001ef2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fea8 	bl	8000bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3304      	adds	r3, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f000 fc3c 	bl	8002718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d001      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e044      	b.n	8001f9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1e      	ldr	r2, [pc, #120]	@ (8001fac <HAL_TIM_Base_Start_IT+0xb0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d018      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x6c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3e:	d013      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x6c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00e      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x6c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a19      	ldr	r2, [pc, #100]	@ (8001fb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d009      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x6c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a17      	ldr	r2, [pc, #92]	@ (8001fb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x6c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a16      	ldr	r2, [pc, #88]	@ (8001fbc <HAL_TIM_Base_Start_IT+0xc0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d111      	bne.n	8001f8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d010      	beq.n	8001f9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0201 	orr.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8a:	e007      	b.n	8001f9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40000800 	.word	0x40000800
 8001fb8:	40000c00 	.word	0x40000c00
 8001fbc:	40014000 	.word	0x40014000

08001fc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e041      	b.n	8002056 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f839 	bl	800205e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f000 fb8a 	bl	8002718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <HAL_TIM_PWM_Start+0x24>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	bf14      	ite	ne
 8002090:	2301      	movne	r3, #1
 8002092:	2300      	moveq	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	e022      	b.n	80020de <HAL_TIM_PWM_Start+0x6a>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b04      	cmp	r3, #4
 800209c:	d109      	bne.n	80020b2 <HAL_TIM_PWM_Start+0x3e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	e015      	b.n	80020de <HAL_TIM_PWM_Start+0x6a>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d109      	bne.n	80020cc <HAL_TIM_PWM_Start+0x58>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e008      	b.n	80020de <HAL_TIM_PWM_Start+0x6a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	bf14      	ite	ne
 80020d8:	2301      	movne	r3, #1
 80020da:	2300      	moveq	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e068      	b.n	80021b8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d104      	bne.n	80020f6 <HAL_TIM_PWM_Start+0x82>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020f4:	e013      	b.n	800211e <HAL_TIM_PWM_Start+0xaa>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d104      	bne.n	8002106 <HAL_TIM_PWM_Start+0x92>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002104:	e00b      	b.n	800211e <HAL_TIM_PWM_Start+0xaa>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b08      	cmp	r3, #8
 800210a:	d104      	bne.n	8002116 <HAL_TIM_PWM_Start+0xa2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002114:	e003      	b.n	800211e <HAL_TIM_PWM_Start+0xaa>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2202      	movs	r2, #2
 800211a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	6839      	ldr	r1, [r7, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fda8 	bl	8002c7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a23      	ldr	r2, [pc, #140]	@ (80021c0 <HAL_TIM_PWM_Start+0x14c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d107      	bne.n	8002146 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002144:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1d      	ldr	r2, [pc, #116]	@ (80021c0 <HAL_TIM_PWM_Start+0x14c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d018      	beq.n	8002182 <HAL_TIM_PWM_Start+0x10e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002158:	d013      	beq.n	8002182 <HAL_TIM_PWM_Start+0x10e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a19      	ldr	r2, [pc, #100]	@ (80021c4 <HAL_TIM_PWM_Start+0x150>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_TIM_PWM_Start+0x10e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a17      	ldr	r2, [pc, #92]	@ (80021c8 <HAL_TIM_PWM_Start+0x154>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_TIM_PWM_Start+0x10e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a16      	ldr	r2, [pc, #88]	@ (80021cc <HAL_TIM_PWM_Start+0x158>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_TIM_PWM_Start+0x10e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a14      	ldr	r2, [pc, #80]	@ (80021d0 <HAL_TIM_PWM_Start+0x15c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d111      	bne.n	80021a6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b06      	cmp	r3, #6
 8002192:	d010      	beq.n	80021b6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a4:	e007      	b.n	80021b6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40010000 	.word	0x40010000
 80021c4:	40000400 	.word	0x40000400
 80021c8:	40000800 	.word	0x40000800
 80021cc:	40000c00 	.word	0x40000c00
 80021d0:	40014000 	.word	0x40014000

080021d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d020      	beq.n	8002238 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0202 	mvn.w	r2, #2
 8002208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fa5b 	bl	80026da <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fa4d 	bl	80026c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fa5e 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d020      	beq.n	8002284 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0204 	mvn.w	r2, #4
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fa35 	bl	80026da <HAL_TIM_IC_CaptureCallback>
 8002270:	e005      	b.n	800227e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fa27 	bl	80026c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fa38 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d020      	beq.n	80022d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01b      	beq.n	80022d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0208 	mvn.w	r2, #8
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2204      	movs	r2, #4
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fa0f 	bl	80026da <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fa01 	bl	80026c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fa12 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d020      	beq.n	800231c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0210 	mvn.w	r2, #16
 80022ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2208      	movs	r2, #8
 80022f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f9e9 	bl	80026da <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f9db 	bl	80026c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f9ec 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00c      	beq.n	8002340 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0201 	mvn.w	r2, #1
 8002338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe fa80 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00c      	beq.n	8002364 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fd2a 	bl	8002db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f9bd 	bl	8002702 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00c      	beq.n	80023ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0220 	mvn.w	r2, #32
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fcfc 	bl	8002da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e0ae      	b.n	8002530 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b0c      	cmp	r3, #12
 80023de:	f200 809f 	bhi.w	8002520 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80023e2:	a201      	add	r2, pc, #4	@ (adr r2, 80023e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	0800241d 	.word	0x0800241d
 80023ec:	08002521 	.word	0x08002521
 80023f0:	08002521 	.word	0x08002521
 80023f4:	08002521 	.word	0x08002521
 80023f8:	0800245d 	.word	0x0800245d
 80023fc:	08002521 	.word	0x08002521
 8002400:	08002521 	.word	0x08002521
 8002404:	08002521 	.word	0x08002521
 8002408:	0800249f 	.word	0x0800249f
 800240c:	08002521 	.word	0x08002521
 8002410:	08002521 	.word	0x08002521
 8002414:	08002521 	.word	0x08002521
 8002418:	080024df 	.word	0x080024df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fa04 	bl	8002830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0208 	orr.w	r2, r2, #8
 8002436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699a      	ldr	r2, [r3, #24]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0204 	bic.w	r2, r2, #4
 8002446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6999      	ldr	r1, [r3, #24]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	619a      	str	r2, [r3, #24]
      break;
 800245a:	e064      	b.n	8002526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fa4a 	bl	80028fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6999      	ldr	r1, [r3, #24]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	021a      	lsls	r2, r3, #8
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	619a      	str	r2, [r3, #24]
      break;
 800249c:	e043      	b.n	8002526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 fa95 	bl	80029d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69da      	ldr	r2, [r3, #28]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0208 	orr.w	r2, r2, #8
 80024b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69da      	ldr	r2, [r3, #28]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0204 	bic.w	r2, r2, #4
 80024c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69d9      	ldr	r1, [r3, #28]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	61da      	str	r2, [r3, #28]
      break;
 80024dc:	e023      	b.n	8002526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fadf 	bl	8002aa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69da      	ldr	r2, [r3, #28]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69d9      	ldr	r1, [r3, #28]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	021a      	lsls	r2, r3, #8
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	61da      	str	r2, [r3, #28]
      break;
 800251e:	e002      	b.n	8002526 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	75fb      	strb	r3, [r7, #23]
      break;
 8002524:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800252e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_TIM_ConfigClockSource+0x1c>
 8002550:	2302      	movs	r3, #2
 8002552:	e0b4      	b.n	80026be <HAL_TIM_ConfigClockSource+0x186>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800257a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800258c:	d03e      	beq.n	800260c <HAL_TIM_ConfigClockSource+0xd4>
 800258e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002592:	f200 8087 	bhi.w	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800259a:	f000 8086 	beq.w	80026aa <HAL_TIM_ConfigClockSource+0x172>
 800259e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025a2:	d87f      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025a4:	2b70      	cmp	r3, #112	@ 0x70
 80025a6:	d01a      	beq.n	80025de <HAL_TIM_ConfigClockSource+0xa6>
 80025a8:	2b70      	cmp	r3, #112	@ 0x70
 80025aa:	d87b      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025ac:	2b60      	cmp	r3, #96	@ 0x60
 80025ae:	d050      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x11a>
 80025b0:	2b60      	cmp	r3, #96	@ 0x60
 80025b2:	d877      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025b4:	2b50      	cmp	r3, #80	@ 0x50
 80025b6:	d03c      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0xfa>
 80025b8:	2b50      	cmp	r3, #80	@ 0x50
 80025ba:	d873      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025bc:	2b40      	cmp	r3, #64	@ 0x40
 80025be:	d058      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x13a>
 80025c0:	2b40      	cmp	r3, #64	@ 0x40
 80025c2:	d86f      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025c4:	2b30      	cmp	r3, #48	@ 0x30
 80025c6:	d064      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0x15a>
 80025c8:	2b30      	cmp	r3, #48	@ 0x30
 80025ca:	d86b      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d060      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0x15a>
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d867      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d05c      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0x15a>
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d05a      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0x15a>
 80025dc:	e062      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025ee:	f000 fb25 	bl	8002c3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	609a      	str	r2, [r3, #8]
      break;
 800260a:	e04f      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800261c:	f000 fb0e 	bl	8002c3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800262e:	609a      	str	r2, [r3, #8]
      break;
 8002630:	e03c      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800263e:	461a      	mov	r2, r3
 8002640:	f000 fa82 	bl	8002b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2150      	movs	r1, #80	@ 0x50
 800264a:	4618      	mov	r0, r3
 800264c:	f000 fadb 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 8002650:	e02c      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800265e:	461a      	mov	r2, r3
 8002660:	f000 faa1 	bl	8002ba6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2160      	movs	r1, #96	@ 0x60
 800266a:	4618      	mov	r0, r3
 800266c:	f000 facb 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 8002670:	e01c      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800267e:	461a      	mov	r2, r3
 8002680:	f000 fa62 	bl	8002b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2140      	movs	r1, #64	@ 0x40
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fabb 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 8002690:	e00c      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	4610      	mov	r0, r2
 800269e:	f000 fab2 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 80026a2:	e003      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      break;
 80026a8:	e000      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a3a      	ldr	r2, [pc, #232]	@ (8002814 <TIM_Base_SetConfig+0xfc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00f      	beq.n	8002750 <TIM_Base_SetConfig+0x38>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002736:	d00b      	beq.n	8002750 <TIM_Base_SetConfig+0x38>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a37      	ldr	r2, [pc, #220]	@ (8002818 <TIM_Base_SetConfig+0x100>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d007      	beq.n	8002750 <TIM_Base_SetConfig+0x38>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a36      	ldr	r2, [pc, #216]	@ (800281c <TIM_Base_SetConfig+0x104>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d003      	beq.n	8002750 <TIM_Base_SetConfig+0x38>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a35      	ldr	r2, [pc, #212]	@ (8002820 <TIM_Base_SetConfig+0x108>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d108      	bne.n	8002762 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a2b      	ldr	r2, [pc, #172]	@ (8002814 <TIM_Base_SetConfig+0xfc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01b      	beq.n	80027a2 <TIM_Base_SetConfig+0x8a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002770:	d017      	beq.n	80027a2 <TIM_Base_SetConfig+0x8a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a28      	ldr	r2, [pc, #160]	@ (8002818 <TIM_Base_SetConfig+0x100>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d013      	beq.n	80027a2 <TIM_Base_SetConfig+0x8a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a27      	ldr	r2, [pc, #156]	@ (800281c <TIM_Base_SetConfig+0x104>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00f      	beq.n	80027a2 <TIM_Base_SetConfig+0x8a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a26      	ldr	r2, [pc, #152]	@ (8002820 <TIM_Base_SetConfig+0x108>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00b      	beq.n	80027a2 <TIM_Base_SetConfig+0x8a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a25      	ldr	r2, [pc, #148]	@ (8002824 <TIM_Base_SetConfig+0x10c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d007      	beq.n	80027a2 <TIM_Base_SetConfig+0x8a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a24      	ldr	r2, [pc, #144]	@ (8002828 <TIM_Base_SetConfig+0x110>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d003      	beq.n	80027a2 <TIM_Base_SetConfig+0x8a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a23      	ldr	r2, [pc, #140]	@ (800282c <TIM_Base_SetConfig+0x114>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d108      	bne.n	80027b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a0e      	ldr	r2, [pc, #56]	@ (8002814 <TIM_Base_SetConfig+0xfc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d103      	bne.n	80027e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d105      	bne.n	8002806 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f023 0201 	bic.w	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	611a      	str	r2, [r3, #16]
  }
}
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40010000 	.word	0x40010000
 8002818:	40000400 	.word	0x40000400
 800281c:	40000800 	.word	0x40000800
 8002820:	40000c00 	.word	0x40000c00
 8002824:	40014000 	.word	0x40014000
 8002828:	40014400 	.word	0x40014400
 800282c:	40014800 	.word	0x40014800

08002830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f023 0201 	bic.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800285e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0303 	bic.w	r3, r3, #3
 8002866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f023 0302 	bic.w	r3, r3, #2
 8002878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a1c      	ldr	r2, [pc, #112]	@ (80028f8 <TIM_OC1_SetConfig+0xc8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d10c      	bne.n	80028a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f023 0308 	bic.w	r3, r3, #8
 8002892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f023 0304 	bic.w	r3, r3, #4
 80028a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a13      	ldr	r2, [pc, #76]	@ (80028f8 <TIM_OC1_SetConfig+0xc8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d111      	bne.n	80028d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	621a      	str	r2, [r3, #32]
}
 80028ec:	bf00      	nop
 80028ee:	371c      	adds	r7, #28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40010000 	.word	0x40010000

080028fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f023 0210 	bic.w	r2, r3, #16
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800292a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0320 	bic.w	r3, r3, #32
 8002946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a1e      	ldr	r2, [pc, #120]	@ (80029d0 <TIM_OC2_SetConfig+0xd4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d10d      	bne.n	8002978 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002976:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a15      	ldr	r2, [pc, #84]	@ (80029d0 <TIM_OC2_SetConfig+0xd4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d113      	bne.n	80029a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800298e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	621a      	str	r2, [r3, #32]
}
 80029c2:	bf00      	nop
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40010000 	.word	0x40010000

080029d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0303 	bic.w	r3, r3, #3
 8002a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa4 <TIM_OC3_SetConfig+0xd0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d10d      	bne.n	8002a4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a14      	ldr	r2, [pc, #80]	@ (8002aa4 <TIM_OC3_SetConfig+0xd0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d113      	bne.n	8002a7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	621a      	str	r2, [r3, #32]
}
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40010000 	.word	0x40010000

08002aa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	031b      	lsls	r3, r3, #12
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a10      	ldr	r2, [pc, #64]	@ (8002b44 <TIM_OC4_SetConfig+0x9c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d109      	bne.n	8002b1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	019b      	lsls	r3, r3, #6
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	621a      	str	r2, [r3, #32]
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40010000 	.word	0x40010000

08002b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f023 0201 	bic.w	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f023 030a 	bic.w	r3, r3, #10
 8002b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	621a      	str	r2, [r3, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b087      	sub	sp, #28
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f023 0210 	bic.w	r2, r3, #16
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	031b      	lsls	r3, r3, #12
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002be2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	621a      	str	r2, [r3, #32]
}
 8002bfa:	bf00      	nop
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f043 0307 	orr.w	r3, r3, #7
 8002c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	609a      	str	r2, [r3, #8]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	021a      	lsls	r2, r3, #8
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	609a      	str	r2, [r3, #8]
}
 8002c70:	bf00      	nop
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	2201      	movs	r2, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a1a      	ldr	r2, [r3, #32]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a1a      	ldr	r2, [r3, #32]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	621a      	str	r2, [r3, #32]
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e050      	b.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d018      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d2c:	d013      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a18      	ldr	r2, [pc, #96]	@ (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00e      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a16      	ldr	r2, [pc, #88]	@ (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d009      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a15      	ldr	r2, [pc, #84]	@ (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d004      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a13      	ldr	r2, [pc, #76]	@ (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d10c      	bne.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40010000 	.word	0x40010000
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800
 8002d9c:	40000c00 	.word	0x40000c00
 8002da0:	40014000 	.word	0x40014000

08002da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e042      	b.n	8002e64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd ff9a 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2224      	movs	r2, #36	@ 0x24
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fd75 	bl	8003900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	@ 0x28
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	f040 8081 	bne.w	8002f90 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_UART_Receive+0x2e>
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e079      	b.n	8002f92 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2222      	movs	r2, #34	@ 0x22
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb2:	f7fd ffeb 	bl	8000e8c <HAL_GetTick>
 8002eb6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	88fa      	ldrh	r2, [r7, #6]
 8002ebc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	88fa      	ldrh	r2, [r7, #6]
 8002ec2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ecc:	d108      	bne.n	8002ee0 <HAL_UART_Receive+0x74>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d104      	bne.n	8002ee0 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	e003      	b.n	8002ee8 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ee8:	e047      	b.n	8002f7a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2120      	movs	r1, #32
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 fb0d 	bl	8003514 <UART_WaitOnFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e042      	b.n	8002f92 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10c      	bne.n	8002f2c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	3302      	adds	r3, #2
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	e01f      	b.n	8002f6c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f34:	d007      	beq.n	8002f46 <HAL_UART_Receive+0xda>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <HAL_UART_Receive+0xe8>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	701a      	strb	r2, [r3, #0]
 8002f52:	e008      	b.n	8002f66 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1b2      	bne.n	8002eea <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b0ba      	sub	sp, #232	@ 0xe8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_UART_IRQHandler+0x66>
 8002fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fbc2 	bl	8003784 <UART_Receive_IT>
      return;
 8003000:	e25b      	b.n	80034ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80de 	beq.w	80031c8 <HAL_UART_IRQHandler+0x22c>
 800300c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d106      	bne.n	8003026 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800301c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80d1 	beq.w	80031c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_UART_IRQHandler+0xae>
 8003032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003042:	f043 0201 	orr.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800304a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_UART_IRQHandler+0xd2>
 8003056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003066:	f043 0202 	orr.w	r2, r3, #2
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_UART_IRQHandler+0xf6>
 800307a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	f043 0204 	orr.w	r2, r3, #4
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d011      	beq.n	80030c2 <HAL_UART_IRQHandler+0x126>
 800309e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d105      	bne.n	80030b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ba:	f043 0208 	orr.w	r2, r3, #8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 81f2 	beq.w	80034b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_UART_IRQHandler+0x14e>
 80030d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fb4d 	bl	8003784 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f4:	2b40      	cmp	r3, #64	@ 0x40
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <HAL_UART_IRQHandler+0x17a>
 800310e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d04f      	beq.n	80031b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fa55 	bl	80035c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003126:	2b40      	cmp	r3, #64	@ 0x40
 8003128:	d141      	bne.n	80031ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3314      	adds	r3, #20
 8003130:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003134:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003138:	e853 3f00 	ldrex	r3, [r3]
 800313c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003140:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003148:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3314      	adds	r3, #20
 8003152:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003156:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800315a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800316e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1d9      	bne.n	800312a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d013      	beq.n	80031a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003182:	4a7e      	ldr	r2, [pc, #504]	@ (800337c <HAL_UART_IRQHandler+0x3e0>)
 8003184:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd ffdc 	bl	8001148 <HAL_DMA_Abort_IT>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031a0:	4610      	mov	r0, r2
 80031a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a4:	e00e      	b.n	80031c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f99e 	bl	80034e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ac:	e00a      	b.n	80031c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f99a 	bl	80034e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b4:	e006      	b.n	80031c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f996 	bl	80034e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80031c2:	e175      	b.n	80034b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c4:	bf00      	nop
    return;
 80031c6:	e173      	b.n	80034b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	f040 814f 	bne.w	8003470 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8148 	beq.w	8003470 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8141 	beq.w	8003470 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320e:	2b40      	cmp	r3, #64	@ 0x40
 8003210:	f040 80b6 	bne.w	8003380 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003220:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8145 	beq.w	80034b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800322e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003232:	429a      	cmp	r2, r3
 8003234:	f080 813e 	bcs.w	80034b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800323e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800324a:	f000 8088 	beq.w	800335e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	330c      	adds	r3, #12
 8003254:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003258:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003264:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800326c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	330c      	adds	r3, #12
 8003276:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800327a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800327e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003282:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003286:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003292:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1d9      	bne.n	800324e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3314      	adds	r3, #20
 80032a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80032aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80032c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80032c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80032d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e1      	bne.n	800329a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3314      	adds	r3, #20
 80032dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032e0:	e853 3f00 	ldrex	r3, [r3]
 80032e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3314      	adds	r3, #20
 80032f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003300:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003308:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e3      	bne.n	80032d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003326:	e853 3f00 	ldrex	r3, [r3]
 800332a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800332c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800332e:	f023 0310 	bic.w	r3, r3, #16
 8003332:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	330c      	adds	r3, #12
 800333c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003340:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003342:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003344:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003346:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003348:	e841 2300 	strex	r3, r2, [r1]
 800334c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800334e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e3      	bne.n	800331c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003358:	4618      	mov	r0, r3
 800335a:	f7fd fe85 	bl	8001068 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2202      	movs	r2, #2
 8003362:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800336c:	b29b      	uxth	r3, r3
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	b29b      	uxth	r3, r3
 8003372:	4619      	mov	r1, r3
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f8c1 	bl	80034fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800337a:	e09b      	b.n	80034b4 <HAL_UART_IRQHandler+0x518>
 800337c:	0800368d 	.word	0x0800368d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003388:	b29b      	uxth	r3, r3
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 808e 	beq.w	80034b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800339c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8089 	beq.w	80034b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80033ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80033cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e3      	bne.n	80033a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3314      	adds	r3, #20
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	623b      	str	r3, [r7, #32]
   return(result);
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3314      	adds	r3, #20
 80033fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003402:	633a      	str	r2, [r7, #48]	@ 0x30
 8003404:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e3      	bne.n	80033de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	60fb      	str	r3, [r7, #12]
   return(result);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0310 	bic.w	r3, r3, #16
 800343a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	330c      	adds	r3, #12
 8003444:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003448:	61fa      	str	r2, [r7, #28]
 800344a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	69b9      	ldr	r1, [r7, #24]
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	617b      	str	r3, [r7, #20]
   return(result);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e3      	bne.n	8003424 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003462:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003466:	4619      	mov	r1, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f847 	bl	80034fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800346e:	e023      	b.n	80034b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d009      	beq.n	8003490 <HAL_UART_IRQHandler+0x4f4>
 800347c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f913 	bl	80036b4 <UART_Transmit_IT>
    return;
 800348e:	e014      	b.n	80034ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00e      	beq.n	80034ba <HAL_UART_IRQHandler+0x51e>
 800349c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f953 	bl	8003754 <UART_EndTransmit_IT>
    return;
 80034ae:	e004      	b.n	80034ba <HAL_UART_IRQHandler+0x51e>
    return;
 80034b0:	bf00      	nop
 80034b2:	e002      	b.n	80034ba <HAL_UART_IRQHandler+0x51e>
      return;
 80034b4:	bf00      	nop
 80034b6:	e000      	b.n	80034ba <HAL_UART_IRQHandler+0x51e>
      return;
 80034b8:	bf00      	nop
  }
}
 80034ba:	37e8      	adds	r7, #232	@ 0xe8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003524:	e03b      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d037      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7fd fcad 	bl	8000e8c <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	6a3a      	ldr	r2, [r7, #32]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <UART_WaitOnFlagUntilTimeout+0x30>
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e03a      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d023      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b80      	cmp	r3, #128	@ 0x80
 800355a:	d020      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0x8a>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b40      	cmp	r3, #64	@ 0x40
 8003560:	d01d      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b08      	cmp	r3, #8
 800356e:	d116      	bne.n	800359e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f81d 	bl	80035c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2208      	movs	r2, #8
 8003590:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e00f      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d0b4      	beq.n	8003526 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b095      	sub	sp, #84	@ 0x54
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	330c      	adds	r3, #12
 80035d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	330c      	adds	r3, #12
 80035ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80035f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e5      	bne.n	80035ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3314      	adds	r3, #20
 8003608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	61fb      	str	r3, [r7, #28]
   return(result);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	64bb      	str	r3, [r7, #72]	@ 0x48
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3314      	adds	r3, #20
 8003620:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003622:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003624:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e5      	bne.n	8003602 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	2b01      	cmp	r3, #1
 800363c:	d119      	bne.n	8003672 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	60bb      	str	r3, [r7, #8]
   return(result);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f023 0310 	bic.w	r3, r3, #16
 8003654:	647b      	str	r3, [r7, #68]	@ 0x44
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	330c      	adds	r3, #12
 800365c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800365e:	61ba      	str	r2, [r7, #24]
 8003660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	6979      	ldr	r1, [r7, #20]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	613b      	str	r3, [r7, #16]
   return(result);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e5      	bne.n	800363e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003680:	bf00      	nop
 8003682:	3754      	adds	r7, #84	@ 0x54
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7ff ff1e 	bl	80034e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b21      	cmp	r3, #33	@ 0x21
 80036c6:	d13e      	bne.n	8003746 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d0:	d114      	bne.n	80036fc <UART_Transmit_IT+0x48>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d110      	bne.n	80036fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	1c9a      	adds	r2, r3, #2
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	621a      	str	r2, [r3, #32]
 80036fa:	e008      	b.n	800370e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	1c59      	adds	r1, r3, #1
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6211      	str	r1, [r2, #32]
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29b      	uxth	r3, r3
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4619      	mov	r1, r3
 800371c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10f      	bne.n	8003742 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003730:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003740:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
  }
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800376a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff fea3 	bl	80034c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08c      	sub	sp, #48	@ 0x30
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b22      	cmp	r3, #34	@ 0x22
 8003796:	f040 80ae 	bne.w	80038f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a2:	d117      	bne.n	80037d4 <UART_Receive_IT+0x50>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d113      	bne.n	80037d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037cc:	1c9a      	adds	r2, r3, #2
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80037d2:	e026      	b.n	8003822 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e6:	d007      	beq.n	80037f8 <UART_Receive_IT+0x74>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <UART_Receive_IT+0x82>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	e008      	b.n	8003818 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003812:	b2da      	uxtb	r2, r3
 8003814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003816:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29b      	uxth	r3, r3
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4619      	mov	r1, r3
 8003830:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003832:	2b00      	cmp	r3, #0
 8003834:	d15d      	bne.n	80038f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0220 	bic.w	r2, r2, #32
 8003844:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003854:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	2b01      	cmp	r3, #1
 800387a:	d135      	bne.n	80038e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	613b      	str	r3, [r7, #16]
   return(result);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f023 0310 	bic.w	r3, r3, #16
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a2:	623a      	str	r2, [r7, #32]
 80038a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	69f9      	ldr	r1, [r7, #28]
 80038a8:	6a3a      	ldr	r2, [r7, #32]
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e5      	bne.n	8003882 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d10a      	bne.n	80038da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038de:	4619      	mov	r1, r3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff fe0b 	bl	80034fc <HAL_UARTEx_RxEventCallback>
 80038e6:	e002      	b.n	80038ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fdf3 	bl	80034d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	e002      	b.n	80038f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e000      	b.n	80038f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
  }
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3730      	adds	r7, #48	@ 0x30
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003904:	b0c0      	sub	sp, #256	@ 0x100
 8003906:	af00      	add	r7, sp, #0
 8003908:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391c:	68d9      	ldr	r1, [r3, #12]
 800391e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	ea40 0301 	orr.w	r3, r0, r1
 8003928:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	431a      	orrs	r2, r3
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	431a      	orrs	r2, r3
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003958:	f021 010c 	bic.w	r1, r1, #12
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003966:	430b      	orrs	r3, r1
 8003968:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397a:	6999      	ldr	r1, [r3, #24]
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	ea40 0301 	orr.w	r3, r0, r1
 8003986:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	4b8f      	ldr	r3, [pc, #572]	@ (8003bcc <UART_SetConfig+0x2cc>)
 8003990:	429a      	cmp	r2, r3
 8003992:	d005      	beq.n	80039a0 <UART_SetConfig+0xa0>
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4b8d      	ldr	r3, [pc, #564]	@ (8003bd0 <UART_SetConfig+0x2d0>)
 800399c:	429a      	cmp	r2, r3
 800399e:	d104      	bne.n	80039aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039a0:	f7fe fa16 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 80039a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039a8:	e003      	b.n	80039b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039aa:	f7fe f9fd 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 80039ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039bc:	f040 810c 	bne.w	8003bd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039c4:	2200      	movs	r2, #0
 80039c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039d2:	4622      	mov	r2, r4
 80039d4:	462b      	mov	r3, r5
 80039d6:	1891      	adds	r1, r2, r2
 80039d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039da:	415b      	adcs	r3, r3
 80039dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039e2:	4621      	mov	r1, r4
 80039e4:	eb12 0801 	adds.w	r8, r2, r1
 80039e8:	4629      	mov	r1, r5
 80039ea:	eb43 0901 	adc.w	r9, r3, r1
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a02:	4690      	mov	r8, r2
 8003a04:	4699      	mov	r9, r3
 8003a06:	4623      	mov	r3, r4
 8003a08:	eb18 0303 	adds.w	r3, r8, r3
 8003a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a10:	462b      	mov	r3, r5
 8003a12:	eb49 0303 	adc.w	r3, r9, r3
 8003a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a2e:	460b      	mov	r3, r1
 8003a30:	18db      	adds	r3, r3, r3
 8003a32:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a34:	4613      	mov	r3, r2
 8003a36:	eb42 0303 	adc.w	r3, r2, r3
 8003a3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a44:	f7fc fbcc 	bl	80001e0 <__aeabi_uldivmod>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4b61      	ldr	r3, [pc, #388]	@ (8003bd4 <UART_SetConfig+0x2d4>)
 8003a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	011c      	lsls	r4, r3, #4
 8003a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a68:	4642      	mov	r2, r8
 8003a6a:	464b      	mov	r3, r9
 8003a6c:	1891      	adds	r1, r2, r2
 8003a6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a70:	415b      	adcs	r3, r3
 8003a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a78:	4641      	mov	r1, r8
 8003a7a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a7e:	4649      	mov	r1, r9
 8003a80:	eb43 0b01 	adc.w	fp, r3, r1
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a98:	4692      	mov	sl, r2
 8003a9a:	469b      	mov	fp, r3
 8003a9c:	4643      	mov	r3, r8
 8003a9e:	eb1a 0303 	adds.w	r3, sl, r3
 8003aa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	eb4b 0303 	adc.w	r3, fp, r3
 8003aac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003abc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ac0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	18db      	adds	r3, r3, r3
 8003ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aca:	4613      	mov	r3, r2
 8003acc:	eb42 0303 	adc.w	r3, r2, r3
 8003ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ad2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ad6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ada:	f7fc fb81 	bl	80001e0 <__aeabi_uldivmod>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd4 <UART_SetConfig+0x2d4>)
 8003ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2264      	movs	r2, #100	@ 0x64
 8003aee:	fb02 f303 	mul.w	r3, r2, r3
 8003af2:	1acb      	subs	r3, r1, r3
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003afa:	4b36      	ldr	r3, [pc, #216]	@ (8003bd4 <UART_SetConfig+0x2d4>)
 8003afc:	fba3 2302 	umull	r2, r3, r3, r2
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b08:	441c      	add	r4, r3
 8003b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b1c:	4642      	mov	r2, r8
 8003b1e:	464b      	mov	r3, r9
 8003b20:	1891      	adds	r1, r2, r2
 8003b22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b24:	415b      	adcs	r3, r3
 8003b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	1851      	adds	r1, r2, r1
 8003b30:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b32:	4649      	mov	r1, r9
 8003b34:	414b      	adcs	r3, r1
 8003b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b44:	4659      	mov	r1, fp
 8003b46:	00cb      	lsls	r3, r1, #3
 8003b48:	4651      	mov	r1, sl
 8003b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b4e:	4651      	mov	r1, sl
 8003b50:	00ca      	lsls	r2, r1, #3
 8003b52:	4610      	mov	r0, r2
 8003b54:	4619      	mov	r1, r3
 8003b56:	4603      	mov	r3, r0
 8003b58:	4642      	mov	r2, r8
 8003b5a:	189b      	adds	r3, r3, r2
 8003b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b60:	464b      	mov	r3, r9
 8003b62:	460a      	mov	r2, r1
 8003b64:	eb42 0303 	adc.w	r3, r2, r3
 8003b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b80:	460b      	mov	r3, r1
 8003b82:	18db      	adds	r3, r3, r3
 8003b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b86:	4613      	mov	r3, r2
 8003b88:	eb42 0303 	adc.w	r3, r2, r3
 8003b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b96:	f7fc fb23 	bl	80001e0 <__aeabi_uldivmod>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd4 <UART_SetConfig+0x2d4>)
 8003ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	2164      	movs	r1, #100	@ 0x64
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	3332      	adds	r3, #50	@ 0x32
 8003bb2:	4a08      	ldr	r2, [pc, #32]	@ (8003bd4 <UART_SetConfig+0x2d4>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	f003 0207 	and.w	r2, r3, #7
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4422      	add	r2, r4
 8003bc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bc8:	e106      	b.n	8003dd8 <UART_SetConfig+0x4d8>
 8003bca:	bf00      	nop
 8003bcc:	40011000 	.word	0x40011000
 8003bd0:	40011400 	.word	0x40011400
 8003bd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003be2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003be6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bea:	4642      	mov	r2, r8
 8003bec:	464b      	mov	r3, r9
 8003bee:	1891      	adds	r1, r2, r2
 8003bf0:	6239      	str	r1, [r7, #32]
 8003bf2:	415b      	adcs	r3, r3
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bfa:	4641      	mov	r1, r8
 8003bfc:	1854      	adds	r4, r2, r1
 8003bfe:	4649      	mov	r1, r9
 8003c00:	eb43 0501 	adc.w	r5, r3, r1
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	00eb      	lsls	r3, r5, #3
 8003c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c12:	00e2      	lsls	r2, r4, #3
 8003c14:	4614      	mov	r4, r2
 8003c16:	461d      	mov	r5, r3
 8003c18:	4643      	mov	r3, r8
 8003c1a:	18e3      	adds	r3, r4, r3
 8003c1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c20:	464b      	mov	r3, r9
 8003c22:	eb45 0303 	adc.w	r3, r5, r3
 8003c26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c46:	4629      	mov	r1, r5
 8003c48:	008b      	lsls	r3, r1, #2
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c50:	4621      	mov	r1, r4
 8003c52:	008a      	lsls	r2, r1, #2
 8003c54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c58:	f7fc fac2 	bl	80001e0 <__aeabi_uldivmod>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4b60      	ldr	r3, [pc, #384]	@ (8003de4 <UART_SetConfig+0x4e4>)
 8003c62:	fba3 2302 	umull	r2, r3, r3, r2
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	011c      	lsls	r4, r3, #4
 8003c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	464b      	mov	r3, r9
 8003c80:	1891      	adds	r1, r2, r2
 8003c82:	61b9      	str	r1, [r7, #24]
 8003c84:	415b      	adcs	r3, r3
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c8c:	4641      	mov	r1, r8
 8003c8e:	1851      	adds	r1, r2, r1
 8003c90:	6139      	str	r1, [r7, #16]
 8003c92:	4649      	mov	r1, r9
 8003c94:	414b      	adcs	r3, r1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ca4:	4659      	mov	r1, fp
 8003ca6:	00cb      	lsls	r3, r1, #3
 8003ca8:	4651      	mov	r1, sl
 8003caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cae:	4651      	mov	r1, sl
 8003cb0:	00ca      	lsls	r2, r1, #3
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4642      	mov	r2, r8
 8003cba:	189b      	adds	r3, r3, r2
 8003cbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cc0:	464b      	mov	r3, r9
 8003cc2:	460a      	mov	r2, r1
 8003cc4:	eb42 0303 	adc.w	r3, r2, r3
 8003cc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	008b      	lsls	r3, r1, #2
 8003ce8:	4641      	mov	r1, r8
 8003cea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cee:	4641      	mov	r1, r8
 8003cf0:	008a      	lsls	r2, r1, #2
 8003cf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cf6:	f7fc fa73 	bl	80001e0 <__aeabi_uldivmod>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4b38      	ldr	r3, [pc, #224]	@ (8003de4 <UART_SetConfig+0x4e4>)
 8003d02:	fba3 2301 	umull	r2, r3, r3, r1
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	2264      	movs	r2, #100	@ 0x64
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	1acb      	subs	r3, r1, r3
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	3332      	adds	r3, #50	@ 0x32
 8003d14:	4a33      	ldr	r2, [pc, #204]	@ (8003de4 <UART_SetConfig+0x4e4>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d20:	441c      	add	r4, r3
 8003d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d26:	2200      	movs	r2, #0
 8003d28:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d30:	4642      	mov	r2, r8
 8003d32:	464b      	mov	r3, r9
 8003d34:	1891      	adds	r1, r2, r2
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	415b      	adcs	r3, r3
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d40:	4641      	mov	r1, r8
 8003d42:	1851      	adds	r1, r2, r1
 8003d44:	6039      	str	r1, [r7, #0]
 8003d46:	4649      	mov	r1, r9
 8003d48:	414b      	adcs	r3, r1
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d58:	4659      	mov	r1, fp
 8003d5a:	00cb      	lsls	r3, r1, #3
 8003d5c:	4651      	mov	r1, sl
 8003d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d62:	4651      	mov	r1, sl
 8003d64:	00ca      	lsls	r2, r1, #3
 8003d66:	4610      	mov	r0, r2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4642      	mov	r2, r8
 8003d6e:	189b      	adds	r3, r3, r2
 8003d70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d72:	464b      	mov	r3, r9
 8003d74:	460a      	mov	r2, r1
 8003d76:	eb42 0303 	adc.w	r3, r2, r3
 8003d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d86:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d94:	4649      	mov	r1, r9
 8003d96:	008b      	lsls	r3, r1, #2
 8003d98:	4641      	mov	r1, r8
 8003d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d9e:	4641      	mov	r1, r8
 8003da0:	008a      	lsls	r2, r1, #2
 8003da2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003da6:	f7fc fa1b 	bl	80001e0 <__aeabi_uldivmod>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4b0d      	ldr	r3, [pc, #52]	@ (8003de4 <UART_SetConfig+0x4e4>)
 8003db0:	fba3 1302 	umull	r1, r3, r3, r2
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	2164      	movs	r1, #100	@ 0x64
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	3332      	adds	r3, #50	@ 0x32
 8003dc2:	4a08      	ldr	r2, [pc, #32]	@ (8003de4 <UART_SetConfig+0x4e4>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	f003 020f 	and.w	r2, r3, #15
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4422      	add	r2, r4
 8003dd6:	609a      	str	r2, [r3, #8]
}
 8003dd8:	bf00      	nop
 8003dda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003dde:	46bd      	mov	sp, r7
 8003de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de4:	51eb851f 	.word	0x51eb851f

08003de8 <__NVIC_SetPriority>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	6039      	str	r1, [r7, #0]
 8003df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	db0a      	blt.n	8003e12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	490c      	ldr	r1, [pc, #48]	@ (8003e34 <__NVIC_SetPriority+0x4c>)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	0112      	lsls	r2, r2, #4
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e10:	e00a      	b.n	8003e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	4908      	ldr	r1, [pc, #32]	@ (8003e38 <__NVIC_SetPriority+0x50>)
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	3b04      	subs	r3, #4
 8003e20:	0112      	lsls	r2, r2, #4
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	440b      	add	r3, r1
 8003e26:	761a      	strb	r2, [r3, #24]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	e000e100 	.word	0xe000e100
 8003e38:	e000ed00 	.word	0xe000ed00

08003e3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003e40:	4b05      	ldr	r3, [pc, #20]	@ (8003e58 <SysTick_Handler+0x1c>)
 8003e42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003e44:	f001 fd46 	bl	80058d4 <xTaskGetSchedulerState>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d001      	beq.n	8003e52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003e4e:	f002 fb3b 	bl	80064c8 <xPortSysTickHandler>
  }
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	e000e010 	.word	0xe000e010

08003e5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e60:	2100      	movs	r1, #0
 8003e62:	f06f 0004 	mvn.w	r0, #4
 8003e66:	f7ff ffbf 	bl	8003de8 <__NVIC_SetPriority>
#endif
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e76:	f3ef 8305 	mrs	r3, IPSR
 8003e7a:	603b      	str	r3, [r7, #0]
  return(result);
 8003e7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003e82:	f06f 0305 	mvn.w	r3, #5
 8003e86:	607b      	str	r3, [r7, #4]
 8003e88:	e00c      	b.n	8003ea4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb4 <osKernelInitialize+0x44>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d105      	bne.n	8003e9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e92:	4b08      	ldr	r3, [pc, #32]	@ (8003eb4 <osKernelInitialize+0x44>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	e002      	b.n	8003ea4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ea4:	687b      	ldr	r3, [r7, #4]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	200001b0 	.word	0x200001b0

08003eb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ebe:	f3ef 8305 	mrs	r3, IPSR
 8003ec2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ec4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003eca:	f06f 0305 	mvn.w	r3, #5
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	e010      	b.n	8003ef4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <osKernelStart+0x48>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d109      	bne.n	8003eee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003eda:	f7ff ffbf 	bl	8003e5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ede:	4b08      	ldr	r3, [pc, #32]	@ (8003f00 <osKernelStart+0x48>)
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ee4:	f001 f892 	bl	800500c <vTaskStartScheduler>
      stat = osOK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	607b      	str	r3, [r7, #4]
 8003eec:	e002      	b.n	8003ef4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003eee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ef4:	687b      	ldr	r3, [r7, #4]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	200001b0 	.word	0x200001b0

08003f04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08e      	sub	sp, #56	@ 0x38
 8003f08:	af04      	add	r7, sp, #16
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f14:	f3ef 8305 	mrs	r3, IPSR
 8003f18:	617b      	str	r3, [r7, #20]
  return(result);
 8003f1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d17e      	bne.n	800401e <osThreadNew+0x11a>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d07b      	beq.n	800401e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003f26:	2380      	movs	r3, #128	@ 0x80
 8003f28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003f2a:	2318      	movs	r3, #24
 8003f2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295
 8003f36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d045      	beq.n	8003fca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <osThreadNew+0x48>
        name = attr->name;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <osThreadNew+0x6e>
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b38      	cmp	r3, #56	@ 0x38
 8003f64:	d805      	bhi.n	8003f72 <osThreadNew+0x6e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <osThreadNew+0x72>
        return (NULL);
 8003f72:	2300      	movs	r3, #0
 8003f74:	e054      	b.n	8004020 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00e      	beq.n	8003fac <osThreadNew+0xa8>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2ba7      	cmp	r3, #167	@ 0xa7
 8003f94:	d90a      	bls.n	8003fac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d006      	beq.n	8003fac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <osThreadNew+0xa8>
        mem = 1;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	e010      	b.n	8003fce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10c      	bne.n	8003fce <osThreadNew+0xca>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d108      	bne.n	8003fce <osThreadNew+0xca>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d104      	bne.n	8003fce <osThreadNew+0xca>
          mem = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61bb      	str	r3, [r7, #24]
 8003fc8:	e001      	b.n	8003fce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d110      	bne.n	8003ff6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fdc:	9202      	str	r2, [sp, #8]
 8003fde:	9301      	str	r3, [sp, #4]
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	6a3a      	ldr	r2, [r7, #32]
 8003fe8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fe1a 	bl	8004c24 <xTaskCreateStatic>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e013      	b.n	800401e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d110      	bne.n	800401e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	f107 0310 	add.w	r3, r7, #16
 8004004:	9301      	str	r3, [sp, #4]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fe68 	bl	8004ce4 <xTaskCreate>
 8004014:	4603      	mov	r3, r0
 8004016:	2b01      	cmp	r3, #1
 8004018:	d001      	beq.n	800401e <osThreadNew+0x11a>
            hTask = NULL;
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800401e:	693b      	ldr	r3, [r7, #16]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3728      	adds	r7, #40	@ 0x28
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004030:	f3ef 8305 	mrs	r3, IPSR
 8004034:	60bb      	str	r3, [r7, #8]
  return(result);
 8004036:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <osDelay+0x1c>
    stat = osErrorISR;
 800403c:	f06f 0305 	mvn.w	r3, #5
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	e007      	b.n	8004054 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004044:	2300      	movs	r3, #0
 8004046:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <osDelay+0x2c>
      vTaskDelay(ticks);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 ffa6 	bl	8004fa0 <vTaskDelay>
    }
  }

  return (stat);
 8004054:	68fb      	ldr	r3, [r7, #12]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a07      	ldr	r2, [pc, #28]	@ (800408c <vApplicationGetIdleTaskMemory+0x2c>)
 8004070:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	4a06      	ldr	r2, [pc, #24]	@ (8004090 <vApplicationGetIdleTaskMemory+0x30>)
 8004076:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2280      	movs	r2, #128	@ 0x80
 800407c:	601a      	str	r2, [r3, #0]
}
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	200001b4 	.word	0x200001b4
 8004090:	2000025c 	.word	0x2000025c

08004094 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a07      	ldr	r2, [pc, #28]	@ (80040c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80040a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4a06      	ldr	r2, [pc, #24]	@ (80040c4 <vApplicationGetTimerTaskMemory+0x30>)
 80040aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040b2:	601a      	str	r2, [r3, #0]
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	2000045c 	.word	0x2000045c
 80040c4:	20000504 	.word	0x20000504

080040c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f103 0208 	add.w	r2, r3, #8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f04f 32ff 	mov.w	r2, #4294967295
 80040e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f103 0208 	add.w	r2, r3, #8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f103 0208 	add.w	r2, r3, #8
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004122:	b480      	push	{r7}
 8004124:	b085      	sub	sp, #20
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	601a      	str	r2, [r3, #0]
}
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800416a:	b480      	push	{r7}
 800416c:	b085      	sub	sp, #20
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d103      	bne.n	800418a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	e00c      	b.n	80041a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3308      	adds	r3, #8
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e002      	b.n	8004198 <vListInsert+0x2e>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d2f6      	bcs.n	8004192 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	601a      	str	r2, [r3, #0]
}
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6892      	ldr	r2, [r2, #8]
 80041f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6852      	ldr	r2, [r2, #4]
 80041fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	429a      	cmp	r2, r3
 8004206:	d103      	bne.n	8004210 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	1e5a      	subs	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800425c:	f002 f8a4 	bl	80063a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004268:	68f9      	ldr	r1, [r7, #12]
 800426a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	441a      	add	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428c:	3b01      	subs	r3, #1
 800428e:	68f9      	ldr	r1, [r7, #12]
 8004290:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	441a      	add	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	22ff      	movs	r2, #255	@ 0xff
 80042a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	22ff      	movs	r2, #255	@ 0xff
 80042a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d114      	bne.n	80042dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01a      	beq.n	80042f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3310      	adds	r3, #16
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 f942 	bl	8005548 <xTaskRemoveFromEventList>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d012      	beq.n	80042f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004300 <xQueueGenericReset+0xd0>)
 80042cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	e009      	b.n	80042f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3310      	adds	r3, #16
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fef1 	bl	80040c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3324      	adds	r3, #36	@ 0x24
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff feec 	bl	80040c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042f0:	f002 f88c 	bl	800640c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042f4:	2301      	movs	r3, #1
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	e000ed04 	.word	0xe000ed04

08004304 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08e      	sub	sp, #56	@ 0x38
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10b      	bne.n	8004330 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800432a:	bf00      	nop
 800432c:	bf00      	nop
 800432e:	e7fd      	b.n	800432c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10b      	bne.n	800434e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	e7fd      	b.n	800434a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <xQueueGenericCreateStatic+0x56>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <xQueueGenericCreateStatic+0x5a>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <xQueueGenericCreateStatic+0x5c>
 800435e:	2300      	movs	r3, #0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	623b      	str	r3, [r7, #32]
}
 8004376:	bf00      	nop
 8004378:	bf00      	nop
 800437a:	e7fd      	b.n	8004378 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <xQueueGenericCreateStatic+0x84>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <xQueueGenericCreateStatic+0x88>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <xQueueGenericCreateStatic+0x8a>
 800438c:	2300      	movs	r3, #0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10b      	bne.n	80043aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	61fb      	str	r3, [r7, #28]
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop
 80043a8:	e7fd      	b.n	80043a6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043aa:	2350      	movs	r3, #80	@ 0x50
 80043ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b50      	cmp	r3, #80	@ 0x50
 80043b2:	d00b      	beq.n	80043cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	61bb      	str	r3, [r7, #24]
}
 80043c6:	bf00      	nop
 80043c8:	bf00      	nop
 80043ca:	e7fd      	b.n	80043c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80043d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00d      	beq.n	80043f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80043e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f805 	bl	80043fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3730      	adds	r7, #48	@ 0x30
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
 800440a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d103      	bne.n	800441a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	e002      	b.n	8004420 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800442c:	2101      	movs	r1, #1
 800442e:	69b8      	ldr	r0, [r7, #24]
 8004430:	f7ff fefe 	bl	8004230 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08e      	sub	sp, #56	@ 0x38
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004452:	2300      	movs	r3, #0
 8004454:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800445a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <xQueueGenericSend+0x34>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <xQueueGenericSend+0x42>
 800447e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <xQueueGenericSend+0x46>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <xQueueGenericSend+0x48>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <xQueueGenericSend+0x64>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	e7fd      	b.n	80044a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d103      	bne.n	80044b6 <xQueueGenericSend+0x72>
 80044ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <xQueueGenericSend+0x76>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <xQueueGenericSend+0x78>
 80044ba:	2300      	movs	r3, #0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <xQueueGenericSend+0x94>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	623b      	str	r3, [r7, #32]
}
 80044d2:	bf00      	nop
 80044d4:	bf00      	nop
 80044d6:	e7fd      	b.n	80044d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044d8:	f001 f9fc 	bl	80058d4 <xTaskGetSchedulerState>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <xQueueGenericSend+0xa4>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <xQueueGenericSend+0xa8>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <xQueueGenericSend+0xaa>
 80044ec:	2300      	movs	r3, #0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10b      	bne.n	800450a <xQueueGenericSend+0xc6>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	61fb      	str	r3, [r7, #28]
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	e7fd      	b.n	8004506 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800450a:	f001 ff4d 	bl	80063a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800450e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004510:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <xQueueGenericSend+0xdc>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d129      	bne.n	8004574 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004526:	f000 fa0f 	bl	8004948 <prvCopyDataToQueue>
 800452a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	2b00      	cmp	r3, #0
 8004532:	d010      	beq.n	8004556 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004536:	3324      	adds	r3, #36	@ 0x24
 8004538:	4618      	mov	r0, r3
 800453a:	f001 f805 	bl	8005548 <xTaskRemoveFromEventList>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d013      	beq.n	800456c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004544:	4b3f      	ldr	r3, [pc, #252]	@ (8004644 <xQueueGenericSend+0x200>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	e00a      	b.n	800456c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800455c:	4b39      	ldr	r3, [pc, #228]	@ (8004644 <xQueueGenericSend+0x200>)
 800455e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800456c:	f001 ff4e 	bl	800640c <vPortExitCritical>
				return pdPASS;
 8004570:	2301      	movs	r3, #1
 8004572:	e063      	b.n	800463c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800457a:	f001 ff47 	bl	800640c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800457e:	2300      	movs	r3, #0
 8004580:	e05c      	b.n	800463c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004584:	2b00      	cmp	r3, #0
 8004586:	d106      	bne.n	8004596 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004588:	f107 0314 	add.w	r3, r7, #20
 800458c:	4618      	mov	r0, r3
 800458e:	f001 f83f 	bl	8005610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004592:	2301      	movs	r3, #1
 8004594:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004596:	f001 ff39 	bl	800640c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800459a:	f000 fda7 	bl	80050ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800459e:	f001 ff03 	bl	80063a8 <vPortEnterCritical>
 80045a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045a8:	b25b      	sxtb	r3, r3
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d103      	bne.n	80045b8 <xQueueGenericSend+0x174>
 80045b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045be:	b25b      	sxtb	r3, r3
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d103      	bne.n	80045ce <xQueueGenericSend+0x18a>
 80045c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045ce:	f001 ff1d 	bl	800640c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045d2:	1d3a      	adds	r2, r7, #4
 80045d4:	f107 0314 	add.w	r3, r7, #20
 80045d8:	4611      	mov	r1, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 f82e 	bl	800563c <xTaskCheckForTimeOut>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d124      	bne.n	8004630 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045e8:	f000 faa6 	bl	8004b38 <prvIsQueueFull>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d018      	beq.n	8004624 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f4:	3310      	adds	r3, #16
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	4611      	mov	r1, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 ff52 	bl	80054a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004602:	f000 fa31 	bl	8004a68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004606:	f000 fd7f 	bl	8005108 <xTaskResumeAll>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	f47f af7c 	bne.w	800450a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004612:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <xQueueGenericSend+0x200>)
 8004614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	e772      	b.n	800450a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004626:	f000 fa1f 	bl	8004a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800462a:	f000 fd6d 	bl	8005108 <xTaskResumeAll>
 800462e:	e76c      	b.n	800450a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004630:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004632:	f000 fa19 	bl	8004a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004636:	f000 fd67 	bl	8005108 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800463a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800463c:	4618      	mov	r0, r3
 800463e:	3738      	adds	r7, #56	@ 0x38
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	e000ed04 	.word	0xe000ed04

08004648 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b090      	sub	sp, #64	@ 0x40
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800465a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	e7fd      	b.n	8004674 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <xQueueGenericSendFromISR+0x3e>
 800467e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <xQueueGenericSendFromISR+0x42>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <xQueueGenericSendFromISR+0x44>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10b      	bne.n	80046a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
 80046a6:	e7fd      	b.n	80046a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d103      	bne.n	80046b6 <xQueueGenericSendFromISR+0x6e>
 80046ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <xQueueGenericSendFromISR+0x72>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <xQueueGenericSendFromISR+0x74>
 80046ba:	2300      	movs	r3, #0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10b      	bne.n	80046d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	623b      	str	r3, [r7, #32]
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	e7fd      	b.n	80046d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046d8:	f001 ff46 	bl	8006568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80046dc:	f3ef 8211 	mrs	r2, BASEPRI
 80046e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	61fa      	str	r2, [r7, #28]
 80046f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80046f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <xQueueGenericSendFromISR+0xc2>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d12f      	bne.n	800476a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800470a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004710:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004718:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004720:	f000 f912 	bl	8004948 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004724:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472c:	d112      	bne.n	8004754 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800472e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d016      	beq.n	8004764 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004738:	3324      	adds	r3, #36	@ 0x24
 800473a:	4618      	mov	r0, r3
 800473c:	f000 ff04 	bl	8005548 <xTaskRemoveFromEventList>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00e      	beq.n	8004764 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	e007      	b.n	8004764 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004754:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004758:	3301      	adds	r3, #1
 800475a:	b2db      	uxtb	r3, r3
 800475c:	b25a      	sxtb	r2, r3
 800475e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004764:	2301      	movs	r3, #1
 8004766:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004768:	e001      	b.n	800476e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800476a:	2300      	movs	r3, #0
 800476c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800476e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004770:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004778:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800477a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800477c:	4618      	mov	r0, r3
 800477e:	3740      	adds	r7, #64	@ 0x40
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08c      	sub	sp, #48	@ 0x30
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004790:	2300      	movs	r3, #0
 8004792:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <xQueueReceive+0x32>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	623b      	str	r3, [r7, #32]
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	e7fd      	b.n	80047b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d103      	bne.n	80047c4 <xQueueReceive+0x40>
 80047bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <xQueueReceive+0x44>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <xQueueReceive+0x46>
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10b      	bne.n	80047e6 <xQueueReceive+0x62>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	61fb      	str	r3, [r7, #28]
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	e7fd      	b.n	80047e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047e6:	f001 f875 	bl	80058d4 <xTaskGetSchedulerState>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <xQueueReceive+0x72>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <xQueueReceive+0x76>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <xQueueReceive+0x78>
 80047fa:	2300      	movs	r3, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <xQueueReceive+0x94>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	61bb      	str	r3, [r7, #24]
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	e7fd      	b.n	8004814 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004818:	f001 fdc6 	bl	80063a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01f      	beq.n	8004868 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800482c:	f000 f8f6 	bl	8004a1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004832:	1e5a      	subs	r2, r3, #1
 8004834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004836:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00f      	beq.n	8004860 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004842:	3310      	adds	r3, #16
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fe7f 	bl	8005548 <xTaskRemoveFromEventList>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d007      	beq.n	8004860 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004850:	4b3c      	ldr	r3, [pc, #240]	@ (8004944 <xQueueReceive+0x1c0>)
 8004852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004860:	f001 fdd4 	bl	800640c <vPortExitCritical>
				return pdPASS;
 8004864:	2301      	movs	r3, #1
 8004866:	e069      	b.n	800493c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d103      	bne.n	8004876 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800486e:	f001 fdcd 	bl	800640c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004872:	2300      	movs	r3, #0
 8004874:	e062      	b.n	800493c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800487c:	f107 0310 	add.w	r3, r7, #16
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fec5 	bl	8005610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004886:	2301      	movs	r3, #1
 8004888:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800488a:	f001 fdbf 	bl	800640c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800488e:	f000 fc2d 	bl	80050ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004892:	f001 fd89 	bl	80063a8 <vPortEnterCritical>
 8004896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800489c:	b25b      	sxtb	r3, r3
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d103      	bne.n	80048ac <xQueueReceive+0x128>
 80048a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048b2:	b25b      	sxtb	r3, r3
 80048b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b8:	d103      	bne.n	80048c2 <xQueueReceive+0x13e>
 80048ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048c2:	f001 fda3 	bl	800640c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048c6:	1d3a      	adds	r2, r7, #4
 80048c8:	f107 0310 	add.w	r3, r7, #16
 80048cc:	4611      	mov	r1, r2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 feb4 	bl	800563c <xTaskCheckForTimeOut>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d123      	bne.n	8004922 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048dc:	f000 f916 	bl	8004b0c <prvIsQueueEmpty>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d017      	beq.n	8004916 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e8:	3324      	adds	r3, #36	@ 0x24
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4611      	mov	r1, r2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fdd8 	bl	80054a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048f6:	f000 f8b7 	bl	8004a68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048fa:	f000 fc05 	bl	8005108 <xTaskResumeAll>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d189      	bne.n	8004818 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004904:	4b0f      	ldr	r3, [pc, #60]	@ (8004944 <xQueueReceive+0x1c0>)
 8004906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	e780      	b.n	8004818 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004918:	f000 f8a6 	bl	8004a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800491c:	f000 fbf4 	bl	8005108 <xTaskResumeAll>
 8004920:	e77a      	b.n	8004818 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004924:	f000 f8a0 	bl	8004a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004928:	f000 fbee 	bl	8005108 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800492c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800492e:	f000 f8ed 	bl	8004b0c <prvIsQueueEmpty>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	f43f af6f 	beq.w	8004818 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800493a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800493c:	4618      	mov	r0, r3
 800493e:	3730      	adds	r7, #48	@ 0x30
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	e000ed04 	.word	0xe000ed04

08004948 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10d      	bne.n	8004982 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d14d      	bne.n	8004a0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 ffcc 	bl	8005910 <xTaskPriorityDisinherit>
 8004978:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	e043      	b.n	8004a0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d119      	bne.n	80049bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6858      	ldr	r0, [r3, #4]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004990:	461a      	mov	r2, r3
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	f002 f89c 	bl	8006ad0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a0:	441a      	add	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d32b      	bcc.n	8004a0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	e026      	b.n	8004a0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68d8      	ldr	r0, [r3, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	461a      	mov	r2, r3
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	f002 f882 	bl	8006ad0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	425b      	negs	r3, r3
 80049d6:	441a      	add	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d207      	bcs.n	80049f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f0:	425b      	negs	r3, r3
 80049f2:	441a      	add	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d105      	bne.n	8004a0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004a12:	697b      	ldr	r3, [r7, #20]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d018      	beq.n	8004a60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	441a      	add	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d303      	bcc.n	8004a50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68d9      	ldr	r1, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6838      	ldr	r0, [r7, #0]
 8004a5c:	f002 f838 	bl	8006ad0 <memcpy>
	}
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a70:	f001 fc9a 	bl	80063a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a7c:	e011      	b.n	8004aa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d012      	beq.n	8004aac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3324      	adds	r3, #36	@ 0x24
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fd5c 	bl	8005548 <xTaskRemoveFromEventList>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a96:	f000 fe35 	bl	8005704 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	dce9      	bgt.n	8004a7e <prvUnlockQueue+0x16>
 8004aaa:	e000      	b.n	8004aae <prvUnlockQueue+0x46>
					break;
 8004aac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	22ff      	movs	r2, #255	@ 0xff
 8004ab2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004ab6:	f001 fca9 	bl	800640c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004aba:	f001 fc75 	bl	80063a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ac4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ac6:	e011      	b.n	8004aec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d012      	beq.n	8004af6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3310      	adds	r3, #16
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fd37 	bl	8005548 <xTaskRemoveFromEventList>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ae0:	f000 fe10 	bl	8005704 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ae4:	7bbb      	ldrb	r3, [r7, #14]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	dce9      	bgt.n	8004ac8 <prvUnlockQueue+0x60>
 8004af4:	e000      	b.n	8004af8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004af6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	22ff      	movs	r2, #255	@ 0xff
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004b00:	f001 fc84 	bl	800640c <vPortExitCritical>
}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b14:	f001 fc48 	bl	80063a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b20:	2301      	movs	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e001      	b.n	8004b2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b2a:	f001 fc6f 	bl	800640c <vPortExitCritical>

	return xReturn;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b40:	f001 fc32 	bl	80063a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d102      	bne.n	8004b56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b50:	2301      	movs	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e001      	b.n	8004b5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b5a:	f001 fc57 	bl	800640c <vPortExitCritical>

	return xReturn;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e014      	b.n	8004ba2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b78:	4a0f      	ldr	r2, [pc, #60]	@ (8004bb8 <vQueueAddToRegistry+0x50>)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10b      	bne.n	8004b9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b84:	490c      	ldr	r1, [pc, #48]	@ (8004bb8 <vQueueAddToRegistry+0x50>)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb8 <vQueueAddToRegistry+0x50>)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4413      	add	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b9a:	e006      	b.n	8004baa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b07      	cmp	r3, #7
 8004ba6:	d9e7      	bls.n	8004b78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000904 	.word	0x20000904

08004bbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004bcc:	f001 fbec 	bl	80063a8 <vPortEnterCritical>
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bd6:	b25b      	sxtb	r3, r3
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d103      	bne.n	8004be6 <vQueueWaitForMessageRestricted+0x2a>
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bec:	b25b      	sxtb	r3, r3
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d103      	bne.n	8004bfc <vQueueWaitForMessageRestricted+0x40>
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bfc:	f001 fc06 	bl	800640c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d106      	bne.n	8004c16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3324      	adds	r3, #36	@ 0x24
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fc6d 	bl	80054f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c16:	6978      	ldr	r0, [r7, #20]
 8004c18:	f7ff ff26 	bl	8004a68 <prvUnlockQueue>
	}
 8004c1c:	bf00      	nop
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08e      	sub	sp, #56	@ 0x38
 8004c28:	af04      	add	r7, sp, #16
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10b      	bne.n	8004c50 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	623b      	str	r3, [r7, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	bf00      	nop
 8004c4e:	e7fd      	b.n	8004c4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10b      	bne.n	8004c6e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	61fb      	str	r3, [r7, #28]
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	e7fd      	b.n	8004c6a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c6e:	23a8      	movs	r3, #168	@ 0xa8
 8004c70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2ba8      	cmp	r3, #168	@ 0xa8
 8004c76:	d00b      	beq.n	8004c90 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	61bb      	str	r3, [r7, #24]
}
 8004c8a:	bf00      	nop
 8004c8c:	bf00      	nop
 8004c8e:	e7fd      	b.n	8004c8c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01e      	beq.n	8004cd6 <xTaskCreateStatic+0xb2>
 8004c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01b      	beq.n	8004cd6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ca6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9303      	str	r3, [sp, #12]
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb6:	9302      	str	r3, [sp, #8]
 8004cb8:	f107 0314 	add.w	r3, r7, #20
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f851 	bl	8004d70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cd0:	f000 f8f6 	bl	8004ec0 <prvAddNewTaskToReadyList>
 8004cd4:	e001      	b.n	8004cda <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cda:	697b      	ldr	r3, [r7, #20]
	}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3728      	adds	r7, #40	@ 0x28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08c      	sub	sp, #48	@ 0x30
 8004ce8:	af04      	add	r7, sp, #16
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cf4:	88fb      	ldrh	r3, [r7, #6]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f001 fc77 	bl	80065ec <pvPortMalloc>
 8004cfe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00e      	beq.n	8004d24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d06:	20a8      	movs	r0, #168	@ 0xa8
 8004d08:	f001 fc70 	bl	80065ec <pvPortMalloc>
 8004d0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d1a:	e005      	b.n	8004d28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d1c:	6978      	ldr	r0, [r7, #20]
 8004d1e:	f001 fd33 	bl	8006788 <vPortFree>
 8004d22:	e001      	b.n	8004d28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d017      	beq.n	8004d5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	9303      	str	r3, [sp, #12]
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	9302      	str	r3, [sp, #8]
 8004d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f80f 	bl	8004d70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d52:	69f8      	ldr	r0, [r7, #28]
 8004d54:	f000 f8b4 	bl	8004ec0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	e002      	b.n	8004d64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d64:	69bb      	ldr	r3, [r7, #24]
	}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	461a      	mov	r2, r3
 8004d88:	21a5      	movs	r1, #165	@ 0xa5
 8004d8a:	f001 fe1d 	bl	80069c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f023 0307 	bic.w	r3, r3, #7
 8004da6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00b      	beq.n	8004dca <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	617b      	str	r3, [r7, #20]
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	e7fd      	b.n	8004dc6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01f      	beq.n	8004e10 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	e012      	b.n	8004dfc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	7819      	ldrb	r1, [r3, #0]
 8004dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	4413      	add	r3, r2
 8004de4:	3334      	adds	r3, #52	@ 0x34
 8004de6:	460a      	mov	r2, r1
 8004de8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	4413      	add	r3, r2
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d006      	beq.n	8004e04 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	2b0f      	cmp	r3, #15
 8004e00:	d9e9      	bls.n	8004dd6 <prvInitialiseNewTask+0x66>
 8004e02:	e000      	b.n	8004e06 <prvInitialiseNewTask+0x96>
			{
				break;
 8004e04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e0e:	e003      	b.n	8004e18 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1a:	2b37      	cmp	r3, #55	@ 0x37
 8004e1c:	d901      	bls.n	8004e22 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e1e:	2337      	movs	r3, #55	@ 0x37
 8004e20:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e26:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e2c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	2200      	movs	r2, #0
 8004e32:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e36:	3304      	adds	r3, #4
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff f965 	bl	8004108 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	3318      	adds	r3, #24
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff f960 	bl	8004108 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e5c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	2200      	movs	r2, #0
 8004e62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	3354      	adds	r3, #84	@ 0x54
 8004e72:	224c      	movs	r2, #76	@ 0x4c
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fda6 	bl	80069c8 <memset>
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8004eb4 <prvInitialiseNewTask+0x144>)
 8004e80:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e84:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb8 <prvInitialiseNewTask+0x148>)
 8004e86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004ebc <prvInitialiseNewTask+0x14c>)
 8004e8c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	68f9      	ldr	r1, [r7, #12]
 8004e92:	69b8      	ldr	r0, [r7, #24]
 8004e94:	f001 f95a 	bl	800614c <pxPortInitialiseStack>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ea8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eaa:	bf00      	nop
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20004b98 	.word	0x20004b98
 8004eb8:	20004c00 	.word	0x20004c00
 8004ebc:	20004c68 	.word	0x20004c68

08004ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ec8:	f001 fa6e 	bl	80063a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8004f84 <prvAddNewTaskToReadyList+0xc4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8004f84 <prvAddNewTaskToReadyList+0xc4>)
 8004ed4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8004f88 <prvAddNewTaskToReadyList+0xc8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ede:	4a2a      	ldr	r2, [pc, #168]	@ (8004f88 <prvAddNewTaskToReadyList+0xc8>)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ee4:	4b27      	ldr	r3, [pc, #156]	@ (8004f84 <prvAddNewTaskToReadyList+0xc4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d110      	bne.n	8004f0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004eec:	f000 fc2e 	bl	800574c <prvInitialiseTaskLists>
 8004ef0:	e00d      	b.n	8004f0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ef2:	4b26      	ldr	r3, [pc, #152]	@ (8004f8c <prvAddNewTaskToReadyList+0xcc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004efa:	4b23      	ldr	r3, [pc, #140]	@ (8004f88 <prvAddNewTaskToReadyList+0xc8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d802      	bhi.n	8004f0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f08:	4a1f      	ldr	r2, [pc, #124]	@ (8004f88 <prvAddNewTaskToReadyList+0xc8>)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f0e:	4b20      	ldr	r3, [pc, #128]	@ (8004f90 <prvAddNewTaskToReadyList+0xd0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	4a1e      	ldr	r2, [pc, #120]	@ (8004f90 <prvAddNewTaskToReadyList+0xd0>)
 8004f16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f18:	4b1d      	ldr	r3, [pc, #116]	@ (8004f90 <prvAddNewTaskToReadyList+0xd0>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f24:	4b1b      	ldr	r3, [pc, #108]	@ (8004f94 <prvAddNewTaskToReadyList+0xd4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d903      	bls.n	8004f34 <prvAddNewTaskToReadyList+0x74>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f30:	4a18      	ldr	r2, [pc, #96]	@ (8004f94 <prvAddNewTaskToReadyList+0xd4>)
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4a15      	ldr	r2, [pc, #84]	@ (8004f98 <prvAddNewTaskToReadyList+0xd8>)
 8004f42:	441a      	add	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f7ff f8e9 	bl	8004122 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f50:	f001 fa5c 	bl	800640c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f54:	4b0d      	ldr	r3, [pc, #52]	@ (8004f8c <prvAddNewTaskToReadyList+0xcc>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00e      	beq.n	8004f7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f88 <prvAddNewTaskToReadyList+0xc8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d207      	bcs.n	8004f7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <prvAddNewTaskToReadyList+0xdc>)
 8004f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000e18 	.word	0x20000e18
 8004f88:	20000944 	.word	0x20000944
 8004f8c:	20000e24 	.word	0x20000e24
 8004f90:	20000e34 	.word	0x20000e34
 8004f94:	20000e20 	.word	0x20000e20
 8004f98:	20000948 	.word	0x20000948
 8004f9c:	e000ed04 	.word	0xe000ed04

08004fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d018      	beq.n	8004fe4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fb2:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <vTaskDelay+0x64>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <vTaskDelay+0x32>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	60bb      	str	r3, [r7, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	bf00      	nop
 8004fd0:	e7fd      	b.n	8004fce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004fd2:	f000 f88b 	bl	80050ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fd09 	bl	80059f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fde:	f000 f893 	bl	8005108 <xTaskResumeAll>
 8004fe2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d107      	bne.n	8004ffa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004fea:	4b07      	ldr	r3, [pc, #28]	@ (8005008 <vTaskDelay+0x68>)
 8004fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000e40 	.word	0x20000e40
 8005008:	e000ed04 	.word	0xe000ed04

0800500c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	@ 0x28
 8005010:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800501a:	463a      	mov	r2, r7
 800501c:	1d39      	adds	r1, r7, #4
 800501e:	f107 0308 	add.w	r3, r7, #8
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff f81c 	bl	8004060 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005028:	6839      	ldr	r1, [r7, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	9202      	str	r2, [sp, #8]
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	2300      	movs	r3, #0
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	2300      	movs	r3, #0
 8005038:	460a      	mov	r2, r1
 800503a:	4924      	ldr	r1, [pc, #144]	@ (80050cc <vTaskStartScheduler+0xc0>)
 800503c:	4824      	ldr	r0, [pc, #144]	@ (80050d0 <vTaskStartScheduler+0xc4>)
 800503e:	f7ff fdf1 	bl	8004c24 <xTaskCreateStatic>
 8005042:	4603      	mov	r3, r0
 8005044:	4a23      	ldr	r2, [pc, #140]	@ (80050d4 <vTaskStartScheduler+0xc8>)
 8005046:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005048:	4b22      	ldr	r3, [pc, #136]	@ (80050d4 <vTaskStartScheduler+0xc8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005050:	2301      	movs	r3, #1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e001      	b.n	800505a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d102      	bne.n	8005066 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005060:	f000 fd1a 	bl	8005a98 <xTimerCreateTimerTask>
 8005064:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d11b      	bne.n	80050a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	613b      	str	r3, [r7, #16]
}
 800507e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005080:	4b15      	ldr	r3, [pc, #84]	@ (80050d8 <vTaskStartScheduler+0xcc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3354      	adds	r3, #84	@ 0x54
 8005086:	4a15      	ldr	r2, [pc, #84]	@ (80050dc <vTaskStartScheduler+0xd0>)
 8005088:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800508a:	4b15      	ldr	r3, [pc, #84]	@ (80050e0 <vTaskStartScheduler+0xd4>)
 800508c:	f04f 32ff 	mov.w	r2, #4294967295
 8005090:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005092:	4b14      	ldr	r3, [pc, #80]	@ (80050e4 <vTaskStartScheduler+0xd8>)
 8005094:	2201      	movs	r2, #1
 8005096:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005098:	4b13      	ldr	r3, [pc, #76]	@ (80050e8 <vTaskStartScheduler+0xdc>)
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800509e:	f001 f8df 	bl	8006260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050a2:	e00f      	b.n	80050c4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050aa:	d10b      	bne.n	80050c4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	60fb      	str	r3, [r7, #12]
}
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <vTaskStartScheduler+0xb4>
}
 80050c4:	bf00      	nop
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	08006bc4 	.word	0x08006bc4
 80050d0:	0800571d 	.word	0x0800571d
 80050d4:	20000e3c 	.word	0x20000e3c
 80050d8:	20000944 	.word	0x20000944
 80050dc:	20000010 	.word	0x20000010
 80050e0:	20000e38 	.word	0x20000e38
 80050e4:	20000e24 	.word	0x20000e24
 80050e8:	20000e1c 	.word	0x20000e1c

080050ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80050f0:	4b04      	ldr	r3, [pc, #16]	@ (8005104 <vTaskSuspendAll+0x18>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3301      	adds	r3, #1
 80050f6:	4a03      	ldr	r2, [pc, #12]	@ (8005104 <vTaskSuspendAll+0x18>)
 80050f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80050fa:	bf00      	nop
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	20000e40 	.word	0x20000e40

08005108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005116:	4b42      	ldr	r3, [pc, #264]	@ (8005220 <xTaskResumeAll+0x118>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10b      	bne.n	8005136 <xTaskResumeAll+0x2e>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	603b      	str	r3, [r7, #0]
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	e7fd      	b.n	8005132 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005136:	f001 f937 	bl	80063a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800513a:	4b39      	ldr	r3, [pc, #228]	@ (8005220 <xTaskResumeAll+0x118>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3b01      	subs	r3, #1
 8005140:	4a37      	ldr	r2, [pc, #220]	@ (8005220 <xTaskResumeAll+0x118>)
 8005142:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005144:	4b36      	ldr	r3, [pc, #216]	@ (8005220 <xTaskResumeAll+0x118>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d162      	bne.n	8005212 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800514c:	4b35      	ldr	r3, [pc, #212]	@ (8005224 <xTaskResumeAll+0x11c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d05e      	beq.n	8005212 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005154:	e02f      	b.n	80051b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005156:	4b34      	ldr	r3, [pc, #208]	@ (8005228 <xTaskResumeAll+0x120>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3318      	adds	r3, #24
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff f83a 	bl	80041dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3304      	adds	r3, #4
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff f835 	bl	80041dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005176:	4b2d      	ldr	r3, [pc, #180]	@ (800522c <xTaskResumeAll+0x124>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d903      	bls.n	8005186 <xTaskResumeAll+0x7e>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005182:	4a2a      	ldr	r2, [pc, #168]	@ (800522c <xTaskResumeAll+0x124>)
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4a27      	ldr	r2, [pc, #156]	@ (8005230 <xTaskResumeAll+0x128>)
 8005194:	441a      	add	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3304      	adds	r3, #4
 800519a:	4619      	mov	r1, r3
 800519c:	4610      	mov	r0, r2
 800519e:	f7fe ffc0 	bl	8004122 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a6:	4b23      	ldr	r3, [pc, #140]	@ (8005234 <xTaskResumeAll+0x12c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d302      	bcc.n	80051b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80051b0:	4b21      	ldr	r3, [pc, #132]	@ (8005238 <xTaskResumeAll+0x130>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005228 <xTaskResumeAll+0x120>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1cb      	bne.n	8005156 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051c4:	f000 fb66 	bl	8005894 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051c8:	4b1c      	ldr	r3, [pc, #112]	@ (800523c <xTaskResumeAll+0x134>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d010      	beq.n	80051f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051d4:	f000 f846 	bl	8005264 <xTaskIncrementTick>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80051de:	4b16      	ldr	r3, [pc, #88]	@ (8005238 <xTaskResumeAll+0x130>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f1      	bne.n	80051d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80051f0:	4b12      	ldr	r3, [pc, #72]	@ (800523c <xTaskResumeAll+0x134>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051f6:	4b10      	ldr	r3, [pc, #64]	@ (8005238 <xTaskResumeAll+0x130>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051fe:	2301      	movs	r3, #1
 8005200:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005202:	4b0f      	ldr	r3, [pc, #60]	@ (8005240 <xTaskResumeAll+0x138>)
 8005204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005212:	f001 f8fb 	bl	800640c <vPortExitCritical>

	return xAlreadyYielded;
 8005216:	68bb      	ldr	r3, [r7, #8]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	20000e40 	.word	0x20000e40
 8005224:	20000e18 	.word	0x20000e18
 8005228:	20000dd8 	.word	0x20000dd8
 800522c:	20000e20 	.word	0x20000e20
 8005230:	20000948 	.word	0x20000948
 8005234:	20000944 	.word	0x20000944
 8005238:	20000e2c 	.word	0x20000e2c
 800523c:	20000e28 	.word	0x20000e28
 8005240:	e000ed04 	.word	0xe000ed04

08005244 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800524a:	4b05      	ldr	r3, [pc, #20]	@ (8005260 <xTaskGetTickCount+0x1c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005250:	687b      	ldr	r3, [r7, #4]
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	20000e1c 	.word	0x20000e1c

08005264 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800526e:	4b4f      	ldr	r3, [pc, #316]	@ (80053ac <xTaskIncrementTick+0x148>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	f040 8090 	bne.w	8005398 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005278:	4b4d      	ldr	r3, [pc, #308]	@ (80053b0 <xTaskIncrementTick+0x14c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3301      	adds	r3, #1
 800527e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005280:	4a4b      	ldr	r2, [pc, #300]	@ (80053b0 <xTaskIncrementTick+0x14c>)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d121      	bne.n	80052d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800528c:	4b49      	ldr	r3, [pc, #292]	@ (80053b4 <xTaskIncrementTick+0x150>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00b      	beq.n	80052ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	603b      	str	r3, [r7, #0]
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	e7fd      	b.n	80052aa <xTaskIncrementTick+0x46>
 80052ae:	4b41      	ldr	r3, [pc, #260]	@ (80053b4 <xTaskIncrementTick+0x150>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	4b40      	ldr	r3, [pc, #256]	@ (80053b8 <xTaskIncrementTick+0x154>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a3e      	ldr	r2, [pc, #248]	@ (80053b4 <xTaskIncrementTick+0x150>)
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4a3e      	ldr	r2, [pc, #248]	@ (80053b8 <xTaskIncrementTick+0x154>)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	4b3e      	ldr	r3, [pc, #248]	@ (80053bc <xTaskIncrementTick+0x158>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3301      	adds	r3, #1
 80052c8:	4a3c      	ldr	r2, [pc, #240]	@ (80053bc <xTaskIncrementTick+0x158>)
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	f000 fae2 	bl	8005894 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052d0:	4b3b      	ldr	r3, [pc, #236]	@ (80053c0 <xTaskIncrementTick+0x15c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d349      	bcc.n	800536e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052da:	4b36      	ldr	r3, [pc, #216]	@ (80053b4 <xTaskIncrementTick+0x150>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e4:	4b36      	ldr	r3, [pc, #216]	@ (80053c0 <xTaskIncrementTick+0x15c>)
 80052e6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ea:	601a      	str	r2, [r3, #0]
					break;
 80052ec:	e03f      	b.n	800536e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ee:	4b31      	ldr	r3, [pc, #196]	@ (80053b4 <xTaskIncrementTick+0x150>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	429a      	cmp	r2, r3
 8005304:	d203      	bcs.n	800530e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005306:	4a2e      	ldr	r2, [pc, #184]	@ (80053c0 <xTaskIncrementTick+0x15c>)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800530c:	e02f      	b.n	800536e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	3304      	adds	r3, #4
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe ff62 	bl	80041dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	2b00      	cmp	r3, #0
 800531e:	d004      	beq.n	800532a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	3318      	adds	r3, #24
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe ff59 	bl	80041dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800532e:	4b25      	ldr	r3, [pc, #148]	@ (80053c4 <xTaskIncrementTick+0x160>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d903      	bls.n	800533e <xTaskIncrementTick+0xda>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533a:	4a22      	ldr	r2, [pc, #136]	@ (80053c4 <xTaskIncrementTick+0x160>)
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4a1f      	ldr	r2, [pc, #124]	@ (80053c8 <xTaskIncrementTick+0x164>)
 800534c:	441a      	add	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	3304      	adds	r3, #4
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f7fe fee4 	bl	8004122 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800535e:	4b1b      	ldr	r3, [pc, #108]	@ (80053cc <xTaskIncrementTick+0x168>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005364:	429a      	cmp	r2, r3
 8005366:	d3b8      	bcc.n	80052da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005368:	2301      	movs	r3, #1
 800536a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800536c:	e7b5      	b.n	80052da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800536e:	4b17      	ldr	r3, [pc, #92]	@ (80053cc <xTaskIncrementTick+0x168>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005374:	4914      	ldr	r1, [pc, #80]	@ (80053c8 <xTaskIncrementTick+0x164>)
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d901      	bls.n	800538a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005386:	2301      	movs	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800538a:	4b11      	ldr	r3, [pc, #68]	@ (80053d0 <xTaskIncrementTick+0x16c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005392:	2301      	movs	r3, #1
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	e004      	b.n	80053a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005398:	4b0e      	ldr	r3, [pc, #56]	@ (80053d4 <xTaskIncrementTick+0x170>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3301      	adds	r3, #1
 800539e:	4a0d      	ldr	r2, [pc, #52]	@ (80053d4 <xTaskIncrementTick+0x170>)
 80053a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80053a2:	697b      	ldr	r3, [r7, #20]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20000e40 	.word	0x20000e40
 80053b0:	20000e1c 	.word	0x20000e1c
 80053b4:	20000dd0 	.word	0x20000dd0
 80053b8:	20000dd4 	.word	0x20000dd4
 80053bc:	20000e30 	.word	0x20000e30
 80053c0:	20000e38 	.word	0x20000e38
 80053c4:	20000e20 	.word	0x20000e20
 80053c8:	20000948 	.word	0x20000948
 80053cc:	20000944 	.word	0x20000944
 80053d0:	20000e2c 	.word	0x20000e2c
 80053d4:	20000e28 	.word	0x20000e28

080053d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053de:	4b2b      	ldr	r3, [pc, #172]	@ (800548c <vTaskSwitchContext+0xb4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005490 <vTaskSwitchContext+0xb8>)
 80053e8:	2201      	movs	r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053ec:	e047      	b.n	800547e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80053ee:	4b28      	ldr	r3, [pc, #160]	@ (8005490 <vTaskSwitchContext+0xb8>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f4:	4b27      	ldr	r3, [pc, #156]	@ (8005494 <vTaskSwitchContext+0xbc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	e011      	b.n	8005420 <vTaskSwitchContext+0x48>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10b      	bne.n	800541a <vTaskSwitchContext+0x42>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	607b      	str	r3, [r7, #4]
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop
 8005418:	e7fd      	b.n	8005416 <vTaskSwitchContext+0x3e>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3b01      	subs	r3, #1
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	491d      	ldr	r1, [pc, #116]	@ (8005498 <vTaskSwitchContext+0xc0>)
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0e3      	beq.n	80053fc <vTaskSwitchContext+0x24>
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4a16      	ldr	r2, [pc, #88]	@ (8005498 <vTaskSwitchContext+0xc0>)
 8005440:	4413      	add	r3, r2
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	605a      	str	r2, [r3, #4]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	3308      	adds	r3, #8
 8005456:	429a      	cmp	r2, r3
 8005458:	d104      	bne.n	8005464 <vTaskSwitchContext+0x8c>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	4a0c      	ldr	r2, [pc, #48]	@ (800549c <vTaskSwitchContext+0xc4>)
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	4a09      	ldr	r2, [pc, #36]	@ (8005494 <vTaskSwitchContext+0xbc>)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005474:	4b09      	ldr	r3, [pc, #36]	@ (800549c <vTaskSwitchContext+0xc4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3354      	adds	r3, #84	@ 0x54
 800547a:	4a09      	ldr	r2, [pc, #36]	@ (80054a0 <vTaskSwitchContext+0xc8>)
 800547c:	6013      	str	r3, [r2, #0]
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20000e40 	.word	0x20000e40
 8005490:	20000e2c 	.word	0x20000e2c
 8005494:	20000e20 	.word	0x20000e20
 8005498:	20000948 	.word	0x20000948
 800549c:	20000944 	.word	0x20000944
 80054a0:	20000010 	.word	0x20000010

080054a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10b      	bne.n	80054cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	60fb      	str	r3, [r7, #12]
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	e7fd      	b.n	80054c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054cc:	4b07      	ldr	r3, [pc, #28]	@ (80054ec <vTaskPlaceOnEventList+0x48>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3318      	adds	r3, #24
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7fe fe48 	bl	800416a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054da:	2101      	movs	r1, #1
 80054dc:	6838      	ldr	r0, [r7, #0]
 80054de:	f000 fa87 	bl	80059f0 <prvAddCurrentTaskToDelayedList>
}
 80054e2:	bf00      	nop
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20000944 	.word	0x20000944

080054f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10b      	bne.n	800551a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	617b      	str	r3, [r7, #20]
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	e7fd      	b.n	8005516 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800551a:	4b0a      	ldr	r3, [pc, #40]	@ (8005544 <vTaskPlaceOnEventListRestricted+0x54>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3318      	adds	r3, #24
 8005520:	4619      	mov	r1, r3
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7fe fdfd 	bl	8004122 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800552e:	f04f 33ff 	mov.w	r3, #4294967295
 8005532:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	68b8      	ldr	r0, [r7, #8]
 8005538:	f000 fa5a 	bl	80059f0 <prvAddCurrentTaskToDelayedList>
	}
 800553c:	bf00      	nop
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20000944 	.word	0x20000944

08005548 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10b      	bne.n	8005576 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	60fb      	str	r3, [r7, #12]
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	e7fd      	b.n	8005572 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	3318      	adds	r3, #24
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe fe2e 	bl	80041dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005580:	4b1d      	ldr	r3, [pc, #116]	@ (80055f8 <xTaskRemoveFromEventList+0xb0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d11d      	bne.n	80055c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	3304      	adds	r3, #4
 800558c:	4618      	mov	r0, r3
 800558e:	f7fe fe25 	bl	80041dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005596:	4b19      	ldr	r3, [pc, #100]	@ (80055fc <xTaskRemoveFromEventList+0xb4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d903      	bls.n	80055a6 <xTaskRemoveFromEventList+0x5e>
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a2:	4a16      	ldr	r2, [pc, #88]	@ (80055fc <xTaskRemoveFromEventList+0xb4>)
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4a13      	ldr	r2, [pc, #76]	@ (8005600 <xTaskRemoveFromEventList+0xb8>)
 80055b4:	441a      	add	r2, r3
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4619      	mov	r1, r3
 80055bc:	4610      	mov	r0, r2
 80055be:	f7fe fdb0 	bl	8004122 <vListInsertEnd>
 80055c2:	e005      	b.n	80055d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	3318      	adds	r3, #24
 80055c8:	4619      	mov	r1, r3
 80055ca:	480e      	ldr	r0, [pc, #56]	@ (8005604 <xTaskRemoveFromEventList+0xbc>)
 80055cc:	f7fe fda9 	bl	8004122 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005608 <xTaskRemoveFromEventList+0xc0>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055da:	429a      	cmp	r2, r3
 80055dc:	d905      	bls.n	80055ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055de:	2301      	movs	r3, #1
 80055e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055e2:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <xTaskRemoveFromEventList+0xc4>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e001      	b.n	80055ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055ee:	697b      	ldr	r3, [r7, #20]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000e40 	.word	0x20000e40
 80055fc:	20000e20 	.word	0x20000e20
 8005600:	20000948 	.word	0x20000948
 8005604:	20000dd8 	.word	0x20000dd8
 8005608:	20000944 	.word	0x20000944
 800560c:	20000e2c 	.word	0x20000e2c

08005610 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005618:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <vTaskInternalSetTimeOutState+0x24>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005620:	4b05      	ldr	r3, [pc, #20]	@ (8005638 <vTaskInternalSetTimeOutState+0x28>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	605a      	str	r2, [r3, #4]
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	20000e30 	.word	0x20000e30
 8005638:	20000e1c 	.word	0x20000e1c

0800563c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	613b      	str	r3, [r7, #16]
}
 800565e:	bf00      	nop
 8005660:	bf00      	nop
 8005662:	e7fd      	b.n	8005660 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	60fb      	str	r3, [r7, #12]
}
 800567c:	bf00      	nop
 800567e:	bf00      	nop
 8005680:	e7fd      	b.n	800567e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005682:	f000 fe91 	bl	80063a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005686:	4b1d      	ldr	r3, [pc, #116]	@ (80056fc <xTaskCheckForTimeOut+0xc0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d102      	bne.n	80056a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	e023      	b.n	80056ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <xTaskCheckForTimeOut+0xc4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d007      	beq.n	80056c2 <xTaskCheckForTimeOut+0x86>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d302      	bcc.n	80056c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056bc:	2301      	movs	r3, #1
 80056be:	61fb      	str	r3, [r7, #28]
 80056c0:	e015      	b.n	80056ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d20b      	bcs.n	80056e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	1ad2      	subs	r2, r2, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff ff99 	bl	8005610 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
 80056e2:	e004      	b.n	80056ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056ea:	2301      	movs	r3, #1
 80056ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056ee:	f000 fe8d 	bl	800640c <vPortExitCritical>

	return xReturn;
 80056f2:	69fb      	ldr	r3, [r7, #28]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000e1c 	.word	0x20000e1c
 8005700:	20000e30 	.word	0x20000e30

08005704 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005708:	4b03      	ldr	r3, [pc, #12]	@ (8005718 <vTaskMissedYield+0x14>)
 800570a:	2201      	movs	r2, #1
 800570c:	601a      	str	r2, [r3, #0]
}
 800570e:	bf00      	nop
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	20000e2c 	.word	0x20000e2c

0800571c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005724:	f000 f852 	bl	80057cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005728:	4b06      	ldr	r3, [pc, #24]	@ (8005744 <prvIdleTask+0x28>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d9f9      	bls.n	8005724 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005730:	4b05      	ldr	r3, [pc, #20]	@ (8005748 <prvIdleTask+0x2c>)
 8005732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005740:	e7f0      	b.n	8005724 <prvIdleTask+0x8>
 8005742:	bf00      	nop
 8005744:	20000948 	.word	0x20000948
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	e00c      	b.n	8005772 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4a12      	ldr	r2, [pc, #72]	@ (80057ac <prvInitialiseTaskLists+0x60>)
 8005764:	4413      	add	r3, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe fcae 	bl	80040c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3301      	adds	r3, #1
 8005770:	607b      	str	r3, [r7, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b37      	cmp	r3, #55	@ 0x37
 8005776:	d9ef      	bls.n	8005758 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005778:	480d      	ldr	r0, [pc, #52]	@ (80057b0 <prvInitialiseTaskLists+0x64>)
 800577a:	f7fe fca5 	bl	80040c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800577e:	480d      	ldr	r0, [pc, #52]	@ (80057b4 <prvInitialiseTaskLists+0x68>)
 8005780:	f7fe fca2 	bl	80040c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005784:	480c      	ldr	r0, [pc, #48]	@ (80057b8 <prvInitialiseTaskLists+0x6c>)
 8005786:	f7fe fc9f 	bl	80040c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800578a:	480c      	ldr	r0, [pc, #48]	@ (80057bc <prvInitialiseTaskLists+0x70>)
 800578c:	f7fe fc9c 	bl	80040c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005790:	480b      	ldr	r0, [pc, #44]	@ (80057c0 <prvInitialiseTaskLists+0x74>)
 8005792:	f7fe fc99 	bl	80040c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005796:	4b0b      	ldr	r3, [pc, #44]	@ (80057c4 <prvInitialiseTaskLists+0x78>)
 8005798:	4a05      	ldr	r2, [pc, #20]	@ (80057b0 <prvInitialiseTaskLists+0x64>)
 800579a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800579c:	4b0a      	ldr	r3, [pc, #40]	@ (80057c8 <prvInitialiseTaskLists+0x7c>)
 800579e:	4a05      	ldr	r2, [pc, #20]	@ (80057b4 <prvInitialiseTaskLists+0x68>)
 80057a0:	601a      	str	r2, [r3, #0]
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000948 	.word	0x20000948
 80057b0:	20000da8 	.word	0x20000da8
 80057b4:	20000dbc 	.word	0x20000dbc
 80057b8:	20000dd8 	.word	0x20000dd8
 80057bc:	20000dec 	.word	0x20000dec
 80057c0:	20000e04 	.word	0x20000e04
 80057c4:	20000dd0 	.word	0x20000dd0
 80057c8:	20000dd4 	.word	0x20000dd4

080057cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057d2:	e019      	b.n	8005808 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057d4:	f000 fde8 	bl	80063a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d8:	4b10      	ldr	r3, [pc, #64]	@ (800581c <prvCheckTasksWaitingTermination+0x50>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe fcf9 	bl	80041dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005820 <prvCheckTasksWaitingTermination+0x54>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	4a0b      	ldr	r2, [pc, #44]	@ (8005820 <prvCheckTasksWaitingTermination+0x54>)
 80057f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005824 <prvCheckTasksWaitingTermination+0x58>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005824 <prvCheckTasksWaitingTermination+0x58>)
 80057fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057fe:	f000 fe05 	bl	800640c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f810 	bl	8005828 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005808:	4b06      	ldr	r3, [pc, #24]	@ (8005824 <prvCheckTasksWaitingTermination+0x58>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e1      	bne.n	80057d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000dec 	.word	0x20000dec
 8005820:	20000e18 	.word	0x20000e18
 8005824:	20000e00 	.word	0x20000e00

08005828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3354      	adds	r3, #84	@ 0x54
 8005834:	4618      	mov	r0, r3
 8005836:	f001 f8cf 	bl	80069d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005840:	2b00      	cmp	r3, #0
 8005842:	d108      	bne.n	8005856 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005848:	4618      	mov	r0, r3
 800584a:	f000 ff9d 	bl	8006788 <vPortFree>
				vPortFree( pxTCB );
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 ff9a 	bl	8006788 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005854:	e019      	b.n	800588a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800585c:	2b01      	cmp	r3, #1
 800585e:	d103      	bne.n	8005868 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 ff91 	bl	8006788 <vPortFree>
	}
 8005866:	e010      	b.n	800588a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800586e:	2b02      	cmp	r3, #2
 8005870:	d00b      	beq.n	800588a <prvDeleteTCB+0x62>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	60fb      	str	r3, [r7, #12]
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	e7fd      	b.n	8005886 <prvDeleteTCB+0x5e>
	}
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800589a:	4b0c      	ldr	r3, [pc, #48]	@ (80058cc <prvResetNextTaskUnblockTime+0x38>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d104      	bne.n	80058ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058a4:	4b0a      	ldr	r3, [pc, #40]	@ (80058d0 <prvResetNextTaskUnblockTime+0x3c>)
 80058a6:	f04f 32ff 	mov.w	r2, #4294967295
 80058aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058ac:	e008      	b.n	80058c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ae:	4b07      	ldr	r3, [pc, #28]	@ (80058cc <prvResetNextTaskUnblockTime+0x38>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4a04      	ldr	r2, [pc, #16]	@ (80058d0 <prvResetNextTaskUnblockTime+0x3c>)
 80058be:	6013      	str	r3, [r2, #0]
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	20000dd0 	.word	0x20000dd0
 80058d0:	20000e38 	.word	0x20000e38

080058d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058da:	4b0b      	ldr	r3, [pc, #44]	@ (8005908 <xTaskGetSchedulerState+0x34>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d102      	bne.n	80058e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058e2:	2301      	movs	r3, #1
 80058e4:	607b      	str	r3, [r7, #4]
 80058e6:	e008      	b.n	80058fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058e8:	4b08      	ldr	r3, [pc, #32]	@ (800590c <xTaskGetSchedulerState+0x38>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058f0:	2302      	movs	r3, #2
 80058f2:	607b      	str	r3, [r7, #4]
 80058f4:	e001      	b.n	80058fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058f6:	2300      	movs	r3, #0
 80058f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058fa:	687b      	ldr	r3, [r7, #4]
	}
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	20000e24 	.word	0x20000e24
 800590c:	20000e40 	.word	0x20000e40

08005910 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800591c:	2300      	movs	r3, #0
 800591e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d058      	beq.n	80059d8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005926:	4b2f      	ldr	r3, [pc, #188]	@ (80059e4 <xTaskPriorityDisinherit+0xd4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	429a      	cmp	r2, r3
 800592e:	d00b      	beq.n	8005948 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	60fb      	str	r3, [r7, #12]
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	e7fd      	b.n	8005944 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	60bb      	str	r3, [r7, #8]
}
 8005962:	bf00      	nop
 8005964:	bf00      	nop
 8005966:	e7fd      	b.n	8005964 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800596c:	1e5a      	subs	r2, r3, #1
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800597a:	429a      	cmp	r2, r3
 800597c:	d02c      	beq.n	80059d8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005982:	2b00      	cmp	r3, #0
 8005984:	d128      	bne.n	80059d8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3304      	adds	r3, #4
 800598a:	4618      	mov	r0, r3
 800598c:	f7fe fc26 	bl	80041dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a8:	4b0f      	ldr	r3, [pc, #60]	@ (80059e8 <xTaskPriorityDisinherit+0xd8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d903      	bls.n	80059b8 <xTaskPriorityDisinherit+0xa8>
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b4:	4a0c      	ldr	r2, [pc, #48]	@ (80059e8 <xTaskPriorityDisinherit+0xd8>)
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4a09      	ldr	r2, [pc, #36]	@ (80059ec <xTaskPriorityDisinherit+0xdc>)
 80059c6:	441a      	add	r2, r3
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4619      	mov	r1, r3
 80059ce:	4610      	mov	r0, r2
 80059d0:	f7fe fba7 	bl	8004122 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059d4:	2301      	movs	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059d8:	697b      	ldr	r3, [r7, #20]
	}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20000944 	.word	0x20000944
 80059e8:	20000e20 	.word	0x20000e20
 80059ec:	20000948 	.word	0x20000948

080059f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059fa:	4b21      	ldr	r3, [pc, #132]	@ (8005a80 <prvAddCurrentTaskToDelayedList+0x90>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a00:	4b20      	ldr	r3, [pc, #128]	@ (8005a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3304      	adds	r3, #4
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe fbe8 	bl	80041dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a12:	d10a      	bne.n	8005a2a <prvAddCurrentTaskToDelayedList+0x3a>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d007      	beq.n	8005a2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4619      	mov	r1, r3
 8005a22:	4819      	ldr	r0, [pc, #100]	@ (8005a88 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a24:	f7fe fb7d 	bl	8004122 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a28:	e026      	b.n	8005a78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4413      	add	r3, r2
 8005a30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a32:	4b14      	ldr	r3, [pc, #80]	@ (8005a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d209      	bcs.n	8005a56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a42:	4b12      	ldr	r3, [pc, #72]	@ (8005a8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	4b0f      	ldr	r3, [pc, #60]	@ (8005a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	f7fe fb8b 	bl	800416a <vListInsert>
}
 8005a54:	e010      	b.n	8005a78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a56:	4b0e      	ldr	r3, [pc, #56]	@ (8005a90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	4619      	mov	r1, r3
 8005a62:	4610      	mov	r0, r2
 8005a64:	f7fe fb81 	bl	800416a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a68:	4b0a      	ldr	r3, [pc, #40]	@ (8005a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d202      	bcs.n	8005a78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a72:	4a08      	ldr	r2, [pc, #32]	@ (8005a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	6013      	str	r3, [r2, #0]
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	20000e1c 	.word	0x20000e1c
 8005a84:	20000944 	.word	0x20000944
 8005a88:	20000e04 	.word	0x20000e04
 8005a8c:	20000dd4 	.word	0x20000dd4
 8005a90:	20000dd0 	.word	0x20000dd0
 8005a94:	20000e38 	.word	0x20000e38

08005a98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	@ 0x28
 8005a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005aa2:	f000 fb13 	bl	80060cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8005b1c <xTimerCreateTimerTask+0x84>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d021      	beq.n	8005af2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ab6:	1d3a      	adds	r2, r7, #4
 8005ab8:	f107 0108 	add.w	r1, r7, #8
 8005abc:	f107 030c 	add.w	r3, r7, #12
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fe fae7 	bl	8004094 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	9202      	str	r2, [sp, #8]
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	460a      	mov	r2, r1
 8005ad8:	4911      	ldr	r1, [pc, #68]	@ (8005b20 <xTimerCreateTimerTask+0x88>)
 8005ada:	4812      	ldr	r0, [pc, #72]	@ (8005b24 <xTimerCreateTimerTask+0x8c>)
 8005adc:	f7ff f8a2 	bl	8004c24 <xTaskCreateStatic>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	4a11      	ldr	r2, [pc, #68]	@ (8005b28 <xTimerCreateTimerTask+0x90>)
 8005ae4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ae6:	4b10      	ldr	r3, [pc, #64]	@ (8005b28 <xTimerCreateTimerTask+0x90>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005aee:	2301      	movs	r3, #1
 8005af0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10b      	bne.n	8005b10 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	613b      	str	r3, [r7, #16]
}
 8005b0a:	bf00      	nop
 8005b0c:	bf00      	nop
 8005b0e:	e7fd      	b.n	8005b0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b10:	697b      	ldr	r3, [r7, #20]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000e74 	.word	0x20000e74
 8005b20:	08006bcc 	.word	0x08006bcc
 8005b24:	08005c65 	.word	0x08005c65
 8005b28:	20000e78 	.word	0x20000e78

08005b2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	@ 0x28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10b      	bne.n	8005b5c <xTimerGenericCommand+0x30>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	623b      	str	r3, [r7, #32]
}
 8005b56:	bf00      	nop
 8005b58:	bf00      	nop
 8005b5a:	e7fd      	b.n	8005b58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b5c:	4b19      	ldr	r3, [pc, #100]	@ (8005bc4 <xTimerGenericCommand+0x98>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d02a      	beq.n	8005bba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b05      	cmp	r3, #5
 8005b74:	dc18      	bgt.n	8005ba8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b76:	f7ff fead 	bl	80058d4 <xTaskGetSchedulerState>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d109      	bne.n	8005b94 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b80:	4b10      	ldr	r3, [pc, #64]	@ (8005bc4 <xTimerGenericCommand+0x98>)
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	f107 0110 	add.w	r1, r7, #16
 8005b88:	2300      	movs	r3, #0
 8005b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b8c:	f7fe fc5a 	bl	8004444 <xQueueGenericSend>
 8005b90:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b92:	e012      	b.n	8005bba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b94:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc4 <xTimerGenericCommand+0x98>)
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	f107 0110 	add.w	r1, r7, #16
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f7fe fc50 	bl	8004444 <xQueueGenericSend>
 8005ba4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ba6:	e008      	b.n	8005bba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ba8:	4b06      	ldr	r3, [pc, #24]	@ (8005bc4 <xTimerGenericCommand+0x98>)
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	f107 0110 	add.w	r1, r7, #16
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	f7fe fd48 	bl	8004648 <xQueueGenericSendFromISR>
 8005bb8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3728      	adds	r7, #40	@ 0x28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000e74 	.word	0x20000e74

08005bc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd2:	4b23      	ldr	r3, [pc, #140]	@ (8005c60 <prvProcessExpiredTimer+0x98>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fe fafb 	bl	80041dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d023      	beq.n	8005c3c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	18d1      	adds	r1, r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	6978      	ldr	r0, [r7, #20]
 8005c02:	f000 f8d5 	bl	8005db0 <prvInsertTimerInActiveList>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d020      	beq.n	8005c4e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	2300      	movs	r3, #0
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	2100      	movs	r1, #0
 8005c16:	6978      	ldr	r0, [r7, #20]
 8005c18:	f7ff ff88 	bl	8005b2c <xTimerGenericCommand>
 8005c1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d114      	bne.n	8005c4e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60fb      	str	r3, [r7, #12]
}
 8005c36:	bf00      	nop
 8005c38:	bf00      	nop
 8005c3a:	e7fd      	b.n	8005c38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c42:	f023 0301 	bic.w	r3, r3, #1
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	6978      	ldr	r0, [r7, #20]
 8005c54:	4798      	blx	r3
}
 8005c56:	bf00      	nop
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20000e6c 	.word	0x20000e6c

08005c64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c6c:	f107 0308 	add.w	r3, r7, #8
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 f859 	bl	8005d28 <prvGetNextExpireTime>
 8005c76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f805 	bl	8005c8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c82:	f000 f8d7 	bl	8005e34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c86:	bf00      	nop
 8005c88:	e7f0      	b.n	8005c6c <prvTimerTask+0x8>
	...

08005c8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c96:	f7ff fa29 	bl	80050ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c9a:	f107 0308 	add.w	r3, r7, #8
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 f866 	bl	8005d70 <prvSampleTimeNow>
 8005ca4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d130      	bne.n	8005d0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10a      	bne.n	8005cc8 <prvProcessTimerOrBlockTask+0x3c>
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d806      	bhi.n	8005cc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005cba:	f7ff fa25 	bl	8005108 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cbe:	68f9      	ldr	r1, [r7, #12]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff ff81 	bl	8005bc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005cc6:	e024      	b.n	8005d12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005cce:	4b13      	ldr	r3, [pc, #76]	@ (8005d1c <prvProcessTimerOrBlockTask+0x90>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <prvProcessTimerOrBlockTask+0x50>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <prvProcessTimerOrBlockTask+0x52>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8005d20 <prvProcessTimerOrBlockTask+0x94>)
 8005ce2:	6818      	ldr	r0, [r3, #0]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	4619      	mov	r1, r3
 8005cee:	f7fe ff65 	bl	8004bbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cf2:	f7ff fa09 	bl	8005108 <xTaskResumeAll>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005cfc:	4b09      	ldr	r3, [pc, #36]	@ (8005d24 <prvProcessTimerOrBlockTask+0x98>)
 8005cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	f3bf 8f6f 	isb	sy
}
 8005d0c:	e001      	b.n	8005d12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d0e:	f7ff f9fb 	bl	8005108 <xTaskResumeAll>
}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000e70 	.word	0x20000e70
 8005d20:	20000e74 	.word	0x20000e74
 8005d24:	e000ed04 	.word	0xe000ed04

08005d28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d30:	4b0e      	ldr	r3, [pc, #56]	@ (8005d6c <prvGetNextExpireTime+0x44>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <prvGetNextExpireTime+0x16>
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	e000      	b.n	8005d40 <prvGetNextExpireTime+0x18>
 8005d3e:	2200      	movs	r2, #0
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d4c:	4b07      	ldr	r3, [pc, #28]	@ (8005d6c <prvGetNextExpireTime+0x44>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	e001      	b.n	8005d5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000e6c 	.word	0x20000e6c

08005d70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d78:	f7ff fa64 	bl	8005244 <xTaskGetTickCount>
 8005d7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005dac <prvSampleTimeNow+0x3c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d205      	bcs.n	8005d94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d88:	f000 f93a 	bl	8006000 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	e002      	b.n	8005d9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d9a:	4a04      	ldr	r2, [pc, #16]	@ (8005dac <prvSampleTimeNow+0x3c>)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005da0:	68fb      	ldr	r3, [r7, #12]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000e7c 	.word	0x20000e7c

08005db0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d812      	bhi.n	8005dfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	1ad2      	subs	r2, r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d302      	bcc.n	8005dea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	e01b      	b.n	8005e22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005dea:	4b10      	ldr	r3, [pc, #64]	@ (8005e2c <prvInsertTimerInActiveList+0x7c>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3304      	adds	r3, #4
 8005df2:	4619      	mov	r1, r3
 8005df4:	4610      	mov	r0, r2
 8005df6:	f7fe f9b8 	bl	800416a <vListInsert>
 8005dfa:	e012      	b.n	8005e22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d206      	bcs.n	8005e12 <prvInsertTimerInActiveList+0x62>
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d302      	bcc.n	8005e12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	e007      	b.n	8005e22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e12:	4b07      	ldr	r3, [pc, #28]	@ (8005e30 <prvInsertTimerInActiveList+0x80>)
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	f7fe f9a4 	bl	800416a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e22:	697b      	ldr	r3, [r7, #20]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20000e70 	.word	0x20000e70
 8005e30:	20000e6c 	.word	0x20000e6c

08005e34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08e      	sub	sp, #56	@ 0x38
 8005e38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e3a:	e0ce      	b.n	8005fda <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	da19      	bge.n	8005e76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e42:	1d3b      	adds	r3, r7, #4
 8005e44:	3304      	adds	r3, #4
 8005e46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	61fb      	str	r3, [r7, #28]
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	e7fd      	b.n	8005e62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e6c:	6850      	ldr	r0, [r2, #4]
 8005e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e70:	6892      	ldr	r2, [r2, #8]
 8005e72:	4611      	mov	r1, r2
 8005e74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f2c0 80ae 	blt.w	8005fda <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d004      	beq.n	8005e94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe f9a4 	bl	80041dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e94:	463b      	mov	r3, r7
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff ff6a 	bl	8005d70 <prvSampleTimeNow>
 8005e9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b09      	cmp	r3, #9
 8005ea2:	f200 8097 	bhi.w	8005fd4 <prvProcessReceivedCommands+0x1a0>
 8005ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8005eac <prvProcessReceivedCommands+0x78>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ed5 	.word	0x08005ed5
 8005eb0:	08005ed5 	.word	0x08005ed5
 8005eb4:	08005ed5 	.word	0x08005ed5
 8005eb8:	08005f4b 	.word	0x08005f4b
 8005ebc:	08005f5f 	.word	0x08005f5f
 8005ec0:	08005fab 	.word	0x08005fab
 8005ec4:	08005ed5 	.word	0x08005ed5
 8005ec8:	08005ed5 	.word	0x08005ed5
 8005ecc:	08005f4b 	.word	0x08005f4b
 8005ed0:	08005f5f 	.word	0x08005f5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005eda:	f043 0301 	orr.w	r3, r3, #1
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	18d1      	adds	r1, r2, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ef4:	f7ff ff5c 	bl	8005db0 <prvInsertTimerInActiveList>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d06c      	beq.n	8005fd8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d061      	beq.n	8005fd8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	441a      	add	r2, r3
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	2300      	movs	r3, #0
 8005f22:	2100      	movs	r1, #0
 8005f24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f26:	f7ff fe01 	bl	8005b2c <xTimerGenericCommand>
 8005f2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d152      	bne.n	8005fd8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	61bb      	str	r3, [r7, #24]
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	e7fd      	b.n	8005f46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f5c:	e03d      	b.n	8005fda <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f64:	f043 0301 	orr.w	r3, r3, #1
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10b      	bne.n	8005f96 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	617b      	str	r3, [r7, #20]
}
 8005f90:	bf00      	nop
 8005f92:	bf00      	nop
 8005f94:	e7fd      	b.n	8005f92 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f98:	699a      	ldr	r2, [r3, #24]
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	18d1      	adds	r1, r2, r3
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fa4:	f7ff ff04 	bl	8005db0 <prvInsertTimerInActiveList>
					break;
 8005fa8:	e017      	b.n	8005fda <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d103      	bne.n	8005fc0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005fb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fba:	f000 fbe5 	bl	8006788 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005fbe:	e00c      	b.n	8005fda <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fc6:	f023 0301 	bic.w	r3, r3, #1
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005fd2:	e002      	b.n	8005fda <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005fd4:	bf00      	nop
 8005fd6:	e000      	b.n	8005fda <prvProcessReceivedCommands+0x1a6>
					break;
 8005fd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fda:	4b08      	ldr	r3, [pc, #32]	@ (8005ffc <prvProcessReceivedCommands+0x1c8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	1d39      	adds	r1, r7, #4
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe fbce 	bl	8004784 <xQueueReceive>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f47f af26 	bne.w	8005e3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005ff0:	bf00      	nop
 8005ff2:	bf00      	nop
 8005ff4:	3730      	adds	r7, #48	@ 0x30
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000e74 	.word	0x20000e74

08006000 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006006:	e049      	b.n	800609c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006008:	4b2e      	ldr	r3, [pc, #184]	@ (80060c4 <prvSwitchTimerLists+0xc4>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006012:	4b2c      	ldr	r3, [pc, #176]	@ (80060c4 <prvSwitchTimerLists+0xc4>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3304      	adds	r3, #4
 8006020:	4618      	mov	r0, r3
 8006022:	f7fe f8db 	bl	80041dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006034:	f003 0304 	and.w	r3, r3, #4
 8006038:	2b00      	cmp	r3, #0
 800603a:	d02f      	beq.n	800609c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4413      	add	r3, r2
 8006044:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	429a      	cmp	r2, r3
 800604c:	d90e      	bls.n	800606c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800605a:	4b1a      	ldr	r3, [pc, #104]	@ (80060c4 <prvSwitchTimerLists+0xc4>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3304      	adds	r3, #4
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f7fe f880 	bl	800416a <vListInsert>
 800606a:	e017      	b.n	800609c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800606c:	2300      	movs	r3, #0
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	2300      	movs	r3, #0
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	2100      	movs	r1, #0
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f7ff fd58 	bl	8005b2c <xTimerGenericCommand>
 800607c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10b      	bne.n	800609c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	603b      	str	r3, [r7, #0]
}
 8006096:	bf00      	nop
 8006098:	bf00      	nop
 800609a:	e7fd      	b.n	8006098 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800609c:	4b09      	ldr	r3, [pc, #36]	@ (80060c4 <prvSwitchTimerLists+0xc4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1b0      	bne.n	8006008 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80060a6:	4b07      	ldr	r3, [pc, #28]	@ (80060c4 <prvSwitchTimerLists+0xc4>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80060ac:	4b06      	ldr	r3, [pc, #24]	@ (80060c8 <prvSwitchTimerLists+0xc8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a04      	ldr	r2, [pc, #16]	@ (80060c4 <prvSwitchTimerLists+0xc4>)
 80060b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060b4:	4a04      	ldr	r2, [pc, #16]	@ (80060c8 <prvSwitchTimerLists+0xc8>)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	6013      	str	r3, [r2, #0]
}
 80060ba:	bf00      	nop
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000e6c 	.word	0x20000e6c
 80060c8:	20000e70 	.word	0x20000e70

080060cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80060d2:	f000 f969 	bl	80063a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80060d6:	4b15      	ldr	r3, [pc, #84]	@ (800612c <prvCheckForValidListAndQueue+0x60>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d120      	bne.n	8006120 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80060de:	4814      	ldr	r0, [pc, #80]	@ (8006130 <prvCheckForValidListAndQueue+0x64>)
 80060e0:	f7fd fff2 	bl	80040c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80060e4:	4813      	ldr	r0, [pc, #76]	@ (8006134 <prvCheckForValidListAndQueue+0x68>)
 80060e6:	f7fd ffef 	bl	80040c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060ea:	4b13      	ldr	r3, [pc, #76]	@ (8006138 <prvCheckForValidListAndQueue+0x6c>)
 80060ec:	4a10      	ldr	r2, [pc, #64]	@ (8006130 <prvCheckForValidListAndQueue+0x64>)
 80060ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060f0:	4b12      	ldr	r3, [pc, #72]	@ (800613c <prvCheckForValidListAndQueue+0x70>)
 80060f2:	4a10      	ldr	r2, [pc, #64]	@ (8006134 <prvCheckForValidListAndQueue+0x68>)
 80060f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060f6:	2300      	movs	r3, #0
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	4b11      	ldr	r3, [pc, #68]	@ (8006140 <prvCheckForValidListAndQueue+0x74>)
 80060fc:	4a11      	ldr	r2, [pc, #68]	@ (8006144 <prvCheckForValidListAndQueue+0x78>)
 80060fe:	2110      	movs	r1, #16
 8006100:	200a      	movs	r0, #10
 8006102:	f7fe f8ff 	bl	8004304 <xQueueGenericCreateStatic>
 8006106:	4603      	mov	r3, r0
 8006108:	4a08      	ldr	r2, [pc, #32]	@ (800612c <prvCheckForValidListAndQueue+0x60>)
 800610a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800610c:	4b07      	ldr	r3, [pc, #28]	@ (800612c <prvCheckForValidListAndQueue+0x60>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006114:	4b05      	ldr	r3, [pc, #20]	@ (800612c <prvCheckForValidListAndQueue+0x60>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	490b      	ldr	r1, [pc, #44]	@ (8006148 <prvCheckForValidListAndQueue+0x7c>)
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe fd24 	bl	8004b68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006120:	f000 f974 	bl	800640c <vPortExitCritical>
}
 8006124:	bf00      	nop
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000e74 	.word	0x20000e74
 8006130:	20000e44 	.word	0x20000e44
 8006134:	20000e58 	.word	0x20000e58
 8006138:	20000e6c 	.word	0x20000e6c
 800613c:	20000e70 	.word	0x20000e70
 8006140:	20000f20 	.word	0x20000f20
 8006144:	20000e80 	.word	0x20000e80
 8006148:	08006bd4 	.word	0x08006bd4

0800614c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3b04      	subs	r3, #4
 800615c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3b04      	subs	r3, #4
 800616a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f023 0201 	bic.w	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3b04      	subs	r3, #4
 800617a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800617c:	4a0c      	ldr	r2, [pc, #48]	@ (80061b0 <pxPortInitialiseStack+0x64>)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3b14      	subs	r3, #20
 8006186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3b04      	subs	r3, #4
 8006192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f06f 0202 	mvn.w	r2, #2
 800619a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3b20      	subs	r3, #32
 80061a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061a2:	68fb      	ldr	r3, [r7, #12]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	080061b5 	.word	0x080061b5

080061b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061be:	4b13      	ldr	r3, [pc, #76]	@ (800620c <prvTaskExitError+0x58>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c6:	d00b      	beq.n	80061e0 <prvTaskExitError+0x2c>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	60fb      	str	r3, [r7, #12]
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	e7fd      	b.n	80061dc <prvTaskExitError+0x28>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	60bb      	str	r3, [r7, #8]
}
 80061f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061f4:	bf00      	nop
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0fc      	beq.n	80061f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	2000000c 	.word	0x2000000c

08006210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006210:	4b07      	ldr	r3, [pc, #28]	@ (8006230 <pxCurrentTCBConst2>)
 8006212:	6819      	ldr	r1, [r3, #0]
 8006214:	6808      	ldr	r0, [r1, #0]
 8006216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621a:	f380 8809 	msr	PSP, r0
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f04f 0000 	mov.w	r0, #0
 8006226:	f380 8811 	msr	BASEPRI, r0
 800622a:	4770      	bx	lr
 800622c:	f3af 8000 	nop.w

08006230 <pxCurrentTCBConst2>:
 8006230:	20000944 	.word	0x20000944
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop

08006238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006238:	4808      	ldr	r0, [pc, #32]	@ (800625c <prvPortStartFirstTask+0x24>)
 800623a:	6800      	ldr	r0, [r0, #0]
 800623c:	6800      	ldr	r0, [r0, #0]
 800623e:	f380 8808 	msr	MSP, r0
 8006242:	f04f 0000 	mov.w	r0, #0
 8006246:	f380 8814 	msr	CONTROL, r0
 800624a:	b662      	cpsie	i
 800624c:	b661      	cpsie	f
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	df00      	svc	0
 8006258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800625a:	bf00      	nop
 800625c:	e000ed08 	.word	0xe000ed08

08006260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006266:	4b47      	ldr	r3, [pc, #284]	@ (8006384 <xPortStartScheduler+0x124>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a47      	ldr	r2, [pc, #284]	@ (8006388 <xPortStartScheduler+0x128>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d10b      	bne.n	8006288 <xPortStartScheduler+0x28>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	613b      	str	r3, [r7, #16]
}
 8006282:	bf00      	nop
 8006284:	bf00      	nop
 8006286:	e7fd      	b.n	8006284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006288:	4b3e      	ldr	r3, [pc, #248]	@ (8006384 <xPortStartScheduler+0x124>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a3f      	ldr	r2, [pc, #252]	@ (800638c <xPortStartScheduler+0x12c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d10b      	bne.n	80062aa <xPortStartScheduler+0x4a>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	60fb      	str	r3, [r7, #12]
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	e7fd      	b.n	80062a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062aa:	4b39      	ldr	r3, [pc, #228]	@ (8006390 <xPortStartScheduler+0x130>)
 80062ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	22ff      	movs	r2, #255	@ 0xff
 80062ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	4b31      	ldr	r3, [pc, #196]	@ (8006394 <xPortStartScheduler+0x134>)
 80062d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062d2:	4b31      	ldr	r3, [pc, #196]	@ (8006398 <xPortStartScheduler+0x138>)
 80062d4:	2207      	movs	r2, #7
 80062d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062d8:	e009      	b.n	80062ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80062da:	4b2f      	ldr	r3, [pc, #188]	@ (8006398 <xPortStartScheduler+0x138>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3b01      	subs	r3, #1
 80062e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006398 <xPortStartScheduler+0x138>)
 80062e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062ee:	78fb      	ldrb	r3, [r7, #3]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f6:	2b80      	cmp	r3, #128	@ 0x80
 80062f8:	d0ef      	beq.n	80062da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062fa:	4b27      	ldr	r3, [pc, #156]	@ (8006398 <xPortStartScheduler+0x138>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f1c3 0307 	rsb	r3, r3, #7
 8006302:	2b04      	cmp	r3, #4
 8006304:	d00b      	beq.n	800631e <xPortStartScheduler+0xbe>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	60bb      	str	r3, [r7, #8]
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	e7fd      	b.n	800631a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800631e:	4b1e      	ldr	r3, [pc, #120]	@ (8006398 <xPortStartScheduler+0x138>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	4a1c      	ldr	r2, [pc, #112]	@ (8006398 <xPortStartScheduler+0x138>)
 8006326:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006328:	4b1b      	ldr	r3, [pc, #108]	@ (8006398 <xPortStartScheduler+0x138>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006330:	4a19      	ldr	r2, [pc, #100]	@ (8006398 <xPortStartScheduler+0x138>)
 8006332:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	b2da      	uxtb	r2, r3
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800633c:	4b17      	ldr	r3, [pc, #92]	@ (800639c <xPortStartScheduler+0x13c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a16      	ldr	r2, [pc, #88]	@ (800639c <xPortStartScheduler+0x13c>)
 8006342:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006346:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006348:	4b14      	ldr	r3, [pc, #80]	@ (800639c <xPortStartScheduler+0x13c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a13      	ldr	r2, [pc, #76]	@ (800639c <xPortStartScheduler+0x13c>)
 800634e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006352:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006354:	f000 f8da 	bl	800650c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006358:	4b11      	ldr	r3, [pc, #68]	@ (80063a0 <xPortStartScheduler+0x140>)
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800635e:	f000 f8f9 	bl	8006554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006362:	4b10      	ldr	r3, [pc, #64]	@ (80063a4 <xPortStartScheduler+0x144>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a0f      	ldr	r2, [pc, #60]	@ (80063a4 <xPortStartScheduler+0x144>)
 8006368:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800636c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800636e:	f7ff ff63 	bl	8006238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006372:	f7ff f831 	bl	80053d8 <vTaskSwitchContext>
	prvTaskExitError();
 8006376:	f7ff ff1d 	bl	80061b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	e000ed00 	.word	0xe000ed00
 8006388:	410fc271 	.word	0x410fc271
 800638c:	410fc270 	.word	0x410fc270
 8006390:	e000e400 	.word	0xe000e400
 8006394:	20000f70 	.word	0x20000f70
 8006398:	20000f74 	.word	0x20000f74
 800639c:	e000ed20 	.word	0xe000ed20
 80063a0:	2000000c 	.word	0x2000000c
 80063a4:	e000ef34 	.word	0xe000ef34

080063a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	607b      	str	r3, [r7, #4]
}
 80063c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063c2:	4b10      	ldr	r3, [pc, #64]	@ (8006404 <vPortEnterCritical+0x5c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3301      	adds	r3, #1
 80063c8:	4a0e      	ldr	r2, [pc, #56]	@ (8006404 <vPortEnterCritical+0x5c>)
 80063ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <vPortEnterCritical+0x5c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d110      	bne.n	80063f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006408 <vPortEnterCritical+0x60>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00b      	beq.n	80063f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	603b      	str	r3, [r7, #0]
}
 80063f0:	bf00      	nop
 80063f2:	bf00      	nop
 80063f4:	e7fd      	b.n	80063f2 <vPortEnterCritical+0x4a>
	}
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	2000000c 	.word	0x2000000c
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006412:	4b12      	ldr	r3, [pc, #72]	@ (800645c <vPortExitCritical+0x50>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10b      	bne.n	8006432 <vPortExitCritical+0x26>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	607b      	str	r3, [r7, #4]
}
 800642c:	bf00      	nop
 800642e:	bf00      	nop
 8006430:	e7fd      	b.n	800642e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006432:	4b0a      	ldr	r3, [pc, #40]	@ (800645c <vPortExitCritical+0x50>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3b01      	subs	r3, #1
 8006438:	4a08      	ldr	r2, [pc, #32]	@ (800645c <vPortExitCritical+0x50>)
 800643a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800643c:	4b07      	ldr	r3, [pc, #28]	@ (800645c <vPortExitCritical+0x50>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d105      	bne.n	8006450 <vPortExitCritical+0x44>
 8006444:	2300      	movs	r3, #0
 8006446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	f383 8811 	msr	BASEPRI, r3
}
 800644e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	2000000c 	.word	0x2000000c

08006460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006460:	f3ef 8009 	mrs	r0, PSP
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	4b15      	ldr	r3, [pc, #84]	@ (80064c0 <pxCurrentTCBConst>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	f01e 0f10 	tst.w	lr, #16
 8006470:	bf08      	it	eq
 8006472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647a:	6010      	str	r0, [r2, #0]
 800647c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006480:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006484:	f380 8811 	msr	BASEPRI, r0
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f7fe ffa2 	bl	80053d8 <vTaskSwitchContext>
 8006494:	f04f 0000 	mov.w	r0, #0
 8006498:	f380 8811 	msr	BASEPRI, r0
 800649c:	bc09      	pop	{r0, r3}
 800649e:	6819      	ldr	r1, [r3, #0]
 80064a0:	6808      	ldr	r0, [r1, #0]
 80064a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a6:	f01e 0f10 	tst.w	lr, #16
 80064aa:	bf08      	it	eq
 80064ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064b0:	f380 8809 	msr	PSP, r0
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	f3af 8000 	nop.w

080064c0 <pxCurrentTCBConst>:
 80064c0:	20000944 	.word	0x20000944
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop

080064c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	607b      	str	r3, [r7, #4]
}
 80064e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064e2:	f7fe febf 	bl	8005264 <xTaskIncrementTick>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064ec:	4b06      	ldr	r3, [pc, #24]	@ (8006508 <xPortSysTickHandler+0x40>)
 80064ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	2300      	movs	r3, #0
 80064f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	f383 8811 	msr	BASEPRI, r3
}
 80064fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	e000ed04 	.word	0xe000ed04

0800650c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006510:	4b0b      	ldr	r3, [pc, #44]	@ (8006540 <vPortSetupTimerInterrupt+0x34>)
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006516:	4b0b      	ldr	r3, [pc, #44]	@ (8006544 <vPortSetupTimerInterrupt+0x38>)
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800651c:	4b0a      	ldr	r3, [pc, #40]	@ (8006548 <vPortSetupTimerInterrupt+0x3c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a0a      	ldr	r2, [pc, #40]	@ (800654c <vPortSetupTimerInterrupt+0x40>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	099b      	lsrs	r3, r3, #6
 8006528:	4a09      	ldr	r2, [pc, #36]	@ (8006550 <vPortSetupTimerInterrupt+0x44>)
 800652a:	3b01      	subs	r3, #1
 800652c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800652e:	4b04      	ldr	r3, [pc, #16]	@ (8006540 <vPortSetupTimerInterrupt+0x34>)
 8006530:	2207      	movs	r2, #7
 8006532:	601a      	str	r2, [r3, #0]
}
 8006534:	bf00      	nop
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	e000e010 	.word	0xe000e010
 8006544:	e000e018 	.word	0xe000e018
 8006548:	20000000 	.word	0x20000000
 800654c:	10624dd3 	.word	0x10624dd3
 8006550:	e000e014 	.word	0xe000e014

08006554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006554:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006564 <vPortEnableVFP+0x10>
 8006558:	6801      	ldr	r1, [r0, #0]
 800655a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800655e:	6001      	str	r1, [r0, #0]
 8006560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006562:	bf00      	nop
 8006564:	e000ed88 	.word	0xe000ed88

08006568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800656e:	f3ef 8305 	mrs	r3, IPSR
 8006572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b0f      	cmp	r3, #15
 8006578:	d915      	bls.n	80065a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800657a:	4a18      	ldr	r2, [pc, #96]	@ (80065dc <vPortValidateInterruptPriority+0x74>)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006584:	4b16      	ldr	r3, [pc, #88]	@ (80065e0 <vPortValidateInterruptPriority+0x78>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	7afa      	ldrb	r2, [r7, #11]
 800658a:	429a      	cmp	r2, r3
 800658c:	d20b      	bcs.n	80065a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	607b      	str	r3, [r7, #4]
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	e7fd      	b.n	80065a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065a6:	4b0f      	ldr	r3, [pc, #60]	@ (80065e4 <vPortValidateInterruptPriority+0x7c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80065ae:	4b0e      	ldr	r3, [pc, #56]	@ (80065e8 <vPortValidateInterruptPriority+0x80>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d90b      	bls.n	80065ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	603b      	str	r3, [r7, #0]
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	e7fd      	b.n	80065ca <vPortValidateInterruptPriority+0x62>
	}
 80065ce:	bf00      	nop
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	e000e3f0 	.word	0xe000e3f0
 80065e0:	20000f70 	.word	0x20000f70
 80065e4:	e000ed0c 	.word	0xe000ed0c
 80065e8:	20000f74 	.word	0x20000f74

080065ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08a      	sub	sp, #40	@ 0x28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065f8:	f7fe fd78 	bl	80050ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006770 <pvPortMalloc+0x184>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006604:	f000 f924 	bl	8006850 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006608:	4b5a      	ldr	r3, [pc, #360]	@ (8006774 <pvPortMalloc+0x188>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4013      	ands	r3, r2
 8006610:	2b00      	cmp	r3, #0
 8006612:	f040 8095 	bne.w	8006740 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01e      	beq.n	800665a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800661c:	2208      	movs	r2, #8
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4413      	add	r3, r2
 8006622:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b00      	cmp	r3, #0
 800662c:	d015      	beq.n	800665a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f023 0307 	bic.w	r3, r3, #7
 8006634:	3308      	adds	r3, #8
 8006636:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00b      	beq.n	800665a <pvPortMalloc+0x6e>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	617b      	str	r3, [r7, #20]
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop
 8006658:	e7fd      	b.n	8006656 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d06f      	beq.n	8006740 <pvPortMalloc+0x154>
 8006660:	4b45      	ldr	r3, [pc, #276]	@ (8006778 <pvPortMalloc+0x18c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d86a      	bhi.n	8006740 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800666a:	4b44      	ldr	r3, [pc, #272]	@ (800677c <pvPortMalloc+0x190>)
 800666c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800666e:	4b43      	ldr	r3, [pc, #268]	@ (800677c <pvPortMalloc+0x190>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006674:	e004      	b.n	8006680 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	429a      	cmp	r2, r3
 8006688:	d903      	bls.n	8006692 <pvPortMalloc+0xa6>
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f1      	bne.n	8006676 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006692:	4b37      	ldr	r3, [pc, #220]	@ (8006770 <pvPortMalloc+0x184>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006698:	429a      	cmp	r2, r3
 800669a:	d051      	beq.n	8006740 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2208      	movs	r2, #8
 80066a2:	4413      	add	r3, r2
 80066a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	1ad2      	subs	r2, r2, r3
 80066b6:	2308      	movs	r3, #8
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d920      	bls.n	8006700 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4413      	add	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00b      	beq.n	80066e8 <pvPortMalloc+0xfc>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	613b      	str	r3, [r7, #16]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	1ad2      	subs	r2, r2, r3
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066fa:	69b8      	ldr	r0, [r7, #24]
 80066fc:	f000 f90a 	bl	8006914 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006700:	4b1d      	ldr	r3, [pc, #116]	@ (8006778 <pvPortMalloc+0x18c>)
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	4a1b      	ldr	r2, [pc, #108]	@ (8006778 <pvPortMalloc+0x18c>)
 800670c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800670e:	4b1a      	ldr	r3, [pc, #104]	@ (8006778 <pvPortMalloc+0x18c>)
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	4b1b      	ldr	r3, [pc, #108]	@ (8006780 <pvPortMalloc+0x194>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d203      	bcs.n	8006722 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800671a:	4b17      	ldr	r3, [pc, #92]	@ (8006778 <pvPortMalloc+0x18c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a18      	ldr	r2, [pc, #96]	@ (8006780 <pvPortMalloc+0x194>)
 8006720:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	4b13      	ldr	r3, [pc, #76]	@ (8006774 <pvPortMalloc+0x188>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	431a      	orrs	r2, r3
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006736:	4b13      	ldr	r3, [pc, #76]	@ (8006784 <pvPortMalloc+0x198>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3301      	adds	r3, #1
 800673c:	4a11      	ldr	r2, [pc, #68]	@ (8006784 <pvPortMalloc+0x198>)
 800673e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006740:	f7fe fce2 	bl	8005108 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00b      	beq.n	8006766 <pvPortMalloc+0x17a>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	60fb      	str	r3, [r7, #12]
}
 8006760:	bf00      	nop
 8006762:	bf00      	nop
 8006764:	e7fd      	b.n	8006762 <pvPortMalloc+0x176>
	return pvReturn;
 8006766:	69fb      	ldr	r3, [r7, #28]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3728      	adds	r7, #40	@ 0x28
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	20004b80 	.word	0x20004b80
 8006774:	20004b94 	.word	0x20004b94
 8006778:	20004b84 	.word	0x20004b84
 800677c:	20004b78 	.word	0x20004b78
 8006780:	20004b88 	.word	0x20004b88
 8006784:	20004b8c 	.word	0x20004b8c

08006788 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d04f      	beq.n	800683a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800679a:	2308      	movs	r3, #8
 800679c:	425b      	negs	r3, r3
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4413      	add	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	4b25      	ldr	r3, [pc, #148]	@ (8006844 <vPortFree+0xbc>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4013      	ands	r3, r2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10b      	bne.n	80067ce <vPortFree+0x46>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	60fb      	str	r3, [r7, #12]
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	e7fd      	b.n	80067ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00b      	beq.n	80067ee <vPortFree+0x66>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	60bb      	str	r3, [r7, #8]
}
 80067e8:	bf00      	nop
 80067ea:	bf00      	nop
 80067ec:	e7fd      	b.n	80067ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	4b14      	ldr	r3, [pc, #80]	@ (8006844 <vPortFree+0xbc>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d01e      	beq.n	800683a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d11a      	bne.n	800683a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	4b0e      	ldr	r3, [pc, #56]	@ (8006844 <vPortFree+0xbc>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	43db      	mvns	r3, r3
 800680e:	401a      	ands	r2, r3
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006814:	f7fe fc6a 	bl	80050ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	4b0a      	ldr	r3, [pc, #40]	@ (8006848 <vPortFree+0xc0>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4413      	add	r3, r2
 8006822:	4a09      	ldr	r2, [pc, #36]	@ (8006848 <vPortFree+0xc0>)
 8006824:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006826:	6938      	ldr	r0, [r7, #16]
 8006828:	f000 f874 	bl	8006914 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800682c:	4b07      	ldr	r3, [pc, #28]	@ (800684c <vPortFree+0xc4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	4a06      	ldr	r2, [pc, #24]	@ (800684c <vPortFree+0xc4>)
 8006834:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006836:	f7fe fc67 	bl	8005108 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800683a:	bf00      	nop
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20004b94 	.word	0x20004b94
 8006848:	20004b84 	.word	0x20004b84
 800684c:	20004b90 	.word	0x20004b90

08006850 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006856:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800685a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800685c:	4b27      	ldr	r3, [pc, #156]	@ (80068fc <prvHeapInit+0xac>)
 800685e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00c      	beq.n	8006884 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3307      	adds	r3, #7
 800686e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0307 	bic.w	r3, r3, #7
 8006876:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	4a1f      	ldr	r2, [pc, #124]	@ (80068fc <prvHeapInit+0xac>)
 8006880:	4413      	add	r3, r2
 8006882:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006888:	4a1d      	ldr	r2, [pc, #116]	@ (8006900 <prvHeapInit+0xb0>)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800688e:	4b1c      	ldr	r3, [pc, #112]	@ (8006900 <prvHeapInit+0xb0>)
 8006890:	2200      	movs	r2, #0
 8006892:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	4413      	add	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800689c:	2208      	movs	r2, #8
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1a9b      	subs	r3, r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0307 	bic.w	r3, r3, #7
 80068aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4a15      	ldr	r2, [pc, #84]	@ (8006904 <prvHeapInit+0xb4>)
 80068b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068b2:	4b14      	ldr	r3, [pc, #80]	@ (8006904 <prvHeapInit+0xb4>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2200      	movs	r2, #0
 80068b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068ba:	4b12      	ldr	r3, [pc, #72]	@ (8006904 <prvHeapInit+0xb4>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	1ad2      	subs	r2, r2, r3
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006904 <prvHeapInit+0xb4>)
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006908 <prvHeapInit+0xb8>)
 80068de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	4a09      	ldr	r2, [pc, #36]	@ (800690c <prvHeapInit+0xbc>)
 80068e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068e8:	4b09      	ldr	r3, [pc, #36]	@ (8006910 <prvHeapInit+0xc0>)
 80068ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80068ee:	601a      	str	r2, [r3, #0]
}
 80068f0:	bf00      	nop
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	20000f78 	.word	0x20000f78
 8006900:	20004b78 	.word	0x20004b78
 8006904:	20004b80 	.word	0x20004b80
 8006908:	20004b88 	.word	0x20004b88
 800690c:	20004b84 	.word	0x20004b84
 8006910:	20004b94 	.word	0x20004b94

08006914 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800691c:	4b28      	ldr	r3, [pc, #160]	@ (80069c0 <prvInsertBlockIntoFreeList+0xac>)
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	e002      	b.n	8006928 <prvInsertBlockIntoFreeList+0x14>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	429a      	cmp	r2, r3
 8006930:	d8f7      	bhi.n	8006922 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	4413      	add	r3, r2
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	429a      	cmp	r2, r3
 8006942:	d108      	bne.n	8006956 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	441a      	add	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	441a      	add	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d118      	bne.n	800699c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4b15      	ldr	r3, [pc, #84]	@ (80069c4 <prvInsertBlockIntoFreeList+0xb0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d00d      	beq.n	8006992 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	441a      	add	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	e008      	b.n	80069a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006992:	4b0c      	ldr	r3, [pc, #48]	@ (80069c4 <prvInsertBlockIntoFreeList+0xb0>)
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	e003      	b.n	80069a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d002      	beq.n	80069b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069b2:	bf00      	nop
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	20004b78 	.word	0x20004b78
 80069c4:	20004b80 	.word	0x20004b80

080069c8 <memset>:
 80069c8:	4402      	add	r2, r0
 80069ca:	4603      	mov	r3, r0
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d100      	bne.n	80069d2 <memset+0xa>
 80069d0:	4770      	bx	lr
 80069d2:	f803 1b01 	strb.w	r1, [r3], #1
 80069d6:	e7f9      	b.n	80069cc <memset+0x4>

080069d8 <_reclaim_reent>:
 80069d8:	4b29      	ldr	r3, [pc, #164]	@ (8006a80 <_reclaim_reent+0xa8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4283      	cmp	r3, r0
 80069de:	b570      	push	{r4, r5, r6, lr}
 80069e0:	4604      	mov	r4, r0
 80069e2:	d04b      	beq.n	8006a7c <_reclaim_reent+0xa4>
 80069e4:	69c3      	ldr	r3, [r0, #28]
 80069e6:	b1ab      	cbz	r3, 8006a14 <_reclaim_reent+0x3c>
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	b16b      	cbz	r3, 8006a08 <_reclaim_reent+0x30>
 80069ec:	2500      	movs	r5, #0
 80069ee:	69e3      	ldr	r3, [r4, #28]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	5959      	ldr	r1, [r3, r5]
 80069f4:	2900      	cmp	r1, #0
 80069f6:	d13b      	bne.n	8006a70 <_reclaim_reent+0x98>
 80069f8:	3504      	adds	r5, #4
 80069fa:	2d80      	cmp	r5, #128	@ 0x80
 80069fc:	d1f7      	bne.n	80069ee <_reclaim_reent+0x16>
 80069fe:	69e3      	ldr	r3, [r4, #28]
 8006a00:	4620      	mov	r0, r4
 8006a02:	68d9      	ldr	r1, [r3, #12]
 8006a04:	f000 f872 	bl	8006aec <_free_r>
 8006a08:	69e3      	ldr	r3, [r4, #28]
 8006a0a:	6819      	ldr	r1, [r3, #0]
 8006a0c:	b111      	cbz	r1, 8006a14 <_reclaim_reent+0x3c>
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f000 f86c 	bl	8006aec <_free_r>
 8006a14:	6961      	ldr	r1, [r4, #20]
 8006a16:	b111      	cbz	r1, 8006a1e <_reclaim_reent+0x46>
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 f867 	bl	8006aec <_free_r>
 8006a1e:	69e1      	ldr	r1, [r4, #28]
 8006a20:	b111      	cbz	r1, 8006a28 <_reclaim_reent+0x50>
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 f862 	bl	8006aec <_free_r>
 8006a28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006a2a:	b111      	cbz	r1, 8006a32 <_reclaim_reent+0x5a>
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f000 f85d 	bl	8006aec <_free_r>
 8006a32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a34:	b111      	cbz	r1, 8006a3c <_reclaim_reent+0x64>
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 f858 	bl	8006aec <_free_r>
 8006a3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006a3e:	b111      	cbz	r1, 8006a46 <_reclaim_reent+0x6e>
 8006a40:	4620      	mov	r0, r4
 8006a42:	f000 f853 	bl	8006aec <_free_r>
 8006a46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006a48:	b111      	cbz	r1, 8006a50 <_reclaim_reent+0x78>
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 f84e 	bl	8006aec <_free_r>
 8006a50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006a52:	b111      	cbz	r1, 8006a5a <_reclaim_reent+0x82>
 8006a54:	4620      	mov	r0, r4
 8006a56:	f000 f849 	bl	8006aec <_free_r>
 8006a5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006a5c:	b111      	cbz	r1, 8006a64 <_reclaim_reent+0x8c>
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f000 f844 	bl	8006aec <_free_r>
 8006a64:	6a23      	ldr	r3, [r4, #32]
 8006a66:	b14b      	cbz	r3, 8006a7c <_reclaim_reent+0xa4>
 8006a68:	4620      	mov	r0, r4
 8006a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a6e:	4718      	bx	r3
 8006a70:	680e      	ldr	r6, [r1, #0]
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 f83a 	bl	8006aec <_free_r>
 8006a78:	4631      	mov	r1, r6
 8006a7a:	e7bb      	b.n	80069f4 <_reclaim_reent+0x1c>
 8006a7c:	bd70      	pop	{r4, r5, r6, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000010 	.word	0x20000010

08006a84 <__libc_init_array>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	4d0d      	ldr	r5, [pc, #52]	@ (8006abc <__libc_init_array+0x38>)
 8006a88:	4c0d      	ldr	r4, [pc, #52]	@ (8006ac0 <__libc_init_array+0x3c>)
 8006a8a:	1b64      	subs	r4, r4, r5
 8006a8c:	10a4      	asrs	r4, r4, #2
 8006a8e:	2600      	movs	r6, #0
 8006a90:	42a6      	cmp	r6, r4
 8006a92:	d109      	bne.n	8006aa8 <__libc_init_array+0x24>
 8006a94:	4d0b      	ldr	r5, [pc, #44]	@ (8006ac4 <__libc_init_array+0x40>)
 8006a96:	4c0c      	ldr	r4, [pc, #48]	@ (8006ac8 <__libc_init_array+0x44>)
 8006a98:	f000 f87e 	bl	8006b98 <_init>
 8006a9c:	1b64      	subs	r4, r4, r5
 8006a9e:	10a4      	asrs	r4, r4, #2
 8006aa0:	2600      	movs	r6, #0
 8006aa2:	42a6      	cmp	r6, r4
 8006aa4:	d105      	bne.n	8006ab2 <__libc_init_array+0x2e>
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aac:	4798      	blx	r3
 8006aae:	3601      	adds	r6, #1
 8006ab0:	e7ee      	b.n	8006a90 <__libc_init_array+0xc>
 8006ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab6:	4798      	blx	r3
 8006ab8:	3601      	adds	r6, #1
 8006aba:	e7f2      	b.n	8006aa2 <__libc_init_array+0x1e>
 8006abc:	08006c44 	.word	0x08006c44
 8006ac0:	08006c44 	.word	0x08006c44
 8006ac4:	08006c44 	.word	0x08006c44
 8006ac8:	08006c48 	.word	0x08006c48

08006acc <__retarget_lock_acquire_recursive>:
 8006acc:	4770      	bx	lr

08006ace <__retarget_lock_release_recursive>:
 8006ace:	4770      	bx	lr

08006ad0 <memcpy>:
 8006ad0:	440a      	add	r2, r1
 8006ad2:	4291      	cmp	r1, r2
 8006ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ad8:	d100      	bne.n	8006adc <memcpy+0xc>
 8006ada:	4770      	bx	lr
 8006adc:	b510      	push	{r4, lr}
 8006ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	d1f9      	bne.n	8006ade <memcpy+0xe>
 8006aea:	bd10      	pop	{r4, pc}

08006aec <_free_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4605      	mov	r5, r0
 8006af0:	2900      	cmp	r1, #0
 8006af2:	d041      	beq.n	8006b78 <_free_r+0x8c>
 8006af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006af8:	1f0c      	subs	r4, r1, #4
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	bfb8      	it	lt
 8006afe:	18e4      	addlt	r4, r4, r3
 8006b00:	f000 f83e 	bl	8006b80 <__malloc_lock>
 8006b04:	4a1d      	ldr	r2, [pc, #116]	@ (8006b7c <_free_r+0x90>)
 8006b06:	6813      	ldr	r3, [r2, #0]
 8006b08:	b933      	cbnz	r3, 8006b18 <_free_r+0x2c>
 8006b0a:	6063      	str	r3, [r4, #4]
 8006b0c:	6014      	str	r4, [r2, #0]
 8006b0e:	4628      	mov	r0, r5
 8006b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b14:	f000 b83a 	b.w	8006b8c <__malloc_unlock>
 8006b18:	42a3      	cmp	r3, r4
 8006b1a:	d908      	bls.n	8006b2e <_free_r+0x42>
 8006b1c:	6820      	ldr	r0, [r4, #0]
 8006b1e:	1821      	adds	r1, r4, r0
 8006b20:	428b      	cmp	r3, r1
 8006b22:	bf01      	itttt	eq
 8006b24:	6819      	ldreq	r1, [r3, #0]
 8006b26:	685b      	ldreq	r3, [r3, #4]
 8006b28:	1809      	addeq	r1, r1, r0
 8006b2a:	6021      	streq	r1, [r4, #0]
 8006b2c:	e7ed      	b.n	8006b0a <_free_r+0x1e>
 8006b2e:	461a      	mov	r2, r3
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	b10b      	cbz	r3, 8006b38 <_free_r+0x4c>
 8006b34:	42a3      	cmp	r3, r4
 8006b36:	d9fa      	bls.n	8006b2e <_free_r+0x42>
 8006b38:	6811      	ldr	r1, [r2, #0]
 8006b3a:	1850      	adds	r0, r2, r1
 8006b3c:	42a0      	cmp	r0, r4
 8006b3e:	d10b      	bne.n	8006b58 <_free_r+0x6c>
 8006b40:	6820      	ldr	r0, [r4, #0]
 8006b42:	4401      	add	r1, r0
 8006b44:	1850      	adds	r0, r2, r1
 8006b46:	4283      	cmp	r3, r0
 8006b48:	6011      	str	r1, [r2, #0]
 8006b4a:	d1e0      	bne.n	8006b0e <_free_r+0x22>
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	6053      	str	r3, [r2, #4]
 8006b52:	4408      	add	r0, r1
 8006b54:	6010      	str	r0, [r2, #0]
 8006b56:	e7da      	b.n	8006b0e <_free_r+0x22>
 8006b58:	d902      	bls.n	8006b60 <_free_r+0x74>
 8006b5a:	230c      	movs	r3, #12
 8006b5c:	602b      	str	r3, [r5, #0]
 8006b5e:	e7d6      	b.n	8006b0e <_free_r+0x22>
 8006b60:	6820      	ldr	r0, [r4, #0]
 8006b62:	1821      	adds	r1, r4, r0
 8006b64:	428b      	cmp	r3, r1
 8006b66:	bf04      	itt	eq
 8006b68:	6819      	ldreq	r1, [r3, #0]
 8006b6a:	685b      	ldreq	r3, [r3, #4]
 8006b6c:	6063      	str	r3, [r4, #4]
 8006b6e:	bf04      	itt	eq
 8006b70:	1809      	addeq	r1, r1, r0
 8006b72:	6021      	streq	r1, [r4, #0]
 8006b74:	6054      	str	r4, [r2, #4]
 8006b76:	e7ca      	b.n	8006b0e <_free_r+0x22>
 8006b78:	bd38      	pop	{r3, r4, r5, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20004cd4 	.word	0x20004cd4

08006b80 <__malloc_lock>:
 8006b80:	4801      	ldr	r0, [pc, #4]	@ (8006b88 <__malloc_lock+0x8>)
 8006b82:	f7ff bfa3 	b.w	8006acc <__retarget_lock_acquire_recursive>
 8006b86:	bf00      	nop
 8006b88:	20004cd0 	.word	0x20004cd0

08006b8c <__malloc_unlock>:
 8006b8c:	4801      	ldr	r0, [pc, #4]	@ (8006b94 <__malloc_unlock+0x8>)
 8006b8e:	f7ff bf9e 	b.w	8006ace <__retarget_lock_release_recursive>
 8006b92:	bf00      	nop
 8006b94:	20004cd0 	.word	0x20004cd0

08006b98 <_init>:
 8006b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9a:	bf00      	nop
 8006b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9e:	bc08      	pop	{r3}
 8006ba0:	469e      	mov	lr, r3
 8006ba2:	4770      	bx	lr

08006ba4 <_fini>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	bf00      	nop
 8006ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006baa:	bc08      	pop	{r3}
 8006bac:	469e      	mov	lr, r3
 8006bae:	4770      	bx	lr
