
prer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005368  08005368  00006368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005408  08005408  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005408  08005408  00006408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005410  08005410  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005410  08005410  00006410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005414  08005414  00006414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005418  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c7c  20000060  08005478  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cdc  08005478  00007cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b8c  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e93  00000000  00000000  00027c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000ec63  00000000  00000000  0002baaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  0003a718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ba  00000000  00000000  0003bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001903d  00000000  00000000  0003cc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ca1  00000000  00000000  00055ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000989f6  00000000  00000000  00076948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f33e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000400c  00000000  00000000  0010f384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003a  00000000  00000000  00113390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005350 	.word	0x08005350

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005350 	.word	0x08005350

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96a 	b.w	8000e84 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	460c      	mov	r4, r1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d14e      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd4:	4694      	mov	ip, r2
 8000bd6:	458c      	cmp	ip, r1
 8000bd8:	4686      	mov	lr, r0
 8000bda:	fab2 f282 	clz	r2, r2
 8000bde:	d962      	bls.n	8000ca6 <__udivmoddi4+0xde>
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0320 	rsb	r3, r2, #32
 8000be6:	4091      	lsls	r1, r2
 8000be8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf0:	4319      	orrs	r1, r3
 8000bf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f f68c 	uxth.w	r6, ip
 8000bfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c06:	fb07 1114 	mls	r1, r7, r4, r1
 8000c0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0e:	fb04 f106 	mul.w	r1, r4, r6
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c1e:	f080 8112 	bcs.w	8000e46 <__udivmoddi4+0x27e>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 810f 	bls.w	8000e46 <__udivmoddi4+0x27e>
 8000c28:	3c02      	subs	r4, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a59      	subs	r1, r3, r1
 8000c2e:	fa1f f38e 	uxth.w	r3, lr
 8000c32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c36:	fb07 1110 	mls	r1, r7, r0, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb00 f606 	mul.w	r6, r0, r6
 8000c42:	429e      	cmp	r6, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x94>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c4e:	f080 80fc 	bcs.w	8000e4a <__udivmoddi4+0x282>
 8000c52:	429e      	cmp	r6, r3
 8000c54:	f240 80f9 	bls.w	8000e4a <__udivmoddi4+0x282>
 8000c58:	4463      	add	r3, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11d      	cbz	r5, 8000c6e <__udivmoddi4+0xa6>
 8000c66:	40d3      	lsrs	r3, r2
 8000c68:	2200      	movs	r2, #0
 8000c6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d905      	bls.n	8000c82 <__udivmoddi4+0xba>
 8000c76:	b10d      	cbz	r5, 8000c7c <__udivmoddi4+0xb4>
 8000c78:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e7f5      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000c82:	fab3 f183 	clz	r1, r3
 8000c86:	2900      	cmp	r1, #0
 8000c88:	d146      	bne.n	8000d18 <__udivmoddi4+0x150>
 8000c8a:	42a3      	cmp	r3, r4
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xcc>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f0c0 80f0 	bcc.w	8000e74 <__udivmoddi4+0x2ac>
 8000c94:	1a86      	subs	r6, r0, r2
 8000c96:	eb64 0303 	sbc.w	r3, r4, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d0e6      	beq.n	8000c6e <__udivmoddi4+0xa6>
 8000ca0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ca4:	e7e3      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x204>
 8000cac:	eba1 040c 	sub.w	r4, r1, ip
 8000cb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb4:	fa1f f78c 	uxth.w	r7, ip
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb07 f006 	mul.w	r0, r7, r6
 8000cce:	4298      	cmp	r0, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x11c>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x11a>
 8000cdc:	4298      	cmp	r0, r3
 8000cde:	f200 80cd 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000ce2:	4626      	mov	r6, r4
 8000ce4:	1a1c      	subs	r4, r3, r0
 8000ce6:	fa1f f38e 	uxth.w	r3, lr
 8000cea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cee:	fb08 4410 	mls	r4, r8, r0, r4
 8000cf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf6:	fb00 f707 	mul.w	r7, r0, r7
 8000cfa:	429f      	cmp	r7, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x148>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x146>
 8000d08:	429f      	cmp	r7, r3
 8000d0a:	f200 80b0 	bhi.w	8000e6e <__udivmoddi4+0x2a6>
 8000d0e:	4620      	mov	r0, r4
 8000d10:	1bdb      	subs	r3, r3, r7
 8000d12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d16:	e7a5      	b.n	8000c64 <__udivmoddi4+0x9c>
 8000d18:	f1c1 0620 	rsb	r6, r1, #32
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d22:	431f      	orrs	r7, r3
 8000d24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d28:	fa04 f301 	lsl.w	r3, r4, r1
 8000d2c:	ea43 030c 	orr.w	r3, r3, ip
 8000d30:	40f4      	lsrs	r4, r6
 8000d32:	fa00 f801 	lsl.w	r8, r0, r1
 8000d36:	0c38      	lsrs	r0, r7, #16
 8000d38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d40:	fa1f fc87 	uxth.w	ip, r7
 8000d44:	fb00 441e 	mls	r4, r0, lr, r4
 8000d48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d50:	45a1      	cmp	r9, r4
 8000d52:	fa02 f201 	lsl.w	r2, r2, r1
 8000d56:	d90a      	bls.n	8000d6e <__udivmoddi4+0x1a6>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d5e:	f080 8084 	bcs.w	8000e6a <__udivmoddi4+0x2a2>
 8000d62:	45a1      	cmp	r9, r4
 8000d64:	f240 8081 	bls.w	8000e6a <__udivmoddi4+0x2a2>
 8000d68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	eba4 0409 	sub.w	r4, r4, r9
 8000d72:	fa1f f983 	uxth.w	r9, r3
 8000d76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d86:	45a4      	cmp	ip, r4
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x1d2>
 8000d8a:	193c      	adds	r4, r7, r4
 8000d8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d90:	d267      	bcs.n	8000e62 <__udivmoddi4+0x29a>
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d965      	bls.n	8000e62 <__udivmoddi4+0x29a>
 8000d96:	3b02      	subs	r3, #2
 8000d98:	443c      	add	r4, r7
 8000d9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000da2:	eba4 040c 	sub.w	r4, r4, ip
 8000da6:	429c      	cmp	r4, r3
 8000da8:	46ce      	mov	lr, r9
 8000daa:	469c      	mov	ip, r3
 8000dac:	d351      	bcc.n	8000e52 <__udivmoddi4+0x28a>
 8000dae:	d04e      	beq.n	8000e4e <__udivmoddi4+0x286>
 8000db0:	b155      	cbz	r5, 8000dc8 <__udivmoddi4+0x200>
 8000db2:	ebb8 030e 	subs.w	r3, r8, lr
 8000db6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dba:	fa04 f606 	lsl.w	r6, r4, r6
 8000dbe:	40cb      	lsrs	r3, r1
 8000dc0:	431e      	orrs	r6, r3
 8000dc2:	40cc      	lsrs	r4, r1
 8000dc4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e750      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f103 	lsr.w	r1, r0, r3
 8000dd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ddc:	4094      	lsls	r4, r2
 8000dde:	430c      	orrs	r4, r1
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de8:	fa1f f78c 	uxth.w	r7, ip
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3110 	mls	r1, r8, r0, r3
 8000df4:	0c23      	lsrs	r3, r4, #16
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f107 	mul.w	r1, r0, r7
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x24c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e0a:	d22c      	bcs.n	8000e66 <__udivmoddi4+0x29e>
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	d92a      	bls.n	8000e66 <__udivmoddi4+0x29e>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e24:	fb01 f307 	mul.w	r3, r1, r7
 8000e28:	42a3      	cmp	r3, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x276>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e34:	d213      	bcs.n	8000e5e <__udivmoddi4+0x296>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d911      	bls.n	8000e5e <__udivmoddi4+0x296>
 8000e3a:	3902      	subs	r1, #2
 8000e3c:	4464      	add	r4, ip
 8000e3e:	1ae4      	subs	r4, r4, r3
 8000e40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e44:	e739      	b.n	8000cba <__udivmoddi4+0xf2>
 8000e46:	4604      	mov	r4, r0
 8000e48:	e6f0      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e706      	b.n	8000c5c <__udivmoddi4+0x94>
 8000e4e:	45c8      	cmp	r8, r9
 8000e50:	d2ae      	bcs.n	8000db0 <__udivmoddi4+0x1e8>
 8000e52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e5a:	3801      	subs	r0, #1
 8000e5c:	e7a8      	b.n	8000db0 <__udivmoddi4+0x1e8>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	e7ed      	b.n	8000e3e <__udivmoddi4+0x276>
 8000e62:	4603      	mov	r3, r0
 8000e64:	e799      	b.n	8000d9a <__udivmoddi4+0x1d2>
 8000e66:	4630      	mov	r0, r6
 8000e68:	e7d4      	b.n	8000e14 <__udivmoddi4+0x24c>
 8000e6a:	46d6      	mov	lr, sl
 8000e6c:	e77f      	b.n	8000d6e <__udivmoddi4+0x1a6>
 8000e6e:	4463      	add	r3, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e74d      	b.n	8000d10 <__udivmoddi4+0x148>
 8000e74:	4606      	mov	r6, r0
 8000e76:	4623      	mov	r3, r4
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e70f      	b.n	8000c9c <__udivmoddi4+0xd4>
 8000e7c:	3e02      	subs	r6, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	e730      	b.n	8000ce4 <__udivmoddi4+0x11c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000e88:	b508      	push	{r3, lr}
 8000e8a:	e00d      	b.n	8000ea8 <StartDefaultTask+0x20>
		if (HAL_UART_Receive(&huart1, &numByte, 1, 50) == HAL_OK) {
			if (bitcheck(numByte, 7) == 0) {
				i = 0;
				byteArr[i] = numByte;
			} else {
				i++;
 8000e8c:	491a      	ldr	r1, [pc, #104]	@ (8000ef8 <StartDefaultTask+0x70>)
 8000e8e:	780b      	ldrb	r3, [r1, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	700b      	strb	r3, [r1, #0]
				byteArr[i] = numByte;
 8000e96:	4919      	ldr	r1, [pc, #100]	@ (8000efc <StartDefaultTask+0x74>)
 8000e98:	54ca      	strb	r2, [r1, r3]
			}
			if (i == 2) {
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <StartDefaultTask+0x70>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d016      	beq.n	8000ed0 <StartDefaultTask+0x48>
				}
				znach = byteArr[2] * 17;
			}
		}

		osDelay(1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f002 fa54 	bl	8003350 <osDelay>
		if (HAL_UART_Receive(&huart1, &numByte, 1, 50) == HAL_OK) {
 8000ea8:	2332      	movs	r3, #50	@ 0x32
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4914      	ldr	r1, [pc, #80]	@ (8000f00 <StartDefaultTask+0x78>)
 8000eae:	4815      	ldr	r0, [pc, #84]	@ (8000f04 <StartDefaultTask+0x7c>)
 8000eb0:	f001 ff7f 	bl	8002db2 <HAL_UART_Receive>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d1f4      	bne.n	8000ea2 <StartDefaultTask+0x1a>
			if (bitcheck(numByte, 7) == 0) {
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <StartDefaultTask+0x78>)
 8000eba:	781a      	ldrb	r2, [r3, #0]
 8000ebc:	f993 3000 	ldrsb.w	r3, [r3]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dbe3      	blt.n	8000e8c <StartDefaultTask+0x4>
				i = 0;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <StartDefaultTask+0x70>)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	7019      	strb	r1, [r3, #0]
				byteArr[i] = numByte;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <StartDefaultTask+0x74>)
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e7e4      	b.n	8000e9a <StartDefaultTask+0x12>
				if (bitcheck(byteArr[2],7) != bitcheck(byteArr[0], 5)) {
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <StartDefaultTask+0x74>)
 8000ed2:	789a      	ldrb	r2, [r3, #2]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000eda:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 8000ede:	d003      	beq.n	8000ee8 <StartDefaultTask+0x60>
					bitflip(byteArr[2], 7);
 8000ee0:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <StartDefaultTask+0x74>)
 8000ee6:	709a      	strb	r2, [r3, #2]
				znach = byteArr[2] * 17;
 8000ee8:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <StartDefaultTask+0x74>)
 8000eea:	789b      	ldrb	r3, [r3, #2]
 8000eec:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8000ef0:	4a05      	ldr	r2, [pc, #20]	@ (8000f08 <StartDefaultTask+0x80>)
 8000ef2:	8013      	strh	r3, [r2, #0]
 8000ef4:	e7d5      	b.n	8000ea2 <StartDefaultTask+0x1a>
 8000ef6:	bf00      	nop
 8000ef8:	2000008a 	.word	0x2000008a
 8000efc:	2000008c 	.word	0x2000008c
 8000f00:	2000008f 	.word	0x2000008f
 8000f04:	20000168 	.word	0x20000168
 8000f08:	20000088 	.word	0x20000088
 8000f0c:	00000000 	.word	0x00000000

08000f10 <colorLib>:
void colorLib() {
 8000f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	double H = znach / 11.375;
 8000f14:	4b7c      	ldr	r3, [pc, #496]	@ (8001108 <colorLib+0x1f8>)
 8000f16:	8818      	ldrh	r0, [r3, #0]
 8000f18:	f7ff fab4 	bl	8000484 <__aeabi_i2d>
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4b7b      	ldr	r3, [pc, #492]	@ (800110c <colorLib+0x1fc>)
 8000f20:	f7ff fc44 	bl	80007ac <__aeabi_ddiv>
 8000f24:	4604      	mov	r4, r0
 8000f26:	460d      	mov	r5, r1
	X = C * (1 - fabs(fmod(H / 60.0, 2) - 1));
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4b79      	ldr	r3, [pc, #484]	@ (8001110 <colorLib+0x200>)
 8000f2c:	f7ff fc3e 	bl	80007ac <__aeabi_ddiv>
 8000f30:	ed9f 1b6f 	vldr	d1, [pc, #444]	@ 80010f0 <colorLib+0x1e0>
 8000f34:	ec41 0b10 	vmov	d0, r0, r1
 8000f38:	f004 f8d2 	bl	80050e0 <fmod>
 8000f3c:	ec51 0b10 	vmov	r0, r1, d0
 8000f40:	2200      	movs	r2, #0
 8000f42:	4b74      	ldr	r3, [pc, #464]	@ (8001114 <colorLib+0x204>)
 8000f44:	f7ff f950 	bl	80001e8 <__aeabi_dsub>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8000f4e:	2000      	movs	r0, #0
 8000f50:	4970      	ldr	r1, [pc, #448]	@ (8001114 <colorLib+0x204>)
 8000f52:	f7ff f949 	bl	80001e8 <__aeabi_dsub>
 8000f56:	4606      	mov	r6, r0
 8000f58:	460f      	mov	r7, r1
	if (H >= 0 && H < 60) {
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	4620      	mov	r0, r4
 8000f60:	4629      	mov	r1, r5
 8000f62:	f7ff fd7f 	bl	8000a64 <__aeabi_dcmpge>
 8000f66:	2800      	cmp	r0, #0
 8000f68:	d042      	beq.n	8000ff0 <colorLib+0xe0>
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4b68      	ldr	r3, [pc, #416]	@ (8001110 <colorLib+0x200>)
 8000f6e:	4620      	mov	r0, r4
 8000f70:	4629      	mov	r1, r5
 8000f72:	f7ff fd63 	bl	8000a3c <__aeabi_dcmplt>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	d03a      	beq.n	8000ff0 <colorLib+0xe0>
		Gg = X;
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	4639      	mov	r1, r7
 8000f7e:	f7ff fdbb 	bl	8000af8 <__aeabi_d2f>
 8000f82:	4680      	mov	r8, r0
		Bb = 0;
 8000f84:	f04f 0a00 	mov.w	sl, #0
		Rr = C;
 8000f88:	f04f 597e 	mov.w	r9, #1065353216	@ 0x3f800000
	R = (Rr + M) * 255;
 8000f8c:	4648      	mov	r0, r9
 8000f8e:	f7ff fa8b 	bl	80004a8 <__aeabi_f2d>
 8000f92:	2200      	movs	r2, #0
 8000f94:	2300      	movs	r3, #0
 8000f96:	f7ff f929 	bl	80001ec <__adddf3>
 8000f9a:	a357      	add	r3, pc, #348	@ (adr r3, 80010f8 <colorLib+0x1e8>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f7ff fada 	bl	8000558 <__aeabi_dmul>
 8000fa4:	f7ff fd88 	bl	8000ab8 <__aeabi_d2uiz>
 8000fa8:	4b5b      	ldr	r3, [pc, #364]	@ (8001118 <colorLib+0x208>)
 8000faa:	7018      	strb	r0, [r3, #0]
	G = (Gg + M) * 255;
 8000fac:	4640      	mov	r0, r8
 8000fae:	f7ff fa7b 	bl	80004a8 <__aeabi_f2d>
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f7ff f919 	bl	80001ec <__adddf3>
 8000fba:	a34f      	add	r3, pc, #316	@ (adr r3, 80010f8 <colorLib+0x1e8>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff faca 	bl	8000558 <__aeabi_dmul>
 8000fc4:	f7ff fd78 	bl	8000ab8 <__aeabi_d2uiz>
 8000fc8:	4b54      	ldr	r3, [pc, #336]	@ (800111c <colorLib+0x20c>)
 8000fca:	7018      	strb	r0, [r3, #0]
	B = (Bb + M) * 255;
 8000fcc:	4650      	mov	r0, sl
 8000fce:	f7ff fa6b 	bl	80004a8 <__aeabi_f2d>
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f7ff f909 	bl	80001ec <__adddf3>
 8000fda:	a347      	add	r3, pc, #284	@ (adr r3, 80010f8 <colorLib+0x1e8>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff faba 	bl	8000558 <__aeabi_dmul>
 8000fe4:	f7ff fd68 	bl	8000ab8 <__aeabi_d2uiz>
 8000fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8001120 <colorLib+0x210>)
 8000fea:	7018      	strb	r0, [r3, #0]
}
 8000fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (H >= 60 && H < 120) {
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4b47      	ldr	r3, [pc, #284]	@ (8001110 <colorLib+0x200>)
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	f7ff fd34 	bl	8000a64 <__aeabi_dcmpge>
 8000ffc:	b180      	cbz	r0, 8001020 <colorLib+0x110>
 8000ffe:	2200      	movs	r2, #0
 8001000:	4b48      	ldr	r3, [pc, #288]	@ (8001124 <colorLib+0x214>)
 8001002:	4620      	mov	r0, r4
 8001004:	4629      	mov	r1, r5
 8001006:	f7ff fd19 	bl	8000a3c <__aeabi_dcmplt>
 800100a:	b148      	cbz	r0, 8001020 <colorLib+0x110>
		Rr = X;
 800100c:	4630      	mov	r0, r6
 800100e:	4639      	mov	r1, r7
 8001010:	f7ff fd72 	bl	8000af8 <__aeabi_d2f>
 8001014:	4681      	mov	r9, r0
		Bb = 0;
 8001016:	f04f 0a00 	mov.w	sl, #0
		Gg = C;
 800101a:	f04f 587e 	mov.w	r8, #1065353216	@ 0x3f800000
		Bb = 0;
 800101e:	e7b5      	b.n	8000f8c <colorLib+0x7c>
	} else if (H >= 120 && H < 180) {
 8001020:	2200      	movs	r2, #0
 8001022:	4b40      	ldr	r3, [pc, #256]	@ (8001124 <colorLib+0x214>)
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff fd1c 	bl	8000a64 <__aeabi_dcmpge>
 800102c:	b180      	cbz	r0, 8001050 <colorLib+0x140>
 800102e:	2200      	movs	r2, #0
 8001030:	4b3d      	ldr	r3, [pc, #244]	@ (8001128 <colorLib+0x218>)
 8001032:	4620      	mov	r0, r4
 8001034:	4629      	mov	r1, r5
 8001036:	f7ff fd01 	bl	8000a3c <__aeabi_dcmplt>
 800103a:	b148      	cbz	r0, 8001050 <colorLib+0x140>
		Bb = X;
 800103c:	4630      	mov	r0, r6
 800103e:	4639      	mov	r1, r7
 8001040:	f7ff fd5a 	bl	8000af8 <__aeabi_d2f>
 8001044:	4682      	mov	sl, r0
		Gg = C;
 8001046:	f04f 587e 	mov.w	r8, #1065353216	@ 0x3f800000
		Rr = 0;
 800104a:	f04f 0900 	mov.w	r9, #0
		Bb = X;
 800104e:	e79d      	b.n	8000f8c <colorLib+0x7c>
	} else if (H >= 180 && H < 240) {
 8001050:	2200      	movs	r2, #0
 8001052:	4b35      	ldr	r3, [pc, #212]	@ (8001128 <colorLib+0x218>)
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff fd04 	bl	8000a64 <__aeabi_dcmpge>
 800105c:	b180      	cbz	r0, 8001080 <colorLib+0x170>
 800105e:	2200      	movs	r2, #0
 8001060:	4b32      	ldr	r3, [pc, #200]	@ (800112c <colorLib+0x21c>)
 8001062:	4620      	mov	r0, r4
 8001064:	4629      	mov	r1, r5
 8001066:	f7ff fce9 	bl	8000a3c <__aeabi_dcmplt>
 800106a:	b148      	cbz	r0, 8001080 <colorLib+0x170>
		Gg = X;
 800106c:	4630      	mov	r0, r6
 800106e:	4639      	mov	r1, r7
 8001070:	f7ff fd42 	bl	8000af8 <__aeabi_d2f>
 8001074:	4680      	mov	r8, r0
		Bb = C;
 8001076:	f04f 5a7e 	mov.w	sl, #1065353216	@ 0x3f800000
		Rr = 0;
 800107a:	f04f 0900 	mov.w	r9, #0
		Bb = C;
 800107e:	e785      	b.n	8000f8c <colorLib+0x7c>
	} else if (H >= 240 && H < 300) {
 8001080:	2200      	movs	r2, #0
 8001082:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <colorLib+0x21c>)
 8001084:	4620      	mov	r0, r4
 8001086:	4629      	mov	r1, r5
 8001088:	f7ff fcec 	bl	8000a64 <__aeabi_dcmpge>
 800108c:	b188      	cbz	r0, 80010b2 <colorLib+0x1a2>
 800108e:	a31c      	add	r3, pc, #112	@ (adr r3, 8001100 <colorLib+0x1f0>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	4620      	mov	r0, r4
 8001096:	4629      	mov	r1, r5
 8001098:	f7ff fcd0 	bl	8000a3c <__aeabi_dcmplt>
 800109c:	b148      	cbz	r0, 80010b2 <colorLib+0x1a2>
		Rr = X;
 800109e:	4630      	mov	r0, r6
 80010a0:	4639      	mov	r1, r7
 80010a2:	f7ff fd29 	bl	8000af8 <__aeabi_d2f>
 80010a6:	4681      	mov	r9, r0
		Bb = C;
 80010a8:	f04f 5a7e 	mov.w	sl, #1065353216	@ 0x3f800000
		Gg = 0;
 80010ac:	f04f 0800 	mov.w	r8, #0
		Bb = C;
 80010b0:	e76c      	b.n	8000f8c <colorLib+0x7c>
	} else if (H >= 300 && H < 360) {
 80010b2:	a313      	add	r3, pc, #76	@ (adr r3, 8001100 <colorLib+0x1f0>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	4620      	mov	r0, r4
 80010ba:	4629      	mov	r1, r5
 80010bc:	f7ff fcd2 	bl	8000a64 <__aeabi_dcmpge>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	f43f af63 	beq.w	8000f8c <colorLib+0x7c>
 80010c6:	2200      	movs	r2, #0
 80010c8:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <colorLib+0x220>)
 80010ca:	4620      	mov	r0, r4
 80010cc:	4629      	mov	r1, r5
 80010ce:	f7ff fcb5 	bl	8000a3c <__aeabi_dcmplt>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	f43f af5a 	beq.w	8000f8c <colorLib+0x7c>
		Bb = X;
 80010d8:	4630      	mov	r0, r6
 80010da:	4639      	mov	r1, r7
 80010dc:	f7ff fd0c 	bl	8000af8 <__aeabi_d2f>
 80010e0:	4682      	mov	sl, r0
		Gg = 0;
 80010e2:	f04f 0800 	mov.w	r8, #0
		Rr = C;
 80010e6:	f04f 597e 	mov.w	r9, #1065353216	@ 0x3f800000
 80010ea:	e74f      	b.n	8000f8c <colorLib+0x7c>
 80010ec:	f3af 8000 	nop.w
 80010f0:	00000000 	.word	0x00000000
 80010f4:	40000000 	.word	0x40000000
 80010f8:	00000000 	.word	0x00000000
 80010fc:	406fe000 	.word	0x406fe000
 8001100:	00000000 	.word	0x00000000
 8001104:	4072c000 	.word	0x4072c000
 8001108:	20000088 	.word	0x20000088
 800110c:	4026c000 	.word	0x4026c000
 8001110:	404e0000 	.word	0x404e0000
 8001114:	3ff00000 	.word	0x3ff00000
 8001118:	20000086 	.word	0x20000086
 800111c:	20000085 	.word	0x20000085
 8001120:	20000084 	.word	0x20000084
 8001124:	405e0000 	.word	0x405e0000
 8001128:	40668000 	.word	0x40668000
 800112c:	406e0000 	.word	0x406e0000
 8001130:	40768000 	.word	0x40768000

08001134 <StartLedTask>:
 * @brief Function implementing the LedTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument) {
 8001134:	b508      	push	{r3, lr}
	/* USER CODE BEGIN StartLedTask */
	/* Infinite loop */
	for (;;) {
		colorLib();
 8001136:	f7ff feeb 	bl	8000f10 <colorLib>
		Set_PWM_Duty_Cycle(&htim3, TIM_CHANNEL_1, R);
 800113a:	4c0a      	ldr	r4, [pc, #40]	@ (8001164 <StartLedTask+0x30>)
 800113c:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <StartLedTask+0x34>)
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	2100      	movs	r1, #0
 8001142:	4620      	mov	r0, r4
 8001144:	f000 f892 	bl	800126c <Set_PWM_Duty_Cycle>
		Set_PWM_Duty_Cycle(&htim3, TIM_CHANNEL_2, G);
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <StartLedTask+0x38>)
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	2104      	movs	r1, #4
 800114e:	4620      	mov	r0, r4
 8001150:	f000 f88c 	bl	800126c <Set_PWM_Duty_Cycle>
		Set_PWM_Duty_Cycle(&htim3, TIM_CHANNEL_3, B);
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <StartLedTask+0x3c>)
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	2108      	movs	r1, #8
 800115a:	4620      	mov	r0, r4
 800115c:	f000 f886 	bl	800126c <Set_PWM_Duty_Cycle>
	for (;;) {
 8001160:	e7e9      	b.n	8001136 <StartLedTask+0x2>
 8001162:	bf00      	nop
 8001164:	200000d8 	.word	0x200000d8
 8001168:	20000086 	.word	0x20000086
 800116c:	20000085 	.word	0x20000085
 8001170:	20000084 	.word	0x20000084

08001174 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001174:	b508      	push	{r3, lr}
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8001176:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <MX_FREERTOS_Init+0x20>)
 8001178:	2100      	movs	r1, #0
 800117a:	4807      	ldr	r0, [pc, #28]	@ (8001198 <MX_FREERTOS_Init+0x24>)
 800117c:	f002 f88a 	bl	8003294 <osThreadNew>
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <MX_FREERTOS_Init+0x28>)
 8001182:	6018      	str	r0, [r3, #0]
	LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 8001184:	4a06      	ldr	r2, [pc, #24]	@ (80011a0 <MX_FREERTOS_Init+0x2c>)
 8001186:	2100      	movs	r1, #0
 8001188:	4806      	ldr	r0, [pc, #24]	@ (80011a4 <MX_FREERTOS_Init+0x30>)
 800118a:	f002 f883 	bl	8003294 <osThreadNew>
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_FREERTOS_Init+0x34>)
 8001190:	6018      	str	r0, [r3, #0]
}
 8001192:	bd08      	pop	{r3, pc}
 8001194:	080053a0 	.word	0x080053a0
 8001198:	08000e89 	.word	0x08000e89
 800119c:	20000080 	.word	0x20000080
 80011a0:	0800537c 	.word	0x0800537c
 80011a4:	08001135 	.word	0x08001135
 80011a8:	2000007c 	.word	0x2000007c

080011ac <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80011ac:	b530      	push	{r4, r5, lr}
 80011ae:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	2400      	movs	r4, #0
 80011b2:	9405      	str	r4, [sp, #20]
 80011b4:	9406      	str	r4, [sp, #24]
 80011b6:	9407      	str	r4, [sp, #28]
 80011b8:	9408      	str	r4, [sp, #32]
 80011ba:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011bc:	9401      	str	r4, [sp, #4]
 80011be:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <MX_GPIO_Init+0xb4>)
 80011c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011c2:	f042 0204 	orr.w	r2, r2, #4
 80011c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80011c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ca:	f002 0204 	and.w	r2, r2, #4
 80011ce:	9201      	str	r2, [sp, #4]
 80011d0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d2:	9402      	str	r4, [sp, #8]
 80011d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011da:	631a      	str	r2, [r3, #48]	@ 0x30
 80011dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011de:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80011e2:	9202      	str	r2, [sp, #8]
 80011e4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	9403      	str	r4, [sp, #12]
 80011e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ea:	f042 0201 	orr.w	r2, r2, #1
 80011ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80011f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011f2:	f002 0201 	and.w	r2, r2, #1
 80011f6:	9203      	str	r2, [sp, #12]
 80011f8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	9404      	str	r4, [sp, #16]
 80011fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011fe:	f042 0202 	orr.w	r2, r2, #2
 8001202:	631a      	str	r2, [r3, #48]	@ 0x30
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	9304      	str	r3, [sp, #16]
 800120c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLed_GPIO_Port, GLed_Pin, GPIO_PIN_RESET);
 800120e:	4d15      	ldr	r5, [pc, #84]	@ (8001264 <MX_GPIO_Init+0xb8>)
 8001210:	4622      	mov	r2, r4
 8001212:	2120      	movs	r1, #32
 8001214:	4628      	mov	r0, r5
 8001216:	f000 fcd5 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800121a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800121e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001220:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001224:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001228:	a905      	add	r1, sp, #20
 800122a:	480f      	ldr	r0, [pc, #60]	@ (8001268 <MX_GPIO_Init+0xbc>)
 800122c:	f000 fbe6 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 8001230:	2308      	movs	r3, #8
 8001232:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800123c:	2307      	movs	r3, #7
 800123e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001240:	a905      	add	r1, sp, #20
 8001242:	4628      	mov	r0, r5
 8001244:	f000 fbda 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GLed_Pin;
 8001248:	2320      	movs	r3, #32
 800124a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GLed_GPIO_Port, &GPIO_InitStruct);
 8001254:	a905      	add	r1, sp, #20
 8001256:	4628      	mov	r0, r5
 8001258:	f000 fbd0 	bl	80019fc <HAL_GPIO_Init>

}
 800125c:	b00b      	add	sp, #44	@ 0x2c
 800125e:	bd30      	pop	{r4, r5, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000
 8001268:	40020800 	.word	0x40020800

0800126c <Set_PWM_Duty_Cycle>:
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
void Set_PWM_Duty_Cycle(TIM_HandleTypeDef *htim, uint32_t Channe1, uint16_t pwm)
  {
      __HAL_TIM_SET_COMPARE(htim, Channe1, pwm);
 800126c:	b911      	cbnz	r1, 8001274 <Set_PWM_Duty_Cycle+0x8>
 800126e:	6803      	ldr	r3, [r0, #0]
 8001270:	635a      	str	r2, [r3, #52]	@ 0x34
 8001272:	4770      	bx	lr
 8001274:	2904      	cmp	r1, #4
 8001276:	d004      	beq.n	8001282 <Set_PWM_Duty_Cycle+0x16>
 8001278:	2908      	cmp	r1, #8
 800127a:	d005      	beq.n	8001288 <Set_PWM_Duty_Cycle+0x1c>
 800127c:	6803      	ldr	r3, [r0, #0]
 800127e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
 8001280:	4770      	bx	lr
      __HAL_TIM_SET_COMPARE(htim, Channe1, pwm);
 8001282:	6803      	ldr	r3, [r0, #0]
 8001284:	639a      	str	r2, [r3, #56]	@ 0x38
 8001286:	4770      	bx	lr
 8001288:	6803      	ldr	r3, [r0, #0]
 800128a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800128c:	4770      	bx	lr
	...

08001290 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001290:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001292:	6802      	ldr	r2, [r0, #0]
 8001294:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001296:	429a      	cmp	r2, r3
 8001298:	d000      	beq.n	800129c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800129a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800129c:	f000 fad6 	bl	800184c <HAL_IncTick>
}
 80012a0:	e7fb      	b.n	800129a <HAL_TIM_PeriodElapsedCallback+0xa>
 80012a2:	bf00      	nop
 80012a4:	40014400 	.word	0x40014400

080012a8 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012aa:	e7fe      	b.n	80012aa <Error_Handler+0x2>

080012ac <SystemClock_Config>:
{
 80012ac:	b500      	push	{lr}
 80012ae:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b0:	2230      	movs	r2, #48	@ 0x30
 80012b2:	2100      	movs	r1, #0
 80012b4:	a808      	add	r0, sp, #32
 80012b6:	f003 fe25 	bl	8004f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ba:	2300      	movs	r3, #0
 80012bc:	9303      	str	r3, [sp, #12]
 80012be:	9304      	str	r3, [sp, #16]
 80012c0:	9305      	str	r3, [sp, #20]
 80012c2:	9306      	str	r3, [sp, #24]
 80012c4:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	4a21      	ldr	r2, [pc, #132]	@ (8001350 <SystemClock_Config+0xa4>)
 80012ca:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80012cc:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80012d0:	6411      	str	r1, [r2, #64]	@ 0x40
 80012d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80012d4:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80012d8:	9201      	str	r2, [sp, #4]
 80012da:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <SystemClock_Config+0xa8>)
 80012e0:	6813      	ldr	r3, [r2, #0]
 80012e2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	6813      	ldr	r3, [r2, #0]
 80012ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012f2:	9302      	str	r3, [sp, #8]
 80012f4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f6:	2301      	movs	r3, #1
 80012f8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012fe:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001300:	2302      	movs	r3, #2
 8001302:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001304:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001308:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800130a:	2204      	movs	r2, #4
 800130c:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800130e:	2240      	movs	r2, #64	@ 0x40
 8001310:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001312:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001314:	2307      	movs	r3, #7
 8001316:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001318:	a808      	add	r0, sp, #32
 800131a:	f000 fc59 	bl	8001bd0 <HAL_RCC_OscConfig>
 800131e:	b990      	cbnz	r0, 8001346 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001320:	230f      	movs	r3, #15
 8001322:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001324:	2302      	movs	r3, #2
 8001326:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001328:	2380      	movs	r3, #128	@ 0x80
 800132a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800132c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001330:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001336:	2101      	movs	r1, #1
 8001338:	a803      	add	r0, sp, #12
 800133a:	f000 feb3 	bl	80020a4 <HAL_RCC_ClockConfig>
 800133e:	b920      	cbnz	r0, 800134a <SystemClock_Config+0x9e>
}
 8001340:	b015      	add	sp, #84	@ 0x54
 8001342:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001346:	f7ff ffaf 	bl	80012a8 <Error_Handler>
    Error_Handler();
 800134a:	f7ff ffad 	bl	80012a8 <Error_Handler>
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <main>:
{
 8001358:	b508      	push	{r3, lr}
  HAL_Init();
 800135a:	f000 fa5d 	bl	8001818 <HAL_Init>
  SystemClock_Config();
 800135e:	f7ff ffa5 	bl	80012ac <SystemClock_Config>
  MX_GPIO_Init();
 8001362:	f7ff ff23 	bl	80011ac <MX_GPIO_Init>
  MX_TIM1_Init();
 8001366:	f000 f8b7 	bl	80014d8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800136a:	f000 f9d1 	bl	8001710 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800136e:	f000 f965 	bl	800163c <MX_TIM3_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8001372:	480b      	ldr	r0, [pc, #44]	@ (80013a0 <main+0x48>)
 8001374:	f001 f836 	bl	80023e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001378:	4c0a      	ldr	r4, [pc, #40]	@ (80013a4 <main+0x4c>)
 800137a:	2104      	movs	r1, #4
 800137c:	4620      	mov	r0, r4
 800137e:	f001 fb07 	bl	8002990 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001382:	2100      	movs	r1, #0
 8001384:	4620      	mov	r0, r4
 8001386:	f001 fb03 	bl	8002990 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800138a:	2108      	movs	r1, #8
 800138c:	4620      	mov	r0, r4
 800138e:	f001 faff 	bl	8002990 <HAL_TIM_PWM_Start>
  osKernelInitialize();
 8001392:	f001 ff51 	bl	8003238 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001396:	f7ff feed 	bl	8001174 <MX_FREERTOS_Init>
  osKernelStart();
 800139a:	f001 ff5f 	bl	800325c <osKernelStart>
  while (1)
 800139e:	e7fe      	b.n	800139e <main+0x46>
 80013a0:	20000120 	.word	0x20000120
 80013a4:	200000d8 	.word	0x200000d8

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b500      	push	{lr}
 80013aa:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ac:	2200      	movs	r2, #0
 80013ae:	9200      	str	r2, [sp, #0]
 80013b0:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <HAL_MspInit+0x40>)
 80013b2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80013b4:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80013b8:	6459      	str	r1, [r3, #68]	@ 0x44
 80013ba:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80013bc:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80013c0:	9100      	str	r1, [sp, #0]
 80013c2:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c4:	9201      	str	r2, [sp, #4]
 80013c6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80013c8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80013cc:	6419      	str	r1, [r3, #64]	@ 0x40
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013d8:	210f      	movs	r1, #15
 80013da:	f06f 0001 	mvn.w	r0, #1
 80013de:	f000 fa9b 	bl	8001918 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e2:	b003      	add	sp, #12
 80013e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b530      	push	{r4, r5, lr}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	4605      	mov	r5, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80013f2:	2400      	movs	r4, #0
 80013f4:	9401      	str	r4, [sp, #4]
 80013f6:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <HAL_InitTick+0x80>)
 80013f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013fa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80013fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800140a:	a902      	add	r1, sp, #8
 800140c:	a803      	add	r0, sp, #12
 800140e:	f000 ff1f 	bl	8002250 <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001412:	f000 ff0d 	bl	8002230 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001416:	4a16      	ldr	r2, [pc, #88]	@ (8001470 <HAL_InitTick+0x84>)
 8001418:	fba2 2300 	umull	r2, r3, r2, r0
 800141c:	0c9b      	lsrs	r3, r3, #18
 800141e:	3b01      	subs	r3, #1

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001420:	4814      	ldr	r0, [pc, #80]	@ (8001474 <HAL_InitTick+0x88>)
 8001422:	4a15      	ldr	r2, [pc, #84]	@ (8001478 <HAL_InitTick+0x8c>)
 8001424:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001426:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800142a:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800142c:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 800142e:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	6084      	str	r4, [r0, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001434:	f001 f91c 	bl	8002670 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001438:	4604      	mov	r4, r0
 800143a:	b110      	cbz	r0, 8001442 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 800143c:	4620      	mov	r0, r4
 800143e:	b009      	add	sp, #36	@ 0x24
 8001440:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001442:	480c      	ldr	r0, [pc, #48]	@ (8001474 <HAL_InitTick+0x88>)
 8001444:	f000 ffce 	bl	80023e4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001448:	4604      	mov	r4, r0
 800144a:	2800      	cmp	r0, #0
 800144c:	d1f6      	bne.n	800143c <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800144e:	2019      	movs	r0, #25
 8001450:	f000 fa72 	bl	8001938 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001454:	2d0f      	cmp	r5, #15
 8001456:	d901      	bls.n	800145c <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8001458:	2401      	movs	r4, #1
 800145a:	e7ef      	b.n	800143c <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800145c:	2200      	movs	r2, #0
 800145e:	4629      	mov	r1, r5
 8001460:	2019      	movs	r0, #25
 8001462:	f000 fa59 	bl	8001918 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001466:	4b05      	ldr	r3, [pc, #20]	@ (800147c <HAL_InitTick+0x90>)
 8001468:	601d      	str	r5, [r3, #0]
 800146a:	e7e7      	b.n	800143c <HAL_InitTick+0x50>
 800146c:	40023800 	.word	0x40023800
 8001470:	431bde83 	.word	0x431bde83
 8001474:	20000090 	.word	0x20000090
 8001478:	40014400 	.word	0x40014400
 800147c:	20000008 	.word	0x20000008

08001480 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001480:	e7fe      	b.n	8001480 <NMI_Handler>

08001482 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler>

08001484 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler>

08001486 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler>

08001488 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler>

0800148a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148a:	4770      	bx	lr

0800148c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800148c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800148e:	4803      	ldr	r0, [pc, #12]	@ (800149c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001490:	f000 ffe9 	bl	8002466 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001496:	f000 ffe6 	bl	8002466 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800149a:	bd08      	pop	{r3, pc}
 800149c:	20000120 	.word	0x20000120
 80014a0:	20000090 	.word	0x20000090

080014a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014a6:	4802      	ldr	r0, [pc, #8]	@ (80014b0 <TIM3_IRQHandler+0xc>)
 80014a8:	f000 ffdd 	bl	8002466 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014ac:	bd08      	pop	{r3, pc}
 80014ae:	bf00      	nop
 80014b0:	200000d8 	.word	0x200000d8

080014b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014b6:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <USART1_IRQHandler+0xc>)
 80014b8:	f001 fd70 	bl	8002f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014bc:	bd08      	pop	{r3, pc}
 80014be:	bf00      	nop
 80014c0:	20000168 	.word	0x20000168

080014c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c4:	4a03      	ldr	r2, [pc, #12]	@ (80014d4 <SystemInit+0x10>)
 80014c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80014ca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014d8:	b500      	push	{lr}
 80014da:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014dc:	2300      	movs	r3, #0
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	9303      	str	r3, [sp, #12]
 80014e2:	9304      	str	r3, [sp, #16]
 80014e4:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ea:	4815      	ldr	r0, [pc, #84]	@ (8001540 <MX_TIM1_Init+0x68>)
 80014ec:	4a15      	ldr	r2, [pc, #84]	@ (8001544 <MX_TIM1_Init+0x6c>)
 80014ee:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 16-1;
 80014f0:	220f      	movs	r2, #15
 80014f2:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1000-1;
 80014f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014fa:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80014fe:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001500:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001502:	f001 f8b5 	bl	8002670 <HAL_TIM_Base_Init>
 8001506:	b990      	cbnz	r0, 800152e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800150c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800150e:	a902      	add	r1, sp, #8
 8001510:	480b      	ldr	r0, [pc, #44]	@ (8001540 <MX_TIM1_Init+0x68>)
 8001512:	f001 f9ae 	bl	8002872 <HAL_TIM_ConfigClockSource>
 8001516:	b968      	cbnz	r0, 8001534 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800151e:	4669      	mov	r1, sp
 8001520:	4807      	ldr	r0, [pc, #28]	@ (8001540 <MX_TIM1_Init+0x68>)
 8001522:	f001 faad 	bl	8002a80 <HAL_TIMEx_MasterConfigSynchronization>
 8001526:	b940      	cbnz	r0, 800153a <MX_TIM1_Init+0x62>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001528:	b007      	add	sp, #28
 800152a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800152e:	f7ff febb 	bl	80012a8 <Error_Handler>
 8001532:	e7e9      	b.n	8001508 <MX_TIM1_Init+0x30>
    Error_Handler();
 8001534:	f7ff feb8 	bl	80012a8 <Error_Handler>
 8001538:	e7ee      	b.n	8001518 <MX_TIM1_Init+0x40>
    Error_Handler();
 800153a:	f7ff feb5 	bl	80012a8 <Error_Handler>
}
 800153e:	e7f3      	b.n	8001528 <MX_TIM1_Init+0x50>
 8001540:	20000120 	.word	0x20000120
 8001544:	40010000 	.word	0x40010000

08001548 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001548:	b500      	push	{lr}
 800154a:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM1)
 800154c:	6803      	ldr	r3, [r0, #0]
 800154e:	4a18      	ldr	r2, [pc, #96]	@ (80015b0 <HAL_TIM_Base_MspInit+0x68>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d005      	beq.n	8001560 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8001554:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <HAL_TIM_Base_MspInit+0x6c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d016      	beq.n	8001588 <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800155a:	b003      	add	sp, #12
 800155c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001560:	2200      	movs	r2, #0
 8001562:	9200      	str	r2, [sp, #0]
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_TIM_Base_MspInit+0x70>)
 8001566:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001568:	f041 0101 	orr.w	r1, r1, #1
 800156c:	6459      	str	r1, [r3, #68]	@ 0x44
 800156e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001578:	210f      	movs	r1, #15
 800157a:	2019      	movs	r0, #25
 800157c:	f000 f9cc 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001580:	2019      	movs	r0, #25
 8001582:	f000 f9d9 	bl	8001938 <HAL_NVIC_EnableIRQ>
 8001586:	e7e8      	b.n	800155a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001588:	2200      	movs	r2, #0
 800158a:	9201      	str	r2, [sp, #4]
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_TIM_Base_MspInit+0x70>)
 800158e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001590:	f041 0102 	orr.w	r1, r1, #2
 8001594:	6419      	str	r1, [r3, #64]	@ 0x40
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80015a0:	2105      	movs	r1, #5
 80015a2:	201d      	movs	r0, #29
 80015a4:	f000 f9b8 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015a8:	201d      	movs	r0, #29
 80015aa:	f000 f9c5 	bl	8001938 <HAL_NVIC_EnableIRQ>
}
 80015ae:	e7d4      	b.n	800155a <HAL_TIM_Base_MspInit+0x12>
 80015b0:	40010000 	.word	0x40010000
 80015b4:	40000400 	.word	0x40000400
 80015b8:	40023800 	.word	0x40023800

080015bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015bc:	b530      	push	{r4, r5, lr}
 80015be:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	2300      	movs	r3, #0
 80015c2:	9303      	str	r3, [sp, #12]
 80015c4:	9304      	str	r3, [sp, #16]
 80015c6:	9305      	str	r3, [sp, #20]
 80015c8:	9306      	str	r3, [sp, #24]
 80015ca:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM3)
 80015cc:	6802      	ldr	r2, [r0, #0]
 80015ce:	4b18      	ldr	r3, [pc, #96]	@ (8001630 <HAL_TIM_MspPostInit+0x74>)
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015d4:	b009      	add	sp, #36	@ 0x24
 80015d6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	2500      	movs	r5, #0
 80015da:	9501      	str	r5, [sp, #4]
 80015dc:	f503 330d 	add.w	r3, r3, #144384	@ 0x23400
 80015e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80015e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015ea:	f002 0201 	and.w	r2, r2, #1
 80015ee:	9201      	str	r2, [sp, #4]
 80015f0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	9502      	str	r5, [sp, #8]
 80015f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015f6:	f042 0202 	orr.w	r2, r2, #2
 80015fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001606:	23c0      	movs	r3, #192	@ 0xc0
 8001608:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2402      	movs	r4, #2
 800160c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800160e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	a903      	add	r1, sp, #12
 8001612:	4808      	ldr	r0, [pc, #32]	@ (8001634 <HAL_TIM_MspPostInit+0x78>)
 8001614:	f000 f9f2 	bl	80019fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001618:	2301      	movs	r3, #1
 800161a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001622:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	a903      	add	r1, sp, #12
 8001626:	4804      	ldr	r0, [pc, #16]	@ (8001638 <HAL_TIM_MspPostInit+0x7c>)
 8001628:	f000 f9e8 	bl	80019fc <HAL_GPIO_Init>
}
 800162c:	e7d2      	b.n	80015d4 <HAL_TIM_MspPostInit+0x18>
 800162e:	bf00      	nop
 8001630:	40000400 	.word	0x40000400
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400

0800163c <MX_TIM3_Init>:
{
 800163c:	b500      	push	{lr}
 800163e:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001640:	2300      	movs	r3, #0
 8001642:	930a      	str	r3, [sp, #40]	@ 0x28
 8001644:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001646:	930c      	str	r3, [sp, #48]	@ 0x30
 8001648:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164a:	9308      	str	r3, [sp, #32]
 800164c:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	9303      	str	r3, [sp, #12]
 8001654:	9304      	str	r3, [sp, #16]
 8001656:	9305      	str	r3, [sp, #20]
 8001658:	9306      	str	r3, [sp, #24]
 800165a:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 800165c:	482a      	ldr	r0, [pc, #168]	@ (8001708 <MX_TIM3_Init+0xcc>)
 800165e:	4a2b      	ldr	r2, [pc, #172]	@ (800170c <MX_TIM3_Init+0xd0>)
 8001660:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 3200;
 8001662:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001666:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 256-1;
 800166a:	22ff      	movs	r2, #255	@ 0xff
 800166c:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166e:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001670:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001672:	f000 fffd 	bl	8002670 <HAL_TIM_Base_Init>
 8001676:	2800      	cmp	r0, #0
 8001678:	d131      	bne.n	80016de <MX_TIM3_Init+0xa2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800167e:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001680:	a90a      	add	r1, sp, #40	@ 0x28
 8001682:	4821      	ldr	r0, [pc, #132]	@ (8001708 <MX_TIM3_Init+0xcc>)
 8001684:	f001 f8f5 	bl	8002872 <HAL_TIM_ConfigClockSource>
 8001688:	bb60      	cbnz	r0, 80016e4 <MX_TIM3_Init+0xa8>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800168a:	481f      	ldr	r0, [pc, #124]	@ (8001708 <MX_TIM3_Init+0xcc>)
 800168c:	f001 f81c 	bl	80026c8 <HAL_TIM_PWM_Init>
 8001690:	bb58      	cbnz	r0, 80016ea <MX_TIM3_Init+0xae>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001698:	a908      	add	r1, sp, #32
 800169a:	481b      	ldr	r0, [pc, #108]	@ (8001708 <MX_TIM3_Init+0xcc>)
 800169c:	f001 f9f0 	bl	8002a80 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	bb30      	cbnz	r0, 80016f0 <MX_TIM3_Init+0xb4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a2:	2360      	movs	r3, #96	@ 0x60
 80016a4:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80016a6:	2200      	movs	r2, #0
 80016a8:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016aa:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ac:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ae:	a901      	add	r1, sp, #4
 80016b0:	4815      	ldr	r0, [pc, #84]	@ (8001708 <MX_TIM3_Init+0xcc>)
 80016b2:	f001 f863 	bl	800277c <HAL_TIM_PWM_ConfigChannel>
 80016b6:	b9f0      	cbnz	r0, 80016f6 <MX_TIM3_Init+0xba>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016b8:	2204      	movs	r2, #4
 80016ba:	eb0d 0102 	add.w	r1, sp, r2
 80016be:	4812      	ldr	r0, [pc, #72]	@ (8001708 <MX_TIM3_Init+0xcc>)
 80016c0:	f001 f85c 	bl	800277c <HAL_TIM_PWM_ConfigChannel>
 80016c4:	b9d0      	cbnz	r0, 80016fc <MX_TIM3_Init+0xc0>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016c6:	2208      	movs	r2, #8
 80016c8:	a901      	add	r1, sp, #4
 80016ca:	480f      	ldr	r0, [pc, #60]	@ (8001708 <MX_TIM3_Init+0xcc>)
 80016cc:	f001 f856 	bl	800277c <HAL_TIM_PWM_ConfigChannel>
 80016d0:	b9b8      	cbnz	r0, 8001702 <MX_TIM3_Init+0xc6>
  HAL_TIM_MspPostInit(&htim3);
 80016d2:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MX_TIM3_Init+0xcc>)
 80016d4:	f7ff ff72 	bl	80015bc <HAL_TIM_MspPostInit>
}
 80016d8:	b00f      	add	sp, #60	@ 0x3c
 80016da:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80016de:	f7ff fde3 	bl	80012a8 <Error_Handler>
 80016e2:	e7ca      	b.n	800167a <MX_TIM3_Init+0x3e>
    Error_Handler();
 80016e4:	f7ff fde0 	bl	80012a8 <Error_Handler>
 80016e8:	e7cf      	b.n	800168a <MX_TIM3_Init+0x4e>
    Error_Handler();
 80016ea:	f7ff fddd 	bl	80012a8 <Error_Handler>
 80016ee:	e7d0      	b.n	8001692 <MX_TIM3_Init+0x56>
    Error_Handler();
 80016f0:	f7ff fdda 	bl	80012a8 <Error_Handler>
 80016f4:	e7d5      	b.n	80016a2 <MX_TIM3_Init+0x66>
    Error_Handler();
 80016f6:	f7ff fdd7 	bl	80012a8 <Error_Handler>
 80016fa:	e7dd      	b.n	80016b8 <MX_TIM3_Init+0x7c>
    Error_Handler();
 80016fc:	f7ff fdd4 	bl	80012a8 <Error_Handler>
 8001700:	e7e1      	b.n	80016c6 <MX_TIM3_Init+0x8a>
    Error_Handler();
 8001702:	f7ff fdd1 	bl	80012a8 <Error_Handler>
 8001706:	e7e4      	b.n	80016d2 <MX_TIM3_Init+0x96>
 8001708:	200000d8 	.word	0x200000d8
 800170c:	40000400 	.word	0x40000400

08001710 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001710:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001712:	480a      	ldr	r0, [pc, #40]	@ (800173c <MX_USART1_UART_Init+0x2c>)
 8001714:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <MX_USART1_UART_Init+0x30>)
 8001716:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8001718:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800171c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	2300      	movs	r3, #0
 8001720:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001722:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001724:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001726:	220c      	movs	r2, #12
 8001728:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172e:	f001 fb10 	bl	8002d52 <HAL_UART_Init>
 8001732:	b900      	cbnz	r0, 8001736 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001734:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001736:	f7ff fdb7 	bl	80012a8 <Error_Handler>
}
 800173a:	e7fb      	b.n	8001734 <MX_USART1_UART_Init+0x24>
 800173c:	20000168 	.word	0x20000168
 8001740:	40011000 	.word	0x40011000

08001744 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001744:	b510      	push	{r4, lr}
 8001746:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	2300      	movs	r3, #0
 800174a:	9303      	str	r3, [sp, #12]
 800174c:	9304      	str	r3, [sp, #16]
 800174e:	9305      	str	r3, [sp, #20]
 8001750:	9306      	str	r3, [sp, #24]
 8001752:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8001754:	6802      	ldr	r2, [r0, #0]
 8001756:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800175a:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800175e:	429a      	cmp	r2, r3
 8001760:	d001      	beq.n	8001766 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001762:	b008      	add	sp, #32
 8001764:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001766:	2400      	movs	r4, #0
 8001768:	9401      	str	r4, [sp, #4]
 800176a:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 800176e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001770:	f042 0210 	orr.w	r2, r2, #16
 8001774:	645a      	str	r2, [r3, #68]	@ 0x44
 8001776:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001778:	f002 0210 	and.w	r2, r2, #16
 800177c:	9201      	str	r2, [sp, #4]
 800177e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	9402      	str	r4, [sp, #8]
 8001782:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	631a      	str	r2, [r3, #48]	@ 0x30
 800178a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001794:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001798:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017a2:	2307      	movs	r3, #7
 80017a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	a903      	add	r1, sp, #12
 80017a8:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <HAL_UART_MspInit+0x7c>)
 80017aa:	f000 f927 	bl	80019fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80017ae:	4622      	mov	r2, r4
 80017b0:	2105      	movs	r1, #5
 80017b2:	2025      	movs	r0, #37	@ 0x25
 80017b4:	f000 f8b0 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017b8:	2025      	movs	r0, #37	@ 0x25
 80017ba:	f000 f8bd 	bl	8001938 <HAL_NVIC_EnableIRQ>
}
 80017be:	e7d0      	b.n	8001762 <HAL_UART_MspInit+0x1e>
 80017c0:	40020000 	.word	0x40020000

080017c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017c8:	f7ff fe7c 	bl	80014c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017cc:	480c      	ldr	r0, [pc, #48]	@ (8001800 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ce:	490d      	ldr	r1, [pc, #52]	@ (8001804 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001810 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80017f2:	f003 fbeb 	bl	8004fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f6:	f7ff fdaf 	bl	8001358 <main>
  bx  lr    
 80017fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001804:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001808:	08005418 	.word	0x08005418
  ldr r2, =_sbss
 800180c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001810:	20004cdc 	.word	0x20004cdc

08001814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001814:	e7fe      	b.n	8001814 <ADC_IRQHandler>
	...

08001818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001818:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800181a:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <HAL_Init+0x30>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001822:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800182a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001832:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f85d 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	200f      	movs	r0, #15
 800183c:	f7ff fdd6 	bl	80013ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7ff fdb2 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001844:	2000      	movs	r0, #0
 8001846:	bd08      	pop	{r3, pc}
 8001848:	40023c00 	.word	0x40023c00

0800184c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800184c:	4a03      	ldr	r2, [pc, #12]	@ (800185c <HAL_IncTick+0x10>)
 800184e:	6811      	ldr	r1, [r2, #0]
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <HAL_IncTick+0x14>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	440b      	add	r3, r1
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	200001b0 	.word	0x200001b0
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001864:	4b01      	ldr	r3, [pc, #4]	@ (800186c <HAL_GetTick+0x8>)
 8001866:	6818      	ldr	r0, [r3, #0]
}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	200001b0 	.word	0x200001b0

08001870 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001870:	2800      	cmp	r0, #0
 8001872:	db07      	blt.n	8001884 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001874:	f000 021f 	and.w	r2, r0, #31
 8001878:	0940      	lsrs	r0, r0, #5
 800187a:	2301      	movs	r3, #1
 800187c:	4093      	lsls	r3, r2
 800187e:	4a02      	ldr	r2, [pc, #8]	@ (8001888 <__NVIC_EnableIRQ+0x18>)
 8001880:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800188c:	2800      	cmp	r0, #0
 800188e:	db08      	blt.n	80018a2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	0109      	lsls	r1, r1, #4
 8001892:	b2c9      	uxtb	r1, r1
 8001894:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001898:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800189c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80018a0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a2:	f000 000f 	and.w	r0, r0, #15
 80018a6:	0109      	lsls	r1, r1, #4
 80018a8:	b2c9      	uxtb	r1, r1
 80018aa:	4b01      	ldr	r3, [pc, #4]	@ (80018b0 <__NVIC_SetPriority+0x24>)
 80018ac:	5419      	strb	r1, [r3, r0]
  }
}
 80018ae:	4770      	bx	lr
 80018b0:	e000ed14 	.word	0xe000ed14

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ba:	f1c0 0c07 	rsb	ip, r0, #7
 80018be:	f1bc 0f04 	cmp.w	ip, #4
 80018c2:	bf28      	it	cs
 80018c4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c8:	1d03      	adds	r3, r0, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d90f      	bls.n	80018ee <NVIC_EncodePriority+0x3a>
 80018ce:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 3eff 	mov.w	lr, #4294967295
 80018d4:	fa0e f00c 	lsl.w	r0, lr, ip
 80018d8:	ea21 0100 	bic.w	r1, r1, r0
 80018dc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018de:	fa0e fe03 	lsl.w	lr, lr, r3
 80018e2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80018e6:	ea41 0002 	orr.w	r0, r1, r2
 80018ea:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	2300      	movs	r3, #0
 80018f0:	e7ee      	b.n	80018d0 <NVIC_EncodePriority+0x1c>
	...

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4a07      	ldr	r2, [pc, #28]	@ (8001914 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80018f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018fc:	041b      	lsls	r3, r3, #16
 80018fe:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	0200      	lsls	r0, r0, #8
 8001902:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001906:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001910:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001918:	b510      	push	{r4, lr}
 800191a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <HAL_NVIC_SetPriority+0x1c>)
 800191e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001920:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001924:	f7ff ffc6 	bl	80018b4 <NVIC_EncodePriority>
 8001928:	4601      	mov	r1, r0
 800192a:	4620      	mov	r0, r4
 800192c:	f7ff ffae 	bl	800188c <__NVIC_SetPriority>
}
 8001930:	bd10      	pop	{r4, pc}
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193a:	f7ff ff99 	bl	8001870 <__NVIC_EnableIRQ>
}
 800193e:	bd08      	pop	{r3, pc}

08001940 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001940:	b570      	push	{r4, r5, r6, lr}
 8001942:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001944:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8001946:	f7ff ff8d 	bl	8001864 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800194a:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d006      	beq.n	8001962 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001954:	2380      	movs	r3, #128	@ 0x80
 8001956:	6563      	str	r3, [r4, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001958:	2300      	movs	r3, #0
 800195a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    
    return HAL_ERROR;
 800195e:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8001960:	bd70      	pop	{r4, r5, r6, pc}
 8001962:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001964:	6822      	ldr	r2, [r4, #0]
 8001966:	6813      	ldr	r3, [r2, #0]
 8001968:	f023 0316 	bic.w	r3, r3, #22
 800196c:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800196e:	6822      	ldr	r2, [r4, #0]
 8001970:	6953      	ldr	r3, [r2, #20]
 8001972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001976:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001978:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800197a:	b1e3      	cbz	r3, 80019b6 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800197c:	6822      	ldr	r2, [r4, #0]
 800197e:	6813      	ldr	r3, [r2, #0]
 8001980:	f023 0308 	bic.w	r3, r3, #8
 8001984:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	6813      	ldr	r3, [r2, #0]
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f013 0f01 	tst.w	r3, #1
 8001998:	d011      	beq.n	80019be <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800199a:	f7ff ff63 	bl	8001864 <HAL_GetTick>
 800199e:	1b43      	subs	r3, r0, r5
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d9f5      	bls.n	8001990 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019a4:	2320      	movs	r3, #32
 80019a6:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019a8:	2003      	movs	r0, #3
 80019aa:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80019ae:	2300      	movs	r3, #0
 80019b0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 80019b4:	e7d4      	b.n	8001960 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019b6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1df      	bne.n	800197c <HAL_DMA_Abort+0x3c>
 80019bc:	e7e3      	b.n	8001986 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019be:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80019c0:	233f      	movs	r3, #63	@ 0x3f
 80019c2:	4093      	lsls	r3, r2
 80019c4:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 80019d2:	e7c5      	b.n	8001960 <HAL_DMA_Abort+0x20>

080019d4 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d4:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d003      	beq.n	80019e6 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019de:	2380      	movs	r3, #128	@ 0x80
 80019e0:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80019e2:	2001      	movs	r0, #1
 80019e4:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019e6:	2305      	movs	r3, #5
 80019e8:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019ec:	6802      	ldr	r2, [r0, #0]
 80019ee:	6813      	ldr	r3, [r2, #0]
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80019f6:	2000      	movs	r0, #0
}
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	f200 80d7 	bhi.w	8001bb2 <HAL_GPIO_Init+0x1b6>
{
 8001a04:	b570      	push	{r4, r5, r6, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	e065      	b.n	8001ad6 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a0c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001a10:	2403      	movs	r4, #3
 8001a12:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a16:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1a:	68cc      	ldr	r4, [r1, #12]
 8001a1c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a20:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001a22:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a24:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a26:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2a:	684a      	ldr	r2, [r1, #4]
 8001a2c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001a30:	409a      	lsls	r2, r3
 8001a32:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001a34:	6042      	str	r2, [r0, #4]
 8001a36:	e05c      	b.n	8001af2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a38:	08dc      	lsrs	r4, r3, #3
 8001a3a:	3408      	adds	r4, #8
 8001a3c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a40:	f003 0507 	and.w	r5, r3, #7
 8001a44:	00ad      	lsls	r5, r5, #2
 8001a46:	f04f 0e0f 	mov.w	lr, #15
 8001a4a:	fa0e fe05 	lsl.w	lr, lr, r5
 8001a4e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a52:	690a      	ldr	r2, [r1, #16]
 8001a54:	40aa      	lsls	r2, r5
 8001a56:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001a5a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001a5e:	e05c      	b.n	8001b1a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a60:	2204      	movs	r2, #4
 8001a62:	e000      	b.n	8001a66 <HAL_GPIO_Init+0x6a>
 8001a64:	2200      	movs	r2, #0
 8001a66:	fa02 f20e 	lsl.w	r2, r2, lr
 8001a6a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a6c:	3402      	adds	r4, #2
 8001a6e:	4d51      	ldr	r5, [pc, #324]	@ (8001bb4 <HAL_GPIO_Init+0x1b8>)
 8001a70:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a74:	4a50      	ldr	r2, [pc, #320]	@ (8001bb8 <HAL_GPIO_Init+0x1bc>)
 8001a76:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	ea6f 020c 	mvn.w	r2, ip
 8001a7c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a80:	684e      	ldr	r6, [r1, #4]
 8001a82:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001a86:	d001      	beq.n	8001a8c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001a88:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001a8c:	4c4a      	ldr	r4, [pc, #296]	@ (8001bb8 <HAL_GPIO_Init+0x1bc>)
 8001a8e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001a90:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a96:	684e      	ldr	r6, [r1, #4]
 8001a98:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001a9c:	d001      	beq.n	8001aa2 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001a9e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001aa2:	4c45      	ldr	r4, [pc, #276]	@ (8001bb8 <HAL_GPIO_Init+0x1bc>)
 8001aa4:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001aa6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aac:	684e      	ldr	r6, [r1, #4]
 8001aae:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001ab2:	d001      	beq.n	8001ab8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001ab4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001ab8:	4c3f      	ldr	r4, [pc, #252]	@ (8001bb8 <HAL_GPIO_Init+0x1bc>)
 8001aba:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001abc:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001abe:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac0:	684d      	ldr	r5, [r1, #4]
 8001ac2:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001ac6:	d001      	beq.n	8001acc <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001ac8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001acc:	4c3a      	ldr	r4, [pc, #232]	@ (8001bb8 <HAL_GPIO_Init+0x1bc>)
 8001ace:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	2b0f      	cmp	r3, #15
 8001ad4:	d86b      	bhi.n	8001bae <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ada:	680c      	ldr	r4, [r1, #0]
 8001adc:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001ae0:	ea32 0404 	bics.w	r4, r2, r4
 8001ae4:	d1f4      	bne.n	8001ad0 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae6:	684c      	ldr	r4, [r1, #4]
 8001ae8:	f004 0403 	and.w	r4, r4, #3
 8001aec:	3c01      	subs	r4, #1
 8001aee:	2c01      	cmp	r4, #1
 8001af0:	d98b      	bls.n	8001a0a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af2:	684a      	ldr	r2, [r1, #4]
 8001af4:	f002 0203 	and.w	r2, r2, #3
 8001af8:	2a03      	cmp	r2, #3
 8001afa:	d009      	beq.n	8001b10 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001afc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afe:	005d      	lsls	r5, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	40aa      	lsls	r2, r5
 8001b04:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b08:	688a      	ldr	r2, [r1, #8]
 8001b0a:	40aa      	lsls	r2, r5
 8001b0c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001b0e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b10:	684a      	ldr	r2, [r1, #4]
 8001b12:	f002 0203 	and.w	r2, r2, #3
 8001b16:	2a02      	cmp	r2, #2
 8001b18:	d08e      	beq.n	8001a38 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001b1a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b1c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f20e 	lsl.w	r2, r2, lr
 8001b26:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2a:	684a      	ldr	r2, [r1, #4]
 8001b2c:	f002 0203 	and.w	r2, r2, #3
 8001b30:	fa02 f20e 	lsl.w	r2, r2, lr
 8001b34:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001b36:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b38:	684a      	ldr	r2, [r1, #4]
 8001b3a:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001b3e:	d0c7      	beq.n	8001ad0 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b40:	2200      	movs	r2, #0
 8001b42:	9201      	str	r2, [sp, #4]
 8001b44:	4a1d      	ldr	r2, [pc, #116]	@ (8001bbc <HAL_GPIO_Init+0x1c0>)
 8001b46:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001b48:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001b4c:	6454      	str	r4, [r2, #68]	@ 0x44
 8001b4e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b50:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001b54:	9201      	str	r2, [sp, #4]
 8001b56:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001b58:	089c      	lsrs	r4, r3, #2
 8001b5a:	1ca5      	adds	r5, r4, #2
 8001b5c:	4a15      	ldr	r2, [pc, #84]	@ (8001bb4 <HAL_GPIO_Init+0x1b8>)
 8001b5e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b62:	f003 0e03 	and.w	lr, r3, #3
 8001b66:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001b70:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b74:	4a12      	ldr	r2, [pc, #72]	@ (8001bc0 <HAL_GPIO_Init+0x1c4>)
 8001b76:	4290      	cmp	r0, r2
 8001b78:	f43f af74 	beq.w	8001a64 <HAL_GPIO_Init+0x68>
 8001b7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b80:	4290      	cmp	r0, r2
 8001b82:	d00e      	beq.n	8001ba2 <HAL_GPIO_Init+0x1a6>
 8001b84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b88:	4290      	cmp	r0, r2
 8001b8a:	d00c      	beq.n	8001ba6 <HAL_GPIO_Init+0x1aa>
 8001b8c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b90:	4290      	cmp	r0, r2
 8001b92:	d00a      	beq.n	8001baa <HAL_GPIO_Init+0x1ae>
 8001b94:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b98:	4290      	cmp	r0, r2
 8001b9a:	f43f af61 	beq.w	8001a60 <HAL_GPIO_Init+0x64>
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	e761      	b.n	8001a66 <HAL_GPIO_Init+0x6a>
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	e75f      	b.n	8001a66 <HAL_GPIO_Init+0x6a>
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	e75d      	b.n	8001a66 <HAL_GPIO_Init+0x6a>
 8001baa:	2203      	movs	r2, #3
 8001bac:	e75b      	b.n	8001a66 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001bae:	b002      	add	sp, #8
 8001bb0:	bd70      	pop	{r4, r5, r6, pc}
 8001bb2:	4770      	bx	lr
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40013c00 	.word	0x40013c00
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020000 	.word	0x40020000

08001bc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc4:	b10a      	cbz	r2, 8001bca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc6:	6181      	str	r1, [r0, #24]
 8001bc8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bca:	0409      	lsls	r1, r1, #16
 8001bcc:	6181      	str	r1, [r0, #24]
  }
}
 8001bce:	4770      	bx	lr

08001bd0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	f000 81e0 	beq.w	8001f96 <HAL_RCC_OscConfig+0x3c6>
{
 8001bd6:	b570      	push	{r4, r5, r6, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bdc:	6803      	ldr	r3, [r0, #0]
 8001bde:	f013 0f01 	tst.w	r3, #1
 8001be2:	d03b      	beq.n	8001c5c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001be4:	4b9f      	ldr	r3, [pc, #636]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d02c      	beq.n	8001c4a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf0:	4b9c      	ldr	r3, [pc, #624]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d021      	beq.n	8001c40 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfc:	6863      	ldr	r3, [r4, #4]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c02:	d04f      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c08:	d052      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xe0>
 8001c0a:	4b96      	ldr	r3, [pc, #600]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c1c:	6863      	ldr	r3, [r4, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d050      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fe1f 	bl	8001864 <HAL_GetTick>
 8001c26:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c28:	4b8e      	ldr	r3, [pc, #568]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001c30:	d114      	bne.n	8001c5c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c32:	f7ff fe17 	bl	8001864 <HAL_GetTick>
 8001c36:	1b40      	subs	r0, r0, r5
 8001c38:	2864      	cmp	r0, #100	@ 0x64
 8001c3a:	d9f5      	bls.n	8001c28 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	e1b1      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c40:	4b88      	ldr	r3, [pc, #544]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001c48:	d0d8      	beq.n	8001bfc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4a:	4b86      	ldr	r3, [pc, #536]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001c52:	d003      	beq.n	8001c5c <HAL_RCC_OscConfig+0x8c>
 8001c54:	6863      	ldr	r3, [r4, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 819f 	beq.w	8001f9a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	f013 0f02 	tst.w	r3, #2
 8001c62:	d054      	beq.n	8001d0e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c64:	4b7f      	ldr	r3, [pc, #508]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f013 0f0c 	tst.w	r3, #12
 8001c6c:	d03e      	beq.n	8001cec <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6e:	4b7d      	ldr	r3, [pc, #500]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d033      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c7a:	68e3      	ldr	r3, [r4, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d068      	beq.n	8001d52 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c80:	4b79      	ldr	r3, [pc, #484]	@ (8001e68 <HAL_RCC_OscConfig+0x298>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7ff fded 	bl	8001864 <HAL_GetTick>
 8001c8a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	4b75      	ldr	r3, [pc, #468]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f013 0f02 	tst.w	r3, #2
 8001c94:	d154      	bne.n	8001d40 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c96:	f7ff fde5 	bl	8001864 <HAL_GetTick>
 8001c9a:	1b40      	subs	r0, r0, r5
 8001c9c:	2802      	cmp	r0, #2
 8001c9e:	d9f5      	bls.n	8001c8c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	e17f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca4:	4a6f      	ldr	r2, [pc, #444]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001ca6:	6813      	ldr	r3, [r2, #0]
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e7b5      	b.n	8001c1c <HAL_RCC_OscConfig+0x4c>
 8001cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e7ab      	b.n	8001c1c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fdce 	bl	8001864 <HAL_GetTick>
 8001cc8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	4b66      	ldr	r3, [pc, #408]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001cd2:	d0c3      	beq.n	8001c5c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7ff fdc6 	bl	8001864 <HAL_GetTick>
 8001cd8:	1b40      	subs	r0, r0, r5
 8001cda:	2864      	cmp	r0, #100	@ 0x64
 8001cdc:	d9f5      	bls.n	8001cca <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001cde:	2003      	movs	r0, #3
 8001ce0:	e160      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce2:	4b60      	ldr	r3, [pc, #384]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001cea:	d1c6      	bne.n	8001c7a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cec:	4b5d      	ldr	r3, [pc, #372]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f013 0f02 	tst.w	r3, #2
 8001cf4:	d003      	beq.n	8001cfe <HAL_RCC_OscConfig+0x12e>
 8001cf6:	68e3      	ldr	r3, [r4, #12]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	f040 8150 	bne.w	8001f9e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfe:	4a59      	ldr	r2, [pc, #356]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001d00:	6813      	ldr	r3, [r2, #0]
 8001d02:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001d06:	6921      	ldr	r1, [r4, #16]
 8001d08:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d0c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	f013 0f08 	tst.w	r3, #8
 8001d14:	d042      	beq.n	8001d9c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d16:	6963      	ldr	r3, [r4, #20]
 8001d18:	b36b      	cbz	r3, 8001d76 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1a:	4b53      	ldr	r3, [pc, #332]	@ (8001e68 <HAL_RCC_OscConfig+0x298>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d22:	f7ff fd9f 	bl	8001864 <HAL_GetTick>
 8001d26:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d28:	4b4e      	ldr	r3, [pc, #312]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d2c:	f013 0f02 	tst.w	r3, #2
 8001d30:	d134      	bne.n	8001d9c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d32:	f7ff fd97 	bl	8001864 <HAL_GetTick>
 8001d36:	1b40      	subs	r0, r0, r5
 8001d38:	2802      	cmp	r0, #2
 8001d3a:	d9f5      	bls.n	8001d28 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	e131      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d40:	4a48      	ldr	r2, [pc, #288]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001d42:	6813      	ldr	r3, [r2, #0]
 8001d44:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001d48:	6921      	ldr	r1, [r4, #16]
 8001d4a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e7dd      	b.n	8001d0e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b45      	ldr	r3, [pc, #276]	@ (8001e68 <HAL_RCC_OscConfig+0x298>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d58:	f7ff fd84 	bl	8001864 <HAL_GetTick>
 8001d5c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	4b41      	ldr	r3, [pc, #260]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f013 0f02 	tst.w	r3, #2
 8001d66:	d0d2      	beq.n	8001d0e <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d68:	f7ff fd7c 	bl	8001864 <HAL_GetTick>
 8001d6c:	1b40      	subs	r0, r0, r5
 8001d6e:	2802      	cmp	r0, #2
 8001d70:	d9f5      	bls.n	8001d5e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001d72:	2003      	movs	r0, #3
 8001d74:	e116      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d76:	4b3c      	ldr	r3, [pc, #240]	@ (8001e68 <HAL_RCC_OscConfig+0x298>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff fd71 	bl	8001864 <HAL_GetTick>
 8001d82:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d84:	4b37      	ldr	r3, [pc, #220]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d88:	f013 0f02 	tst.w	r3, #2
 8001d8c:	d006      	beq.n	8001d9c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fd69 	bl	8001864 <HAL_GetTick>
 8001d92:	1b40      	subs	r0, r0, r5
 8001d94:	2802      	cmp	r0, #2
 8001d96:	d9f5      	bls.n	8001d84 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001d98:	2003      	movs	r0, #3
 8001d9a:	e103      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	f013 0f04 	tst.w	r3, #4
 8001da2:	d077      	beq.n	8001e94 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001dac:	d133      	bne.n	8001e16 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001db6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	9301      	str	r3, [sp, #4]
 8001dc4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001dc6:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <HAL_RCC_OscConfig+0x29c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001dd0:	d023      	beq.n	8001e1a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd2:	68a3      	ldr	r3, [r4, #8]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d034      	beq.n	8001e42 <HAL_RCC_OscConfig+0x272>
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d038      	beq.n	8001e4e <HAL_RCC_OscConfig+0x27e>
 8001ddc:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001dde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	671a      	str	r2, [r3, #112]	@ 0x70
 8001de6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001de8:	f022 0204 	bic.w	r2, r2, #4
 8001dec:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dee:	68a3      	ldr	r3, [r4, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d03d      	beq.n	8001e70 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7ff fd36 	bl	8001864 <HAL_GetTick>
 8001df8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfe:	f013 0f02 	tst.w	r3, #2
 8001e02:	d146      	bne.n	8001e92 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e04:	f7ff fd2e 	bl	8001864 <HAL_GetTick>
 8001e08:	1b80      	subs	r0, r0, r6
 8001e0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001e0e:	4298      	cmp	r0, r3
 8001e10:	d9f3      	bls.n	8001dfa <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001e12:	2003      	movs	r0, #3
 8001e14:	e0c6      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001e16:	2500      	movs	r5, #0
 8001e18:	e7d6      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e1a:	4a14      	ldr	r2, [pc, #80]	@ (8001e6c <HAL_RCC_OscConfig+0x29c>)
 8001e1c:	6813      	ldr	r3, [r2, #0]
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e22:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001e24:	f7ff fd1e 	bl	8001864 <HAL_GetTick>
 8001e28:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <HAL_RCC_OscConfig+0x29c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001e32:	d1ce      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e34:	f7ff fd16 	bl	8001864 <HAL_GetTick>
 8001e38:	1b80      	subs	r0, r0, r6
 8001e3a:	2802      	cmp	r0, #2
 8001e3c:	d9f5      	bls.n	8001e2a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001e3e:	2003      	movs	r0, #3
 8001e40:	e0b0      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e42:	4a08      	ldr	r2, [pc, #32]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001e44:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e4c:	e7cf      	b.n	8001dee <HAL_RCC_OscConfig+0x21e>
 8001e4e:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <HAL_RCC_OscConfig+0x294>)
 8001e50:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e52:	f042 0204 	orr.w	r2, r2, #4
 8001e56:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e58:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e60:	e7c5      	b.n	8001dee <HAL_RCC_OscConfig+0x21e>
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	42470000 	.word	0x42470000
 8001e6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7ff fcf8 	bl	8001864 <HAL_GetTick>
 8001e74:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e76:	4b52      	ldr	r3, [pc, #328]	@ (8001fc0 <HAL_RCC_OscConfig+0x3f0>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7a:	f013 0f02 	tst.w	r3, #2
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7ff fcf0 	bl	8001864 <HAL_GetTick>
 8001e84:	1b80      	subs	r0, r0, r6
 8001e86:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001e8a:	4298      	cmp	r0, r3
 8001e8c:	d9f3      	bls.n	8001e76 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001e8e:	2003      	movs	r0, #3
 8001e90:	e088      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e92:	b9ed      	cbnz	r5, 8001ed0 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e94:	69a3      	ldr	r3, [r4, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8083 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e9c:	4a48      	ldr	r2, [pc, #288]	@ (8001fc0 <HAL_RCC_OscConfig+0x3f0>)
 8001e9e:	6892      	ldr	r2, [r2, #8]
 8001ea0:	f002 020c 	and.w	r2, r2, #12
 8001ea4:	2a08      	cmp	r2, #8
 8001ea6:	d051      	beq.n	8001f4c <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d017      	beq.n	8001edc <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eac:	4b45      	ldr	r3, [pc, #276]	@ (8001fc4 <HAL_RCC_OscConfig+0x3f4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fcd7 	bl	8001864 <HAL_GetTick>
 8001eb6:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb8:	4b41      	ldr	r3, [pc, #260]	@ (8001fc0 <HAL_RCC_OscConfig+0x3f0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001ec0:	d042      	beq.n	8001f48 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff fccf 	bl	8001864 <HAL_GetTick>
 8001ec6:	1b00      	subs	r0, r0, r4
 8001ec8:	2802      	cmp	r0, #2
 8001eca:	d9f5      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ecc:	2003      	movs	r0, #3
 8001ece:	e069      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4a3b      	ldr	r2, [pc, #236]	@ (8001fc0 <HAL_RCC_OscConfig+0x3f0>)
 8001ed2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eda:	e7db      	b.n	8001e94 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001edc:	4b39      	ldr	r3, [pc, #228]	@ (8001fc4 <HAL_RCC_OscConfig+0x3f4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fcbf 	bl	8001864 <HAL_GetTick>
 8001ee6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee8:	4b35      	ldr	r3, [pc, #212]	@ (8001fc0 <HAL_RCC_OscConfig+0x3f0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001ef0:	d006      	beq.n	8001f00 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff fcb7 	bl	8001864 <HAL_GetTick>
 8001ef6:	1b40      	subs	r0, r0, r5
 8001ef8:	2802      	cmp	r0, #2
 8001efa:	d9f5      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001efc:	2003      	movs	r0, #3
 8001efe:	e051      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f00:	69e3      	ldr	r3, [r4, #28]
 8001f02:	6a22      	ldr	r2, [r4, #32]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001f08:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f0c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001f0e:	0852      	lsrs	r2, r2, #1
 8001f10:	3a01      	subs	r2, #1
 8001f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001f16:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001f18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f1c:	4a28      	ldr	r2, [pc, #160]	@ (8001fc0 <HAL_RCC_OscConfig+0x3f0>)
 8001f1e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f20:	4b28      	ldr	r3, [pc, #160]	@ (8001fc4 <HAL_RCC_OscConfig+0x3f4>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001f26:	f7ff fc9d 	bl	8001864 <HAL_GetTick>
 8001f2a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2c:	4b24      	ldr	r3, [pc, #144]	@ (8001fc0 <HAL_RCC_OscConfig+0x3f0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001f34:	d106      	bne.n	8001f44 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff fc95 	bl	8001864 <HAL_GetTick>
 8001f3a:	1b00      	subs	r0, r0, r4
 8001f3c:	2802      	cmp	r0, #2
 8001f3e:	d9f5      	bls.n	8001f2c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001f40:	2003      	movs	r0, #3
 8001f42:	e02f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001f44:	2000      	movs	r0, #0
 8001f46:	e02d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
 8001f48:	2000      	movs	r0, #0
 8001f4a:	e02b      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d02b      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <HAL_RCC_OscConfig+0x3f0>)
 8001f52:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f54:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001f58:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5a:	4291      	cmp	r1, r2
 8001f5c:	d126      	bne.n	8001fac <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f62:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f64:	428a      	cmp	r2, r1
 8001f66:	d123      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f6a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001f6e:	401a      	ands	r2, r3
 8001f70:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001f74:	d11e      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f76:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001f7a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001f7c:	0852      	lsrs	r2, r2, #1
 8001f7e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f80:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001f84:	d118      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f86:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001f8a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f8c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001f90:	d114      	bne.n	8001fbc <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001f92:	2000      	movs	r0, #0
 8001f94:	e006      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001f96:	2001      	movs	r0, #1
}
 8001f98:	4770      	bx	lr
        return HAL_ERROR;
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	e002      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001fa2:	2000      	movs	r0, #0
}
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001fa8:	2001      	movs	r0, #1
 8001faa:	e7fb      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001fac:	2001      	movs	r0, #1
 8001fae:	e7f9      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	e7f7      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	e7f5      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
 8001fb8:	2001      	movs	r0, #1
 8001fba:	e7f3      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	e7f1      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	42470000 	.word	0x42470000

08001fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc8:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fca:	4b33      	ldr	r3, [pc, #204]	@ (8002098 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d05b      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0xc6>
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d15b      	bne.n	8002092 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fda:	4b2f      	ldr	r3, [pc, #188]	@ (8002098 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001fe8:	d02c      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fea:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fec:	6858      	ldr	r0, [r3, #4]
 8001fee:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001ff2:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001ff6:	ebbc 0c00 	subs.w	ip, ip, r0
 8001ffa:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001ffe:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002002:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002006:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800200a:	ebb1 010c 	subs.w	r1, r1, ip
 800200e:	eb63 030e 	sbc.w	r3, r3, lr
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002018:	00c9      	lsls	r1, r1, #3
 800201a:	eb11 0c00 	adds.w	ip, r1, r0
 800201e:	f143 0300 	adc.w	r3, r3, #0
 8002022:	0259      	lsls	r1, r3, #9
 8002024:	2300      	movs	r3, #0
 8002026:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800202a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800202e:	f7fe fdb3 	bl	8000b98 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800203a:	3301      	adds	r3, #1
 800203c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800203e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002042:	e027      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002044:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002046:	6858      	ldr	r0, [r3, #4]
 8002048:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800204c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002050:	ebbc 0c00 	subs.w	ip, ip, r0
 8002054:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002058:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800205c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002060:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002064:	ebb1 010c 	subs.w	r1, r1, ip
 8002068:	eb63 030e 	sbc.w	r3, r3, lr
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002072:	00c9      	lsls	r1, r1, #3
 8002074:	eb11 0c00 	adds.w	ip, r1, r0
 8002078:	f143 0300 	adc.w	r3, r3, #0
 800207c:	0299      	lsls	r1, r3, #10
 800207e:	2300      	movs	r3, #0
 8002080:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002084:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002088:	f7fe fd86 	bl	8000b98 <__aeabi_uldivmod>
 800208c:	e7d1      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800208e:	4803      	ldr	r0, [pc, #12]	@ (800209c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002090:	e000      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002092:	4803      	ldr	r0, [pc, #12]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002094:	bd08      	pop	{r3, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800
 800209c:	007a1200 	.word	0x007a1200
 80020a0:	00f42400 	.word	0x00f42400

080020a4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80020a4:	2800      	cmp	r0, #0
 80020a6:	f000 809b 	beq.w	80021e0 <HAL_RCC_ClockConfig+0x13c>
{
 80020aa:	b570      	push	{r4, r5, r6, lr}
 80020ac:	460d      	mov	r5, r1
 80020ae:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b4f      	ldr	r3, [pc, #316]	@ (80021f0 <HAL_RCC_ClockConfig+0x14c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	428b      	cmp	r3, r1
 80020ba:	d208      	bcs.n	80020ce <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020bc:	b2cb      	uxtb	r3, r1
 80020be:	4a4c      	ldr	r2, [pc, #304]	@ (80021f0 <HAL_RCC_ClockConfig+0x14c>)
 80020c0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c2:	6813      	ldr	r3, [r2, #0]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	428b      	cmp	r3, r1
 80020ca:	f040 808b 	bne.w	80021e4 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	f013 0f02 	tst.w	r3, #2
 80020d4:	d017      	beq.n	8002106 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d6:	f013 0f04 	tst.w	r3, #4
 80020da:	d004      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020dc:	4a45      	ldr	r2, [pc, #276]	@ (80021f4 <HAL_RCC_ClockConfig+0x150>)
 80020de:	6893      	ldr	r3, [r2, #8]
 80020e0:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020e4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	f013 0f08 	tst.w	r3, #8
 80020ec:	d004      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ee:	4a41      	ldr	r2, [pc, #260]	@ (80021f4 <HAL_RCC_ClockConfig+0x150>)
 80020f0:	6893      	ldr	r3, [r2, #8]
 80020f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020f6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4a3e      	ldr	r2, [pc, #248]	@ (80021f4 <HAL_RCC_ClockConfig+0x150>)
 80020fa:	6893      	ldr	r3, [r2, #8]
 80020fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002100:	68a1      	ldr	r1, [r4, #8]
 8002102:	430b      	orrs	r3, r1
 8002104:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	f013 0f01 	tst.w	r3, #1
 800210c:	d032      	beq.n	8002174 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210e:	6863      	ldr	r3, [r4, #4]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d021      	beq.n	8002158 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002114:	1e9a      	subs	r2, r3, #2
 8002116:	2a01      	cmp	r2, #1
 8002118:	d925      	bls.n	8002166 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211a:	4a36      	ldr	r2, [pc, #216]	@ (80021f4 <HAL_RCC_ClockConfig+0x150>)
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	f012 0f02 	tst.w	r2, #2
 8002122:	d061      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002124:	4933      	ldr	r1, [pc, #204]	@ (80021f4 <HAL_RCC_ClockConfig+0x150>)
 8002126:	688a      	ldr	r2, [r1, #8]
 8002128:	f022 0203 	bic.w	r2, r2, #3
 800212c:	4313      	orrs	r3, r2
 800212e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002130:	f7ff fb98 	bl	8001864 <HAL_GetTick>
 8002134:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	4b2f      	ldr	r3, [pc, #188]	@ (80021f4 <HAL_RCC_ClockConfig+0x150>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	6862      	ldr	r2, [r4, #4]
 8002140:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002144:	d016      	beq.n	8002174 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002146:	f7ff fb8d 	bl	8001864 <HAL_GetTick>
 800214a:	1b80      	subs	r0, r0, r6
 800214c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002150:	4298      	cmp	r0, r3
 8002152:	d9f0      	bls.n	8002136 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002154:	2003      	movs	r0, #3
 8002156:	e042      	b.n	80021de <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002158:	4a26      	ldr	r2, [pc, #152]	@ (80021f4 <HAL_RCC_ClockConfig+0x150>)
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002160:	d1e0      	bne.n	8002124 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002162:	2001      	movs	r0, #1
 8002164:	e03b      	b.n	80021de <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	4a23      	ldr	r2, [pc, #140]	@ (80021f4 <HAL_RCC_ClockConfig+0x150>)
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800216e:	d1d9      	bne.n	8002124 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002170:	2001      	movs	r0, #1
 8002172:	e034      	b.n	80021de <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002174:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <HAL_RCC_ClockConfig+0x14c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	42ab      	cmp	r3, r5
 800217e:	d907      	bls.n	8002190 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002180:	b2ea      	uxtb	r2, r5
 8002182:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <HAL_RCC_ClockConfig+0x14c>)
 8002184:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	42ab      	cmp	r3, r5
 800218e:	d12d      	bne.n	80021ec <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	f013 0f04 	tst.w	r3, #4
 8002196:	d006      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002198:	4a16      	ldr	r2, [pc, #88]	@ (80021f4 <HAL_RCC_ClockConfig+0x150>)
 800219a:	6893      	ldr	r3, [r2, #8]
 800219c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80021a0:	68e1      	ldr	r1, [r4, #12]
 80021a2:	430b      	orrs	r3, r1
 80021a4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	f013 0f08 	tst.w	r3, #8
 80021ac:	d007      	beq.n	80021be <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ae:	4a11      	ldr	r2, [pc, #68]	@ (80021f4 <HAL_RCC_ClockConfig+0x150>)
 80021b0:	6893      	ldr	r3, [r2, #8]
 80021b2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80021b6:	6921      	ldr	r1, [r4, #16]
 80021b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021bc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021be:	f7ff ff03 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 80021c2:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <HAL_RCC_ClockConfig+0x150>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021ca:	4a0b      	ldr	r2, [pc, #44]	@ (80021f8 <HAL_RCC_ClockConfig+0x154>)
 80021cc:	5cd3      	ldrb	r3, [r2, r3]
 80021ce:	40d8      	lsrs	r0, r3
 80021d0:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_RCC_ClockConfig+0x158>)
 80021d2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80021d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <HAL_RCC_ClockConfig+0x15c>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	f7ff f908 	bl	80013ec <HAL_InitTick>
  return HAL_OK;
 80021dc:	2000      	movs	r0, #0
}
 80021de:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80021e0:	2001      	movs	r0, #1
}
 80021e2:	4770      	bx	lr
      return HAL_ERROR;
 80021e4:	2001      	movs	r0, #1
 80021e6:	e7fa      	b.n	80021de <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80021e8:	2001      	movs	r0, #1
 80021ea:	e7f8      	b.n	80021de <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80021ec:	2001      	movs	r0, #1
 80021ee:	e7f6      	b.n	80021de <HAL_RCC_ClockConfig+0x13a>
 80021f0:	40023c00 	.word	0x40023c00
 80021f4:	40023800 	.word	0x40023800
 80021f8:	080053cc 	.word	0x080053cc
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000008 	.word	0x20000008

08002204 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002204:	4b01      	ldr	r3, [pc, #4]	@ (800220c <HAL_RCC_GetHCLKFreq+0x8>)
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000000 	.word	0x20000000

08002210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002210:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002212:	f7ff fff7 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002216:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800221e:	4a03      	ldr	r2, [pc, #12]	@ (800222c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
}
 8002222:	40d8      	lsrs	r0, r3
 8002224:	bd08      	pop	{r3, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	080053c4 	.word	0x080053c4

08002230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002230:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002232:	f7ff ffe7 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002236:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800223e:	4a03      	ldr	r2, [pc, #12]	@ (800224c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
}
 8002242:	40d8      	lsrs	r0, r3
 8002244:	bd08      	pop	{r3, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	080053c4 	.word	0x080053c4

08002250 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002250:	230f      	movs	r3, #15
 8002252:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002254:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_RCC_GetClockConfig+0x34>)
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	f002 0203 	and.w	r2, r2, #3
 800225c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002264:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 800226c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002276:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002278:	4b03      	ldr	r3, [pc, #12]	@ (8002288 <HAL_RCC_GetClockConfig+0x38>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	600b      	str	r3, [r1, #0]
}
 8002282:	4770      	bx	lr
 8002284:	40023800 	.word	0x40023800
 8002288:	40023c00 	.word	0x40023c00

0800228c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800228c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800228e:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002290:	6a03      	ldr	r3, [r0, #32]
 8002292:	f023 0301 	bic.w	r3, r3, #1
 8002296:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002298:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800229a:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800229c:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022a0:	680c      	ldr	r4, [r1, #0]
 80022a2:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022a4:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022a8:	688b      	ldr	r3, [r1, #8]
 80022aa:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022ac:	4a0b      	ldr	r2, [pc, #44]	@ (80022dc <TIM_OC1_SetConfig+0x50>)
 80022ae:	4290      	cmp	r0, r2
 80022b0:	d006      	beq.n	80022c0 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b2:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022b4:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022b6:	684a      	ldr	r2, [r1, #4]
 80022b8:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ba:	6203      	str	r3, [r0, #32]
}
 80022bc:	bc30      	pop	{r4, r5}
 80022be:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80022c0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80022c4:	68ca      	ldr	r2, [r1, #12]
 80022c6:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 80022c8:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022cc:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80022d0:	694a      	ldr	r2, [r1, #20]
 80022d2:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80022d4:	698d      	ldr	r5, [r1, #24]
 80022d6:	4315      	orrs	r5, r2
 80022d8:	e7eb      	b.n	80022b2 <TIM_OC1_SetConfig+0x26>
 80022da:	bf00      	nop
 80022dc:	40010000 	.word	0x40010000

080022e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022e0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022e4:	6a02      	ldr	r2, [r0, #32]
 80022e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022ea:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022ee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022f0:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022f4:	680d      	ldr	r5, [r1, #0]
 80022f6:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022fc:	688a      	ldr	r2, [r1, #8]
 80022fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002302:	4a0d      	ldr	r2, [pc, #52]	@ (8002338 <TIM_OC3_SetConfig+0x58>)
 8002304:	4290      	cmp	r0, r2
 8002306:	d006      	beq.n	8002316 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002308:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800230a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800230c:	684a      	ldr	r2, [r1, #4]
 800230e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002310:	6203      	str	r3, [r0, #32]
}
 8002312:	bc30      	pop	{r4, r5}
 8002314:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002316:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800231a:	68ca      	ldr	r2, [r1, #12]
 800231c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002320:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002324:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002328:	694a      	ldr	r2, [r1, #20]
 800232a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800232e:	698a      	ldr	r2, [r1, #24]
 8002330:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8002334:	e7e8      	b.n	8002308 <TIM_OC3_SetConfig+0x28>
 8002336:	bf00      	nop
 8002338:	40010000 	.word	0x40010000

0800233c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800233c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800233e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002340:	6a02      	ldr	r2, [r0, #32]
 8002342:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002346:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002348:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800234a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800234c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002350:	680d      	ldr	r5, [r1, #0]
 8002352:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002356:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800235a:	688d      	ldr	r5, [r1, #8]
 800235c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002360:	4d07      	ldr	r5, [pc, #28]	@ (8002380 <TIM_OC4_SetConfig+0x44>)
 8002362:	42a8      	cmp	r0, r5
 8002364:	d006      	beq.n	8002374 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002366:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002368:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800236a:	684a      	ldr	r2, [r1, #4]
 800236c:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800236e:	6203      	str	r3, [r0, #32]
}
 8002370:	bc30      	pop	{r4, r5}
 8002372:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002374:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002378:	694d      	ldr	r5, [r1, #20]
 800237a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800237e:	e7f2      	b.n	8002366 <TIM_OC4_SetConfig+0x2a>
 8002380:	40010000 	.word	0x40010000

08002384 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002384:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002386:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002388:	6a04      	ldr	r4, [r0, #32]
 800238a:	f024 0401 	bic.w	r4, r4, #1
 800238e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002390:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002392:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002396:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800239a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800239e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023a0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80023a2:	6203      	str	r3, [r0, #32]
}
 80023a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023aa:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023ac:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023ae:	6a04      	ldr	r4, [r0, #32]
 80023b0:	f024 0410 	bic.w	r4, r4, #16
 80023b4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023b6:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023b8:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023bc:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80023c4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023c8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80023ca:	6203      	str	r3, [r0, #32]
}
 80023cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023d2:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023d8:	430b      	orrs	r3, r1
 80023da:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023de:	6083      	str	r3, [r0, #8]
}
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80023e4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d12f      	bne.n	800244e <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 80023ee:	2302      	movs	r3, #2
 80023f0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023f4:	6802      	ldr	r2, [r0, #0]
 80023f6:	68d3      	ldr	r3, [r2, #12]
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023fe:	6803      	ldr	r3, [r0, #0]
 8002400:	4a15      	ldr	r2, [pc, #84]	@ (8002458 <HAL_TIM_Base_Start_IT+0x74>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d018      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x54>
 8002406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800240a:	d015      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x54>
 800240c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002410:	4293      	cmp	r3, r2
 8002412:	d011      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x54>
 8002414:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002418:	4293      	cmp	r3, r2
 800241a:	d00d      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x54>
 800241c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002420:	4293      	cmp	r3, r2
 8002422:	d009      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x54>
 8002424:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002428:	4293      	cmp	r3, r2
 800242a:	d005      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002434:	2000      	movs	r0, #0
 8002436:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243e:	2a06      	cmp	r2, #6
 8002440:	d007      	beq.n	8002452 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800244a:	2000      	movs	r0, #0
 800244c:	4770      	bx	lr
    return HAL_ERROR;
 800244e:	2001      	movs	r0, #1
 8002450:	4770      	bx	lr
  return HAL_OK;
 8002452:	2000      	movs	r0, #0
}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40010000 	.word	0x40010000

0800245c <HAL_TIM_PWM_MspInit>:
}
 800245c:	4770      	bx	lr

0800245e <HAL_TIM_OC_DelayElapsedCallback>:
}
 800245e:	4770      	bx	lr

08002460 <HAL_TIM_IC_CaptureCallback>:
}
 8002460:	4770      	bx	lr

08002462 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002462:	4770      	bx	lr

08002464 <HAL_TIM_TriggerCallback>:
}
 8002464:	4770      	bx	lr

08002466 <HAL_TIM_IRQHandler>:
{
 8002466:	b570      	push	{r4, r5, r6, lr}
 8002468:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800246a:	6803      	ldr	r3, [r0, #0]
 800246c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800246e:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002470:	f015 0f02 	tst.w	r5, #2
 8002474:	d010      	beq.n	8002498 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002476:	f016 0f02 	tst.w	r6, #2
 800247a:	d00d      	beq.n	8002498 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800247c:	f06f 0202 	mvn.w	r2, #2
 8002480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002482:	2301      	movs	r3, #1
 8002484:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002486:	6803      	ldr	r3, [r0, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f013 0f03 	tst.w	r3, #3
 800248e:	d05e      	beq.n	800254e <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8002490:	f7ff ffe6 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002494:	2300      	movs	r3, #0
 8002496:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002498:	f015 0f04 	tst.w	r5, #4
 800249c:	d012      	beq.n	80024c4 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800249e:	f016 0f04 	tst.w	r6, #4
 80024a2:	d00f      	beq.n	80024c4 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	f06f 0204 	mvn.w	r2, #4
 80024aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ac:	2302      	movs	r3, #2
 80024ae:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024b0:	6823      	ldr	r3, [r4, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80024b8:	d04f      	beq.n	800255a <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	4620      	mov	r0, r4
 80024bc:	f7ff ffd0 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c0:	2300      	movs	r3, #0
 80024c2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024c4:	f015 0f08 	tst.w	r5, #8
 80024c8:	d012      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024ca:	f016 0f08 	tst.w	r6, #8
 80024ce:	d00f      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	f06f 0208 	mvn.w	r2, #8
 80024d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024d8:	2304      	movs	r3, #4
 80024da:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	f013 0f03 	tst.w	r3, #3
 80024e4:	d040      	beq.n	8002568 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80024e6:	4620      	mov	r0, r4
 80024e8:	f7ff ffba 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ec:	2300      	movs	r3, #0
 80024ee:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024f0:	f015 0f10 	tst.w	r5, #16
 80024f4:	d012      	beq.n	800251c <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024f6:	f016 0f10 	tst.w	r6, #16
 80024fa:	d00f      	beq.n	800251c <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	f06f 0210 	mvn.w	r2, #16
 8002502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002504:	2308      	movs	r3, #8
 8002506:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002510:	d031      	beq.n	8002576 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	4620      	mov	r0, r4
 8002514:	f7ff ffa4 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002518:	2300      	movs	r3, #0
 800251a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800251c:	f015 0f01 	tst.w	r5, #1
 8002520:	d002      	beq.n	8002528 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002522:	f016 0f01 	tst.w	r6, #1
 8002526:	d12d      	bne.n	8002584 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002528:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800252c:	d002      	beq.n	8002534 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800252e:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8002532:	d12f      	bne.n	8002594 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002534:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8002538:	d002      	beq.n	8002540 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800253a:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800253e:	d131      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002540:	f015 0f20 	tst.w	r5, #32
 8002544:	d002      	beq.n	800254c <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002546:	f016 0f20 	tst.w	r6, #32
 800254a:	d133      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x14e>
}
 800254c:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	f7ff ff86 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002552:	4620      	mov	r0, r4
 8002554:	f7ff ff85 	bl	8002462 <HAL_TIM_PWM_PulseFinishedCallback>
 8002558:	e79c      	b.n	8002494 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	4620      	mov	r0, r4
 800255c:	f7ff ff7f 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	4620      	mov	r0, r4
 8002562:	f7ff ff7e 	bl	8002462 <HAL_TIM_PWM_PulseFinishedCallback>
 8002566:	e7ab      	b.n	80024c0 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002568:	4620      	mov	r0, r4
 800256a:	f7ff ff78 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256e:	4620      	mov	r0, r4
 8002570:	f7ff ff77 	bl	8002462 <HAL_TIM_PWM_PulseFinishedCallback>
 8002574:	e7ba      	b.n	80024ec <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	4620      	mov	r0, r4
 8002578:	f7ff ff71 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	4620      	mov	r0, r4
 800257e:	f7ff ff70 	bl	8002462 <HAL_TIM_PWM_PulseFinishedCallback>
 8002582:	e7c9      	b.n	8002518 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	f06f 0201 	mvn.w	r2, #1
 800258a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800258c:	4620      	mov	r0, r4
 800258e:	f7fe fe7f 	bl	8001290 <HAL_TIM_PeriodElapsedCallback>
 8002592:	e7c9      	b.n	8002528 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800259a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800259c:	4620      	mov	r0, r4
 800259e:	f000 faae 	bl	8002afe <HAL_TIMEx_BreakCallback>
 80025a2:	e7c7      	b.n	8002534 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80025ac:	4620      	mov	r0, r4
 80025ae:	f7ff ff59 	bl	8002464 <HAL_TIM_TriggerCallback>
 80025b2:	e7c5      	b.n	8002540 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	f06f 0220 	mvn.w	r2, #32
 80025ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80025bc:	4620      	mov	r0, r4
 80025be:	f000 fa9d 	bl	8002afc <HAL_TIMEx_CommutCallback>
}
 80025c2:	e7c3      	b.n	800254c <HAL_TIM_IRQHandler+0xe6>

080025c4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80025c4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c6:	4a29      	ldr	r2, [pc, #164]	@ (800266c <TIM_Base_SetConfig+0xa8>)
 80025c8:	4290      	cmp	r0, r2
 80025ca:	d00e      	beq.n	80025ea <TIM_Base_SetConfig+0x26>
 80025cc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80025d0:	d00b      	beq.n	80025ea <TIM_Base_SetConfig+0x26>
 80025d2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80025d6:	4290      	cmp	r0, r2
 80025d8:	d007      	beq.n	80025ea <TIM_Base_SetConfig+0x26>
 80025da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025de:	4290      	cmp	r0, r2
 80025e0:	d003      	beq.n	80025ea <TIM_Base_SetConfig+0x26>
 80025e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025e6:	4290      	cmp	r0, r2
 80025e8:	d103      	bne.n	80025f2 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80025ee:	684a      	ldr	r2, [r1, #4]
 80025f0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025f2:	4a1e      	ldr	r2, [pc, #120]	@ (800266c <TIM_Base_SetConfig+0xa8>)
 80025f4:	4290      	cmp	r0, r2
 80025f6:	d01a      	beq.n	800262e <TIM_Base_SetConfig+0x6a>
 80025f8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80025fc:	d017      	beq.n	800262e <TIM_Base_SetConfig+0x6a>
 80025fe:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002602:	4290      	cmp	r0, r2
 8002604:	d013      	beq.n	800262e <TIM_Base_SetConfig+0x6a>
 8002606:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800260a:	4290      	cmp	r0, r2
 800260c:	d00f      	beq.n	800262e <TIM_Base_SetConfig+0x6a>
 800260e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002612:	4290      	cmp	r0, r2
 8002614:	d00b      	beq.n	800262e <TIM_Base_SetConfig+0x6a>
 8002616:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800261a:	4290      	cmp	r0, r2
 800261c:	d007      	beq.n	800262e <TIM_Base_SetConfig+0x6a>
 800261e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002622:	4290      	cmp	r0, r2
 8002624:	d003      	beq.n	800262e <TIM_Base_SetConfig+0x6a>
 8002626:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800262a:	4290      	cmp	r0, r2
 800262c:	d103      	bne.n	8002636 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800262e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002632:	68ca      	ldr	r2, [r1, #12]
 8002634:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800263a:	694a      	ldr	r2, [r1, #20]
 800263c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800263e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002640:	688b      	ldr	r3, [r1, #8]
 8002642:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002644:	680b      	ldr	r3, [r1, #0]
 8002646:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002648:	4b08      	ldr	r3, [pc, #32]	@ (800266c <TIM_Base_SetConfig+0xa8>)
 800264a:	4298      	cmp	r0, r3
 800264c:	d00a      	beq.n	8002664 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 800264e:	2301      	movs	r3, #1
 8002650:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002652:	6903      	ldr	r3, [r0, #16]
 8002654:	f013 0f01 	tst.w	r3, #1
 8002658:	d003      	beq.n	8002662 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800265a:	6903      	ldr	r3, [r0, #16]
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6103      	str	r3, [r0, #16]
}
 8002662:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002664:	690b      	ldr	r3, [r1, #16]
 8002666:	6303      	str	r3, [r0, #48]	@ 0x30
 8002668:	e7f1      	b.n	800264e <TIM_Base_SetConfig+0x8a>
 800266a:	bf00      	nop
 800266c:	40010000 	.word	0x40010000

08002670 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002670:	b340      	cbz	r0, 80026c4 <HAL_TIM_Base_Init+0x54>
{
 8002672:	b510      	push	{r4, lr}
 8002674:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002676:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800267a:	b1f3      	cbz	r3, 80026ba <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800267c:	2302      	movs	r3, #2
 800267e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002682:	4621      	mov	r1, r4
 8002684:	f851 0b04 	ldr.w	r0, [r1], #4
 8002688:	f7ff ff9c 	bl	80025c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268c:	2301      	movs	r3, #1
 800268e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002692:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002696:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800269a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800269e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80026a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026aa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80026ae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80026b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80026b6:	2000      	movs	r0, #0
}
 80026b8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80026ba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80026be:	f7fe ff43 	bl	8001548 <HAL_TIM_Base_MspInit>
 80026c2:	e7db      	b.n	800267c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80026c4:	2001      	movs	r0, #1
}
 80026c6:	4770      	bx	lr

080026c8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80026c8:	b340      	cbz	r0, 800271c <HAL_TIM_PWM_Init+0x54>
{
 80026ca:	b510      	push	{r4, lr}
 80026cc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80026ce:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80026d2:	b1f3      	cbz	r3, 8002712 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80026d4:	2302      	movs	r3, #2
 80026d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026da:	4621      	mov	r1, r4
 80026dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80026e0:	f7ff ff70 	bl	80025c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80026ee:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80026f2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80026f6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80026fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002702:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002706:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800270a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800270e:	2000      	movs	r0, #0
}
 8002710:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002712:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002716:	f7ff fea1 	bl	800245c <HAL_TIM_PWM_MspInit>
 800271a:	e7db      	b.n	80026d4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800271c:	2001      	movs	r0, #1
}
 800271e:	4770      	bx	lr

08002720 <TIM_OC2_SetConfig>:
{
 8002720:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8002722:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002724:	6a02      	ldr	r2, [r0, #32]
 8002726:	f022 0210 	bic.w	r2, r2, #16
 800272a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800272c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800272e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002730:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002734:	680d      	ldr	r5, [r1, #0]
 8002736:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800273a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800273e:	688d      	ldr	r5, [r1, #8]
 8002740:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002744:	4d0c      	ldr	r5, [pc, #48]	@ (8002778 <TIM_OC2_SetConfig+0x58>)
 8002746:	42a8      	cmp	r0, r5
 8002748:	d006      	beq.n	8002758 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 800274a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800274c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800274e:	684a      	ldr	r2, [r1, #4]
 8002750:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002752:	6203      	str	r3, [r0, #32]
}
 8002754:	bc30      	pop	{r4, r5}
 8002756:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002758:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800275c:	68cd      	ldr	r5, [r1, #12]
 800275e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002762:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002766:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800276a:	694d      	ldr	r5, [r1, #20]
 800276c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002770:	698d      	ldr	r5, [r1, #24]
 8002772:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002776:	e7e8      	b.n	800274a <TIM_OC2_SetConfig+0x2a>
 8002778:	40010000 	.word	0x40010000

0800277c <HAL_TIM_PWM_ConfigChannel>:
{
 800277c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800277e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d066      	beq.n	8002854 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8002786:	4604      	mov	r4, r0
 8002788:	460d      	mov	r5, r1
 800278a:	2301      	movs	r3, #1
 800278c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8002790:	2a0c      	cmp	r2, #12
 8002792:	d85a      	bhi.n	800284a <HAL_TIM_PWM_ConfigChannel+0xce>
 8002794:	e8df f002 	tbb	[pc, r2]
 8002798:	59595907 	.word	0x59595907
 800279c:	5959591b 	.word	0x5959591b
 80027a0:	59595930 	.word	0x59595930
 80027a4:	44          	.byte	0x44
 80027a5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027a6:	6800      	ldr	r0, [r0, #0]
 80027a8:	f7ff fd70 	bl	800228c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027ac:	6822      	ldr	r2, [r4, #0]
 80027ae:	6993      	ldr	r3, [r2, #24]
 80027b0:	f043 0308 	orr.w	r3, r3, #8
 80027b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027b6:	6822      	ldr	r2, [r4, #0]
 80027b8:	6993      	ldr	r3, [r2, #24]
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027c0:	6822      	ldr	r2, [r4, #0]
 80027c2:	6993      	ldr	r3, [r2, #24]
 80027c4:	6929      	ldr	r1, [r5, #16]
 80027c6:	430b      	orrs	r3, r1
 80027c8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80027ca:	2000      	movs	r0, #0
      break;
 80027cc:	e03e      	b.n	800284c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027ce:	6800      	ldr	r0, [r0, #0]
 80027d0:	f7ff ffa6 	bl	8002720 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027d4:	6822      	ldr	r2, [r4, #0]
 80027d6:	6993      	ldr	r3, [r2, #24]
 80027d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027dc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027de:	6822      	ldr	r2, [r4, #0]
 80027e0:	6993      	ldr	r3, [r2, #24]
 80027e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027e6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027e8:	6822      	ldr	r2, [r4, #0]
 80027ea:	6993      	ldr	r3, [r2, #24]
 80027ec:	6929      	ldr	r1, [r5, #16]
 80027ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027f2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80027f4:	2000      	movs	r0, #0
      break;
 80027f6:	e029      	b.n	800284c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027f8:	6800      	ldr	r0, [r0, #0]
 80027fa:	f7ff fd71 	bl	80022e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027fe:	6822      	ldr	r2, [r4, #0]
 8002800:	69d3      	ldr	r3, [r2, #28]
 8002802:	f043 0308 	orr.w	r3, r3, #8
 8002806:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002808:	6822      	ldr	r2, [r4, #0]
 800280a:	69d3      	ldr	r3, [r2, #28]
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002812:	6822      	ldr	r2, [r4, #0]
 8002814:	69d3      	ldr	r3, [r2, #28]
 8002816:	6929      	ldr	r1, [r5, #16]
 8002818:	430b      	orrs	r3, r1
 800281a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800281c:	2000      	movs	r0, #0
      break;
 800281e:	e015      	b.n	800284c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002820:	6800      	ldr	r0, [r0, #0]
 8002822:	f7ff fd8b 	bl	800233c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002826:	6822      	ldr	r2, [r4, #0]
 8002828:	69d3      	ldr	r3, [r2, #28]
 800282a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800282e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002830:	6822      	ldr	r2, [r4, #0]
 8002832:	69d3      	ldr	r3, [r2, #28]
 8002834:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002838:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	69d3      	ldr	r3, [r2, #28]
 800283e:	6929      	ldr	r1, [r5, #16]
 8002840:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002844:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2000      	movs	r0, #0
      break;
 8002848:	e000      	b.n	800284c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800284a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800284c:	2300      	movs	r3, #0
 800284e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002852:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002854:	2002      	movs	r0, #2
 8002856:	e7fc      	b.n	8002852 <HAL_TIM_PWM_ConfigChannel+0xd6>

08002858 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002858:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800285a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800285c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002860:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002864:	430a      	orrs	r2, r1
 8002866:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800286a:	6082      	str	r2, [r0, #8]
}
 800286c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002872:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d078      	beq.n	800296c <HAL_TIM_ConfigClockSource+0xfa>
{
 800287a:	b510      	push	{r4, lr}
 800287c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800287e:	2301      	movs	r3, #1
 8002880:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	2302      	movs	r3, #2
 8002886:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800288a:	6802      	ldr	r2, [r0, #0]
 800288c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800288e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002892:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002896:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002898:	680b      	ldr	r3, [r1, #0]
 800289a:	2b60      	cmp	r3, #96	@ 0x60
 800289c:	d04c      	beq.n	8002938 <HAL_TIM_ConfigClockSource+0xc6>
 800289e:	d829      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x82>
 80028a0:	2b40      	cmp	r3, #64	@ 0x40
 80028a2:	d054      	beq.n	800294e <HAL_TIM_ConfigClockSource+0xdc>
 80028a4:	d90c      	bls.n	80028c0 <HAL_TIM_ConfigClockSource+0x4e>
 80028a6:	2b50      	cmp	r3, #80	@ 0x50
 80028a8:	d122      	bne.n	80028f0 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028aa:	68ca      	ldr	r2, [r1, #12]
 80028ac:	6849      	ldr	r1, [r1, #4]
 80028ae:	6800      	ldr	r0, [r0, #0]
 80028b0:	f7ff fd68 	bl	8002384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028b4:	2150      	movs	r1, #80	@ 0x50
 80028b6:	6820      	ldr	r0, [r4, #0]
 80028b8:	f7ff fd8b 	bl	80023d2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028bc:	2000      	movs	r0, #0
      break;
 80028be:	e005      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d00d      	beq.n	80028e0 <HAL_TIM_ConfigClockSource+0x6e>
 80028c4:	d909      	bls.n	80028da <HAL_TIM_ConfigClockSource+0x68>
 80028c6:	2b30      	cmp	r3, #48	@ 0x30
 80028c8:	d00a      	beq.n	80028e0 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80028ca:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80028d2:	2300      	movs	r3, #0
 80028d4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80028d8:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80028da:	b10b      	cbz	r3, 80028e0 <HAL_TIM_ConfigClockSource+0x6e>
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d105      	bne.n	80028ec <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028e0:	4619      	mov	r1, r3
 80028e2:	6820      	ldr	r0, [r4, #0]
 80028e4:	f7ff fd75 	bl	80023d2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028e8:	2000      	movs	r0, #0
      break;
 80028ea:	e7ef      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80028ec:	2001      	movs	r0, #1
 80028ee:	e7ed      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x5a>
 80028f0:	2001      	movs	r0, #1
 80028f2:	e7eb      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80028f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028f8:	d034      	beq.n	8002964 <HAL_TIM_ConfigClockSource+0xf2>
 80028fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028fe:	d10c      	bne.n	800291a <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8002900:	68cb      	ldr	r3, [r1, #12]
 8002902:	684a      	ldr	r2, [r1, #4]
 8002904:	6889      	ldr	r1, [r1, #8]
 8002906:	6800      	ldr	r0, [r0, #0]
 8002908:	f7ff ffa6 	bl	8002858 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800290c:	6822      	ldr	r2, [r4, #0]
 800290e:	6893      	ldr	r3, [r2, #8]
 8002910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002914:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002916:	2000      	movs	r0, #0
      break;
 8002918:	e7d8      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800291a:	2b70      	cmp	r3, #112	@ 0x70
 800291c:	d124      	bne.n	8002968 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 800291e:	68cb      	ldr	r3, [r1, #12]
 8002920:	684a      	ldr	r2, [r1, #4]
 8002922:	6889      	ldr	r1, [r1, #8]
 8002924:	6800      	ldr	r0, [r0, #0]
 8002926:	f7ff ff97 	bl	8002858 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800292a:	6822      	ldr	r2, [r4, #0]
 800292c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800292e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002932:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002934:	2000      	movs	r0, #0
      break;
 8002936:	e7c9      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002938:	68ca      	ldr	r2, [r1, #12]
 800293a:	6849      	ldr	r1, [r1, #4]
 800293c:	6800      	ldr	r0, [r0, #0]
 800293e:	f7ff fd34 	bl	80023aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002942:	2160      	movs	r1, #96	@ 0x60
 8002944:	6820      	ldr	r0, [r4, #0]
 8002946:	f7ff fd44 	bl	80023d2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800294a:	2000      	movs	r0, #0
      break;
 800294c:	e7be      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800294e:	68ca      	ldr	r2, [r1, #12]
 8002950:	6849      	ldr	r1, [r1, #4]
 8002952:	6800      	ldr	r0, [r0, #0]
 8002954:	f7ff fd16 	bl	8002384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002958:	2140      	movs	r1, #64	@ 0x40
 800295a:	6820      	ldr	r0, [r4, #0]
 800295c:	f7ff fd39 	bl	80023d2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002960:	2000      	movs	r0, #0
      break;
 8002962:	e7b3      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002964:	2000      	movs	r0, #0
 8002966:	e7b1      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002968:	2001      	movs	r0, #1
 800296a:	e7af      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800296c:	2002      	movs	r0, #2
}
 800296e:	4770      	bx	lr

08002970 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002970:	f001 011f 	and.w	r1, r1, #31
 8002974:	f04f 0c01 	mov.w	ip, #1
 8002978:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800297c:	6a03      	ldr	r3, [r0, #32]
 800297e:	ea23 030c 	bic.w	r3, r3, ip
 8002982:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002984:	6a03      	ldr	r3, [r0, #32]
 8002986:	408a      	lsls	r2, r1
 8002988:	4313      	orrs	r3, r2
 800298a:	6203      	str	r3, [r0, #32]
}
 800298c:	4770      	bx	lr
	...

08002990 <HAL_TIM_PWM_Start>:
{
 8002990:	b510      	push	{r4, lr}
 8002992:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002994:	4608      	mov	r0, r1
 8002996:	2900      	cmp	r1, #0
 8002998:	d132      	bne.n	8002a00 <HAL_TIM_PWM_Start+0x70>
 800299a:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	bf18      	it	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d163      	bne.n	8002a72 <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029aa:	2800      	cmp	r0, #0
 80029ac:	d141      	bne.n	8002a32 <HAL_TIM_PWM_Start+0xa2>
 80029ae:	2302      	movs	r3, #2
 80029b0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029b4:	2201      	movs	r2, #1
 80029b6:	4601      	mov	r1, r0
 80029b8:	6820      	ldr	r0, [r4, #0]
 80029ba:	f7ff ffd9 	bl	8002970 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	4a2e      	ldr	r2, [pc, #184]	@ (8002a7c <HAL_TIM_PWM_Start+0xec>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d045      	beq.n	8002a52 <HAL_TIM_PWM_Start+0xc2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a7c <HAL_TIM_PWM_Start+0xec>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d046      	beq.n	8002a5c <HAL_TIM_PWM_Start+0xcc>
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d2:	d043      	beq.n	8002a5c <HAL_TIM_PWM_Start+0xcc>
 80029d4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80029d8:	4293      	cmp	r3, r2
 80029da:	d03f      	beq.n	8002a5c <HAL_TIM_PWM_Start+0xcc>
 80029dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d03b      	beq.n	8002a5c <HAL_TIM_PWM_Start+0xcc>
 80029e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d037      	beq.n	8002a5c <HAL_TIM_PWM_Start+0xcc>
 80029ec:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d033      	beq.n	8002a5c <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80029fc:	2000      	movs	r0, #0
 80029fe:	e037      	b.n	8002a70 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a00:	2904      	cmp	r1, #4
 8002a02:	d008      	beq.n	8002a16 <HAL_TIM_PWM_Start+0x86>
 8002a04:	2908      	cmp	r1, #8
 8002a06:	d00d      	beq.n	8002a24 <HAL_TIM_PWM_Start+0x94>
 8002a08:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	bf18      	it	ne
 8002a12:	2301      	movne	r3, #1
 8002a14:	e7c7      	b.n	80029a6 <HAL_TIM_PWM_Start+0x16>
 8002a16:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	bf18      	it	ne
 8002a20:	2301      	movne	r3, #1
 8002a22:	e7c0      	b.n	80029a6 <HAL_TIM_PWM_Start+0x16>
 8002a24:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	bf18      	it	ne
 8002a2e:	2301      	movne	r3, #1
 8002a30:	e7b9      	b.n	80029a6 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a32:	2804      	cmp	r0, #4
 8002a34:	d005      	beq.n	8002a42 <HAL_TIM_PWM_Start+0xb2>
 8002a36:	2808      	cmp	r0, #8
 8002a38:	d007      	beq.n	8002a4a <HAL_TIM_PWM_Start+0xba>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002a40:	e7b8      	b.n	80029b4 <HAL_TIM_PWM_Start+0x24>
 8002a42:	2302      	movs	r3, #2
 8002a44:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002a48:	e7b4      	b.n	80029b4 <HAL_TIM_PWM_Start+0x24>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002a50:	e7b0      	b.n	80029b4 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002a52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a5a:	e7b4      	b.n	80029c6 <HAL_TIM_PWM_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a62:	2a06      	cmp	r2, #6
 8002a64:	d007      	beq.n	8002a76 <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a6e:	2000      	movs	r0, #0
}
 8002a70:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a72:	2001      	movs	r0, #1
 8002a74:	e7fc      	b.n	8002a70 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 8002a76:	2000      	movs	r0, #0
 8002a78:	e7fa      	b.n	8002a70 <HAL_TIM_PWM_Start+0xe0>
 8002a7a:	bf00      	nop
 8002a7c:	40010000 	.word	0x40010000

08002a80 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a80:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002a84:	2a01      	cmp	r2, #1
 8002a86:	d035      	beq.n	8002af4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8002a88:	b410      	push	{r4}
 8002a8a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a92:	2202      	movs	r2, #2
 8002a94:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a98:	6802      	ldr	r2, [r0, #0]
 8002a9a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a9c:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a9e:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aa2:	6808      	ldr	r0, [r1, #0]
 8002aa4:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aa8:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4812      	ldr	r0, [pc, #72]	@ (8002af8 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8002aae:	4282      	cmp	r2, r0
 8002ab0:	d012      	beq.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002ab2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002ab6:	d00f      	beq.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002ab8:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8002abc:	4282      	cmp	r2, r0
 8002abe:	d00b      	beq.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002ac0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002ac4:	4282      	cmp	r2, r0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002ac8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002acc:	4282      	cmp	r2, r0
 8002ace:	d003      	beq.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002ad0:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8002ad4:	4282      	cmp	r2, r0
 8002ad6:	d104      	bne.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ad8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002adc:	6849      	ldr	r1, [r1, #4]
 8002ade:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ae0:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002af2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002af4:	2002      	movs	r0, #2
}
 8002af6:	4770      	bx	lr
 8002af8:	40010000 	.word	0x40010000

08002afc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002afc:	4770      	bx	lr

08002afe <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002afe:	4770      	bx	lr

08002b00 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b00:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	f102 030c 	add.w	r3, r2, #12
 8002b06:	e853 3f00 	ldrex	r3, [r3]
 8002b0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	320c      	adds	r2, #12
 8002b10:	e842 3100 	strex	r1, r3, [r2]
 8002b14:	2900      	cmp	r1, #0
 8002b16:	d1f3      	bne.n	8002b00 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b18:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1a:	f102 0314 	add.w	r3, r2, #20
 8002b1e:	e853 3f00 	ldrex	r3, [r3]
 8002b22:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b26:	3214      	adds	r2, #20
 8002b28:	e842 3100 	strex	r1, r3, [r2]
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	d1f3      	bne.n	8002b18 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b30:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d005      	beq.n	8002b42 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b36:	2320      	movs	r3, #32
 8002b38:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002b40:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b42:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b44:	f102 030c 	add.w	r3, r2, #12
 8002b48:	e853 3f00 	ldrex	r3, [r3]
 8002b4c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b50:	320c      	adds	r2, #12
 8002b52:	e842 3100 	strex	r1, r3, [r2]
 8002b56:	2900      	cmp	r1, #0
 8002b58:	d1f3      	bne.n	8002b42 <UART_EndRxTransfer+0x42>
 8002b5a:	e7ec      	b.n	8002b36 <UART_EndRxTransfer+0x36>

08002b5c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b5c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b21      	cmp	r3, #33	@ 0x21
 8002b64:	d001      	beq.n	8002b6a <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002b66:	2002      	movs	r0, #2
  }
}
 8002b68:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6a:	6883      	ldr	r3, [r0, #8]
 8002b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b70:	d017      	beq.n	8002ba2 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b72:	6a03      	ldr	r3, [r0, #32]
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	6202      	str	r2, [r0, #32]
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	6803      	ldr	r3, [r0, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002b7e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8002b88:	b94b      	cbnz	r3, 8002b9e <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b8a:	6802      	ldr	r2, [r0, #0]
 8002b8c:	68d3      	ldr	r3, [r2, #12]
 8002b8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b92:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b94:	6802      	ldr	r2, [r0, #0]
 8002b96:	68d3      	ldr	r3, [r2, #12]
 8002b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b9c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba2:	6903      	ldr	r3, [r0, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e4      	bne.n	8002b72 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ba8:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	6802      	ldr	r2, [r0, #0]
 8002bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb2:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002bb4:	6a03      	ldr	r3, [r0, #32]
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	6203      	str	r3, [r0, #32]
 8002bba:	e7e0      	b.n	8002b7e <UART_Transmit_IT+0x22>

08002bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc0:	6802      	ldr	r2, [r0, #0]
 8002bc2:	6913      	ldr	r3, [r2, #16]
 8002bc4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bc8:	68c1      	ldr	r1, [r0, #12]
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bce:	6883      	ldr	r3, [r0, #8]
 8002bd0:	6902      	ldr	r2, [r0, #16]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	6943      	ldr	r3, [r0, #20]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	69c3      	ldr	r3, [r0, #28]
 8002bda:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002bdc:	6801      	ldr	r1, [r0, #0]
 8002bde:	68cb      	ldr	r3, [r1, #12]
 8002be0:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002be4:	f023 030c 	bic.w	r3, r3, #12
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bec:	6802      	ldr	r2, [r0, #0]
 8002bee:	6953      	ldr	r3, [r2, #20]
 8002bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf4:	6981      	ldr	r1, [r0, #24]
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bfa:	6803      	ldr	r3, [r0, #0]
 8002bfc:	4a31      	ldr	r2, [pc, #196]	@ (8002cc4 <UART_SetConfig+0x108>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d006      	beq.n	8002c10 <UART_SetConfig+0x54>
 8002c02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d002      	beq.n	8002c10 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c0a:	f7ff fb01 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 8002c0e:	e001      	b.n	8002c14 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c10:	f7ff fb0e 	bl	8002230 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c14:	69e3      	ldr	r3, [r4, #28]
 8002c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c1a:	d029      	beq.n	8002c70 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	1803      	adds	r3, r0, r0
 8002c20:	4149      	adcs	r1, r1
 8002c22:	181b      	adds	r3, r3, r0
 8002c24:	f141 0100 	adc.w	r1, r1, #0
 8002c28:	00c9      	lsls	r1, r1, #3
 8002c2a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	1818      	adds	r0, r3, r0
 8002c32:	6863      	ldr	r3, [r4, #4]
 8002c34:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002c38:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002c3c:	f141 0100 	adc.w	r1, r1, #0
 8002c40:	f7fd ffaa 	bl	8000b98 <__aeabi_uldivmod>
 8002c44:	4a20      	ldr	r2, [pc, #128]	@ (8002cc8 <UART_SetConfig+0x10c>)
 8002c46:	fba2 3100 	umull	r3, r1, r2, r0
 8002c4a:	0949      	lsrs	r1, r1, #5
 8002c4c:	2364      	movs	r3, #100	@ 0x64
 8002c4e:	fb03 0311 	mls	r3, r3, r1, r0
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	3332      	adds	r3, #50	@ 0x32
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c60:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	6821      	ldr	r1, [r4, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }
}
 8002c6e:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c70:	2300      	movs	r3, #0
 8002c72:	1802      	adds	r2, r0, r0
 8002c74:	eb43 0103 	adc.w	r1, r3, r3
 8002c78:	1812      	adds	r2, r2, r0
 8002c7a:	f141 0100 	adc.w	r1, r1, #0
 8002c7e:	00c9      	lsls	r1, r1, #3
 8002c80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c84:	00d2      	lsls	r2, r2, #3
 8002c86:	1810      	adds	r0, r2, r0
 8002c88:	f141 0100 	adc.w	r1, r1, #0
 8002c8c:	6862      	ldr	r2, [r4, #4]
 8002c8e:	1892      	adds	r2, r2, r2
 8002c90:	415b      	adcs	r3, r3
 8002c92:	f7fd ff81 	bl	8000b98 <__aeabi_uldivmod>
 8002c96:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc8 <UART_SetConfig+0x10c>)
 8002c98:	fba2 3100 	umull	r3, r1, r2, r0
 8002c9c:	0949      	lsrs	r1, r1, #5
 8002c9e:	2364      	movs	r3, #100	@ 0x64
 8002ca0:	fb03 0311 	mls	r3, r3, r1, r0
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	3332      	adds	r3, #50	@ 0x32
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	005a      	lsls	r2, r3, #1
 8002cb0:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002cb4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	6821      	ldr	r1, [r4, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
 8002cc2:	e7d4      	b.n	8002c6e <UART_SetConfig+0xb2>
 8002cc4:	40011000 	.word	0x40011000
 8002cc8:	51eb851f 	.word	0x51eb851f

08002ccc <UART_WaitOnFlagUntilTimeout>:
{
 8002ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	4605      	mov	r5, r0
 8002cd4:	460e      	mov	r6, r1
 8002cd6:	4617      	mov	r7, r2
 8002cd8:	4699      	mov	r9, r3
 8002cda:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cde:	682b      	ldr	r3, [r5, #0]
 8002ce0:	681c      	ldr	r4, [r3, #0]
 8002ce2:	ea36 0404 	bics.w	r4, r6, r4
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2401      	moveq	r4, #1
 8002cea:	2400      	movne	r4, #0
 8002cec:	42bc      	cmp	r4, r7
 8002cee:	d128      	bne.n	8002d42 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002cf0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002cf4:	d0f3      	beq.n	8002cde <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf6:	f7fe fdb5 	bl	8001864 <HAL_GetTick>
 8002cfa:	eba0 0009 	sub.w	r0, r0, r9
 8002cfe:	4540      	cmp	r0, r8
 8002d00:	d823      	bhi.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x7e>
 8002d02:	f1b8 0f00 	cmp.w	r8, #0
 8002d06:	d022      	beq.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d08:	682b      	ldr	r3, [r5, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	f012 0f04 	tst.w	r2, #4
 8002d10:	d0e5      	beq.n	8002cde <UART_WaitOnFlagUntilTimeout+0x12>
 8002d12:	2e80      	cmp	r6, #128	@ 0x80
 8002d14:	d0e3      	beq.n	8002cde <UART_WaitOnFlagUntilTimeout+0x12>
 8002d16:	2e40      	cmp	r6, #64	@ 0x40
 8002d18:	d0e1      	beq.n	8002cde <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	f012 0f08 	tst.w	r2, #8
 8002d20:	d0dd      	beq.n	8002cde <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d22:	2400      	movs	r4, #0
 8002d24:	9401      	str	r4, [sp, #4]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	9201      	str	r2, [sp, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002d30:	4628      	mov	r0, r5
 8002d32:	f7ff fee5 	bl	8002b00 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d36:	2308      	movs	r3, #8
 8002d38:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002d3a:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002d3e:	2001      	movs	r0, #1
 8002d40:	e000      	b.n	8002d44 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002d42:	2000      	movs	r0, #0
}
 8002d44:	b003      	add	sp, #12
 8002d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002d4a:	2003      	movs	r0, #3
 8002d4c:	e7fa      	b.n	8002d44 <UART_WaitOnFlagUntilTimeout+0x78>
 8002d4e:	2003      	movs	r0, #3
 8002d50:	e7f8      	b.n	8002d44 <UART_WaitOnFlagUntilTimeout+0x78>

08002d52 <HAL_UART_Init>:
  if (huart == NULL)
 8002d52:	b360      	cbz	r0, 8002dae <HAL_UART_Init+0x5c>
{
 8002d54:	b510      	push	{r4, lr}
 8002d56:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d58:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002d5c:	b313      	cbz	r3, 8002da4 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d5e:	2324      	movs	r3, #36	@ 0x24
 8002d60:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002d64:	6822      	ldr	r2, [r4, #0]
 8002d66:	68d3      	ldr	r3, [r2, #12]
 8002d68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d6c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f7ff ff24 	bl	8002bbc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d74:	6822      	ldr	r2, [r4, #0]
 8002d76:	6913      	ldr	r3, [r2, #16]
 8002d78:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002d7c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7e:	6822      	ldr	r2, [r4, #0]
 8002d80:	6953      	ldr	r3, [r2, #20]
 8002d82:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002d86:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002d88:	6822      	ldr	r2, [r4, #0]
 8002d8a:	68d3      	ldr	r3, [r2, #12]
 8002d8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d90:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d92:	2000      	movs	r0, #0
 8002d94:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d96:	2320      	movs	r3, #32
 8002d98:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002da0:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002da2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002da4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002da8:	f7fe fccc 	bl	8001744 <HAL_UART_MspInit>
 8002dac:	e7d7      	b.n	8002d5e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002dae:	2001      	movs	r0, #1
}
 8002db0:	4770      	bx	lr

08002db2 <HAL_UART_Receive>:
{
 8002db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dba:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d159      	bne.n	8002e78 <HAL_UART_Receive+0xc6>
 8002dc4:	4604      	mov	r4, r0
 8002dc6:	460d      	mov	r5, r1
 8002dc8:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002dca:	2900      	cmp	r1, #0
 8002dcc:	d058      	beq.n	8002e80 <HAL_UART_Receive+0xce>
 8002dce:	b90a      	cbnz	r2, 8002dd4 <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	e052      	b.n	8002e7a <HAL_UART_Receive+0xc8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dd8:	2222      	movs	r2, #34	@ 0x22
 8002dda:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dde:	6303      	str	r3, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8002de0:	f7fe fd40 	bl	8001864 <HAL_GetTick>
 8002de4:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8002de6:	f8a4 802c 	strh.w	r8, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002dea:	f8a4 802e 	strh.w	r8, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dee:	68a3      	ldr	r3, [r4, #8]
 8002df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002df4:	d002      	beq.n	8002dfc <HAL_UART_Receive+0x4a>
      pdata16bits = NULL;
 8002df6:	f04f 0800 	mov.w	r8, #0
 8002dfa:	e01c      	b.n	8002e36 <HAL_UART_Receive+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dfc:	6923      	ldr	r3, [r4, #16]
 8002dfe:	b113      	cbz	r3, 8002e06 <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 8002e00:	f04f 0800 	mov.w	r8, #0
 8002e04:	e017      	b.n	8002e36 <HAL_UART_Receive+0x84>
      pdata16bits = (uint16_t *) pData;
 8002e06:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002e08:	2500      	movs	r5, #0
 8002e0a:	e014      	b.n	8002e36 <HAL_UART_Receive+0x84>
        huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        return HAL_TIMEOUT;
 8002e12:	2003      	movs	r0, #3
 8002e14:	e031      	b.n	8002e7a <HAL_UART_Receive+0xc8>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1e:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 8002e22:	e003      	b.n	8002e2c <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8002e2a:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8002e2c:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 8002e2e:	b292      	uxth	r2, r2
 8002e30:	3a01      	subs	r2, #1
 8002e32:	b292      	uxth	r2, r2
 8002e34:	85e2      	strh	r2, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002e36:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	b1c3      	cbz	r3, 8002e6e <HAL_UART_Receive+0xbc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3c:	9600      	str	r6, [sp, #0]
 8002e3e:	463b      	mov	r3, r7
 8002e40:	2200      	movs	r2, #0
 8002e42:	2120      	movs	r1, #32
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7ff ff41 	bl	8002ccc <UART_WaitOnFlagUntilTimeout>
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	d1de      	bne.n	8002e0c <HAL_UART_Receive+0x5a>
      if (pdata8bits == NULL)
 8002e4e:	2d00      	cmp	r5, #0
 8002e50:	d0e1      	beq.n	8002e16 <HAL_UART_Receive+0x64>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e52:	68a3      	ldr	r3, [r4, #8]
 8002e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e58:	d0e4      	beq.n	8002e24 <HAL_UART_Receive+0x72>
 8002e5a:	b913      	cbnz	r3, 8002e62 <HAL_UART_Receive+0xb0>
 8002e5c:	6923      	ldr	r3, [r4, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0e0      	beq.n	8002e24 <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e6a:	702b      	strb	r3, [r5, #0]
 8002e6c:	e7dd      	b.n	8002e2a <HAL_UART_Receive+0x78>
    huart->RxState = HAL_UART_STATE_READY;
 8002e6e:	2320      	movs	r3, #32
 8002e70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 8002e74:	2000      	movs	r0, #0
 8002e76:	e000      	b.n	8002e7a <HAL_UART_Receive+0xc8>
    return HAL_BUSY;
 8002e78:	2002      	movs	r0, #2
}
 8002e7a:	b002      	add	sp, #8
 8002e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002e80:	2001      	movs	r0, #1
 8002e82:	e7fa      	b.n	8002e7a <HAL_UART_Receive+0xc8>

08002e84 <HAL_UART_TxCpltCallback>:
}
 8002e84:	4770      	bx	lr

08002e86 <UART_EndTransmit_IT>:
{
 8002e86:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e88:	6801      	ldr	r1, [r0, #0]
 8002e8a:	68ca      	ldr	r2, [r1, #12]
 8002e8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e90:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002e92:	2220      	movs	r2, #32
 8002e94:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8002e98:	f7ff fff4 	bl	8002e84 <HAL_UART_TxCpltCallback>
}
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	bd08      	pop	{r3, pc}

08002ea0 <HAL_UART_RxCpltCallback>:
}
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_UART_ErrorCallback>:
}
 8002ea2:	4770      	bx	lr

08002ea4 <UART_DMAAbortOnError>:
{
 8002ea4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ea6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002eac:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8002eae:	f7ff fff8 	bl	8002ea2 <HAL_UART_ErrorCallback>
}
 8002eb2:	bd08      	pop	{r3, pc}

08002eb4 <HAL_UARTEx_RxEventCallback>:
}
 8002eb4:	4770      	bx	lr

08002eb6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002eb6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b22      	cmp	r3, #34	@ 0x22
 8002ebe:	d169      	bne.n	8002f94 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec0:	6883      	ldr	r3, [r0, #8]
 8002ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ec6:	d04f      	beq.n	8002f68 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ec8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ece:	d004      	beq.n	8002eda <UART_Receive_IT+0x24>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d156      	bne.n	8002f82 <UART_Receive_IT+0xcc>
 8002ed4:	6903      	ldr	r3, [r0, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d153      	bne.n	8002f82 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eda:	6803      	ldr	r3, [r0, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8002ee0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8002ee6:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d151      	bne.n	8002f98 <UART_Receive_IT+0xe2>
{
 8002ef4:	b500      	push	{lr}
 8002ef6:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ef8:	6802      	ldr	r2, [r0, #0]
 8002efa:	68d3      	ldr	r3, [r2, #12]
 8002efc:	f023 0320 	bic.w	r3, r3, #32
 8002f00:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f02:	6802      	ldr	r2, [r0, #0]
 8002f04:	68d3      	ldr	r3, [r2, #12]
 8002f06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f0a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f0c:	6802      	ldr	r2, [r0, #0]
 8002f0e:	6953      	ldr	r3, [r2, #20]
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002f16:	2320      	movs	r3, #32
 8002f18:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f20:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d133      	bne.n	8002f8e <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f26:	2300      	movs	r3, #0
 8002f28:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	f102 030c 	add.w	r3, r2, #12
 8002f30:	e853 3f00 	ldrex	r3, [r3]
 8002f34:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	320c      	adds	r2, #12
 8002f3a:	e842 3100 	strex	r1, r3, [r2]
 8002f3e:	2900      	cmp	r1, #0
 8002f40:	d1f3      	bne.n	8002f2a <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f42:	6803      	ldr	r3, [r0, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	f012 0f10 	tst.w	r2, #16
 8002f4a:	d006      	beq.n	8002f5a <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	9201      	str	r2, [sp, #4]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	9201      	str	r2, [sp, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f5a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8002f5c:	f7ff ffaa 	bl	8002eb4 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8002f60:	2000      	movs	r0, #0
}
 8002f62:	b003      	add	sp, #12
 8002f64:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	6902      	ldr	r2, [r0, #16]
 8002f6a:	2a00      	cmp	r2, #0
 8002f6c:	d1ac      	bne.n	8002ec8 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f6e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f70:	6803      	ldr	r3, [r0, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f78:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002f7a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	6283      	str	r3, [r0, #40]	@ 0x28
 8002f80:	e7b1      	b.n	8002ee6 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f82:	6803      	ldr	r3, [r0, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f8a:	7013      	strb	r3, [r2, #0]
 8002f8c:	e7a8      	b.n	8002ee0 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8002f8e:	f7ff ff87 	bl	8002ea0 <HAL_UART_RxCpltCallback>
 8002f92:	e7e5      	b.n	8002f60 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8002f94:	2002      	movs	r0, #2
 8002f96:	4770      	bx	lr
    return HAL_OK;
 8002f98:	2000      	movs	r0, #0
}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_UART_IRQHandler>:
{
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fa2:	6802      	ldr	r2, [r0, #0]
 8002fa4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fa6:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fa8:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8002faa:	f013 0f0f 	tst.w	r3, #15
 8002fae:	d109      	bne.n	8002fc4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fb0:	f013 0f20 	tst.w	r3, #32
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x34>
 8002fb6:	f010 0f20 	tst.w	r0, #32
 8002fba:	d009      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7ff ff7a 	bl	8002eb6 <UART_Receive_IT>
      return;
 8002fc2:	e016      	b.n	8002ff2 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fc4:	f011 0101 	ands.w	r1, r1, #1
 8002fc8:	d115      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fca:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8002fce:	d112      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002fd2:	2901      	cmp	r1, #1
 8002fd4:	d079      	beq.n	80030ca <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fd6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002fda:	d003      	beq.n	8002fe4 <HAL_UART_IRQHandler+0x48>
 8002fdc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002fe0:	f040 8114 	bne.w	800320c <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fe4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002fe8:	d003      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x56>
 8002fea:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8002fee:	f040 8111 	bne.w	8003214 <HAL_UART_IRQHandler+0x278>
}
 8002ff2:	b002      	add	sp, #8
 8002ff4:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ff6:	f013 0f01 	tst.w	r3, #1
 8002ffa:	d006      	beq.n	800300a <HAL_UART_IRQHandler+0x6e>
 8002ffc:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8003000:	d003      	beq.n	800300a <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003002:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003004:	f042 0201 	orr.w	r2, r2, #1
 8003008:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800300a:	f013 0f04 	tst.w	r3, #4
 800300e:	d004      	beq.n	800301a <HAL_UART_IRQHandler+0x7e>
 8003010:	b119      	cbz	r1, 800301a <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003012:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003014:	f042 0202 	orr.w	r2, r2, #2
 8003018:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800301a:	f013 0f02 	tst.w	r3, #2
 800301e:	d004      	beq.n	800302a <HAL_UART_IRQHandler+0x8e>
 8003020:	b119      	cbz	r1, 800302a <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003022:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003024:	f042 0204 	orr.w	r2, r2, #4
 8003028:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800302a:	f013 0f08 	tst.w	r3, #8
 800302e:	d007      	beq.n	8003040 <HAL_UART_IRQHandler+0xa4>
 8003030:	f010 0f20 	tst.w	r0, #32
 8003034:	d100      	bne.n	8003038 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003036:	b119      	cbz	r1, 8003040 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003038:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800303a:	f042 0208 	orr.w	r2, r2, #8
 800303e:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003040:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003042:	2a00      	cmp	r2, #0
 8003044:	d0d5      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003046:	f013 0f20 	tst.w	r3, #32
 800304a:	d002      	beq.n	8003052 <HAL_UART_IRQHandler+0xb6>
 800304c:	f010 0f20 	tst.w	r0, #32
 8003050:	d129      	bne.n	80030a6 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800305a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800305c:	f012 0f08 	tst.w	r2, #8
 8003060:	d100      	bne.n	8003064 <HAL_UART_IRQHandler+0xc8>
 8003062:	b363      	cbz	r3, 80030be <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8003064:	4620      	mov	r0, r4
 8003066:	f7ff fd4b 	bl	8002b00 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003072:	d020      	beq.n	80030b6 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003074:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	f102 0314 	add.w	r3, r2, #20
 800307a:	e853 3f00 	ldrex	r3, [r3]
 800307e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	3214      	adds	r2, #20
 8003084:	e842 3100 	strex	r1, r3, [r2]
 8003088:	2900      	cmp	r1, #0
 800308a:	d1f3      	bne.n	8003074 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 800308c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800308e:	b173      	cbz	r3, 80030ae <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003090:	4a62      	ldr	r2, [pc, #392]	@ (800321c <HAL_UART_IRQHandler+0x280>)
 8003092:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003094:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003096:	f7fe fc9d 	bl	80019d4 <HAL_DMA_Abort_IT>
 800309a:	2800      	cmp	r0, #0
 800309c:	d0a9      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800309e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80030a0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80030a2:	4798      	blx	r3
 80030a4:	e7a5      	b.n	8002ff2 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 80030a6:	4620      	mov	r0, r4
 80030a8:	f7ff ff05 	bl	8002eb6 <UART_Receive_IT>
 80030ac:	e7d1      	b.n	8003052 <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 80030ae:	4620      	mov	r0, r4
 80030b0:	f7ff fef7 	bl	8002ea2 <HAL_UART_ErrorCallback>
 80030b4:	e79d      	b.n	8002ff2 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80030b6:	4620      	mov	r0, r4
 80030b8:	f7ff fef3 	bl	8002ea2 <HAL_UART_ErrorCallback>
 80030bc:	e799      	b.n	8002ff2 <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff feef 	bl	8002ea2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 80030c8:	e793      	b.n	8002ff2 <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030ca:	f013 0f10 	tst.w	r3, #16
 80030ce:	d082      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030d0:	f010 0f10 	tst.w	r0, #16
 80030d4:	f43f af7f 	beq.w	8002fd6 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030d8:	2300      	movs	r3, #0
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	6813      	ldr	r3, [r2, #0]
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	6853      	ldr	r3, [r2, #4]
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e6:	6953      	ldr	r3, [r2, #20]
 80030e8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80030ec:	d052      	beq.n	8003194 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030ee:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80030f0:	6813      	ldr	r3, [r2, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f43f af7b 	beq.w	8002ff2 <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030fc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80030fe:	4299      	cmp	r1, r3
 8003100:	f67f af77 	bls.w	8002ff2 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8003104:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003106:	69d3      	ldr	r3, [r2, #28]
 8003108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800310c:	d037      	beq.n	800317e <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800310e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	f102 030c 	add.w	r3, r2, #12
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311c:	320c      	adds	r2, #12
 800311e:	e842 3100 	strex	r1, r3, [r2]
 8003122:	2900      	cmp	r1, #0
 8003124:	d1f3      	bne.n	800310e <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003126:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	f102 0314 	add.w	r3, r2, #20
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003134:	3214      	adds	r2, #20
 8003136:	e842 3100 	strex	r1, r3, [r2]
 800313a:	2900      	cmp	r1, #0
 800313c:	d1f3      	bne.n	8003126 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800313e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003140:	f102 0314 	add.w	r3, r2, #20
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	3214      	adds	r2, #20
 800314e:	e842 3100 	strex	r1, r3, [r2]
 8003152:	2900      	cmp	r1, #0
 8003154:	d1f3      	bne.n	800313e <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8003156:	2320      	movs	r3, #32
 8003158:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800315c:	2300      	movs	r3, #0
 800315e:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003160:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	f102 030c 	add.w	r3, r2, #12
 8003166:	e853 3f00 	ldrex	r3, [r3]
 800316a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316e:	320c      	adds	r2, #12
 8003170:	e842 3100 	strex	r1, r3, [r2]
 8003174:	2900      	cmp	r1, #0
 8003176:	d1f3      	bne.n	8003160 <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003178:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800317a:	f7fe fbe1 	bl	8001940 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800317e:	2302      	movs	r3, #2
 8003180:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003182:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003184:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003186:	b29b      	uxth	r3, r3
 8003188:	1ac9      	subs	r1, r1, r3
 800318a:	b289      	uxth	r1, r1
 800318c:	4620      	mov	r0, r4
 800318e:	f7ff fe91 	bl	8002eb4 <HAL_UARTEx_RxEventCallback>
      return;
 8003192:	e72e      	b.n	8002ff2 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003194:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003196:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003198:	b29b      	uxth	r3, r3
 800319a:	1ac9      	subs	r1, r1, r3
 800319c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800319e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f43f af25 	beq.w	8002ff2 <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 80031a8:	2900      	cmp	r1, #0
 80031aa:	f43f af22 	beq.w	8002ff2 <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	f102 030c 	add.w	r3, r2, #12
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031bc:	320c      	adds	r2, #12
 80031be:	e842 3000 	strex	r0, r3, [r2]
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d1f3      	bne.n	80031ae <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	f102 0314 	add.w	r3, r2, #20
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d4:	3214      	adds	r2, #20
 80031d6:	e842 3000 	strex	r0, r3, [r2]
 80031da:	2800      	cmp	r0, #0
 80031dc:	d1f3      	bne.n	80031c6 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 80031de:	2320      	movs	r3, #32
 80031e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e4:	2300      	movs	r3, #0
 80031e6:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	f102 030c 	add.w	r3, r2, #12
 80031ee:	e853 3f00 	ldrex	r3, [r3]
 80031f2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	320c      	adds	r2, #12
 80031f8:	e842 3000 	strex	r0, r3, [r2]
 80031fc:	2800      	cmp	r0, #0
 80031fe:	d1f3      	bne.n	80031e8 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003200:	2302      	movs	r3, #2
 8003202:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003204:	4620      	mov	r0, r4
 8003206:	f7ff fe55 	bl	8002eb4 <HAL_UARTEx_RxEventCallback>
      return;
 800320a:	e6f2      	b.n	8002ff2 <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 800320c:	4620      	mov	r0, r4
 800320e:	f7ff fca5 	bl	8002b5c <UART_Transmit_IT>
    return;
 8003212:	e6ee      	b.n	8002ff2 <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8003214:	4620      	mov	r0, r4
 8003216:	f7ff fe36 	bl	8002e86 <UART_EndTransmit_IT>
    return;
 800321a:	e6ea      	b.n	8002ff2 <HAL_UART_IRQHandler+0x56>
 800321c:	08002ea5 	.word	0x08002ea5

08003220 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003220:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8003222:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003226:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003228:	f001 f90c 	bl	8004444 <xTaskGetSchedulerState>
 800322c:	2801      	cmp	r0, #1
 800322e:	d100      	bne.n	8003232 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8003230:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8003232:	f001 fc5f 	bl	8004af4 <xPortSysTickHandler>
}
 8003236:	e7fb      	b.n	8003230 <SysTick_Handler+0x10>

08003238 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003238:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800323c:	b92b      	cbnz	r3, 800324a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800323e:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <osKernelInitialize+0x20>)
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	b928      	cbnz	r0, 8003250 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003248:	4770      	bx	lr
    stat = osErrorISR;
 800324a:	f06f 0005 	mvn.w	r0, #5
 800324e:	4770      	bx	lr
    } else {
      stat = osError;
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000904 	.word	0x20000904

0800325c <osKernelStart>:
 800325c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003260:	b973      	cbnz	r3, 8003280 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8003262:	4b0a      	ldr	r3, [pc, #40]	@ (800328c <osKernelStart+0x30>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d10d      	bne.n	8003286 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800326a:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326c:	2400      	movs	r4, #0
 800326e:	4b08      	ldr	r3, [pc, #32]	@ (8003290 <osKernelStart+0x34>)
 8003270:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <osKernelStart+0x30>)
 8003274:	2202      	movs	r2, #2
 8003276:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003278:	f000 fe32 	bl	8003ee0 <vTaskStartScheduler>
      stat = osOK;
 800327c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800327e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003280:	f06f 0005 	mvn.w	r0, #5
 8003284:	4770      	bx	lr
      stat = osError;
 8003286:	f04f 30ff 	mov.w	r0, #4294967295
}
 800328a:	4770      	bx	lr
 800328c:	20000904 	.word	0x20000904
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003296:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003298:	2400      	movs	r4, #0
 800329a:	9405      	str	r4, [sp, #20]
 800329c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80032a0:	bb74      	cbnz	r4, 8003300 <osThreadNew+0x6c>
 80032a2:	b368      	cbz	r0, 8003300 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80032a4:	b322      	cbz	r2, 80032f0 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 80032a6:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80032a8:	6993      	ldr	r3, [r2, #24]
 80032aa:	b903      	cbnz	r3, 80032ae <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 80032ac:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032ae:	1e5c      	subs	r4, r3, #1
 80032b0:	2c37      	cmp	r4, #55	@ 0x37
 80032b2:	d849      	bhi.n	8003348 <osThreadNew+0xb4>
 80032b4:	6854      	ldr	r4, [r2, #4]
 80032b6:	f014 0f01 	tst.w	r4, #1
 80032ba:	d147      	bne.n	800334c <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80032bc:	6956      	ldr	r6, [r2, #20]
 80032be:	b16e      	cbz	r6, 80032dc <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80032c0:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032c4:	6894      	ldr	r4, [r2, #8]
 80032c6:	b12c      	cbz	r4, 80032d4 <osThreadNew+0x40>
 80032c8:	68d7      	ldr	r7, [r2, #12]
 80032ca:	2fa7      	cmp	r7, #167	@ 0xa7
 80032cc:	d902      	bls.n	80032d4 <osThreadNew+0x40>
 80032ce:	6917      	ldr	r7, [r2, #16]
 80032d0:	b107      	cbz	r7, 80032d4 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032d2:	b9c6      	cbnz	r6, 8003306 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80032d4:	b12c      	cbz	r4, 80032e2 <osThreadNew+0x4e>
    mem  = -1;
 80032d6:	f04f 34ff 	mov.w	r4, #4294967295
 80032da:	e00e      	b.n	80032fa <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 80032dc:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 80032e0:	e7f0      	b.n	80032c4 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80032e2:	68d4      	ldr	r4, [r2, #12]
 80032e4:	b98c      	cbnz	r4, 800330a <osThreadNew+0x76>
 80032e6:	6914      	ldr	r4, [r2, #16]
 80032e8:	b194      	cbz	r4, 8003310 <osThreadNew+0x7c>
    mem  = -1;
 80032ea:	f04f 34ff 	mov.w	r4, #4294967295
 80032ee:	e004      	b.n	80032fa <osThreadNew+0x66>
    name = NULL;
 80032f0:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80032f2:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80032f4:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 80032f6:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 80032fa:	2c01      	cmp	r4, #1
 80032fc:	d00a      	beq.n	8003314 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80032fe:	b1ac      	cbz	r4, 800332c <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003300:	9805      	ldr	r0, [sp, #20]
}
 8003302:	b007      	add	sp, #28
 8003304:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8003306:	2401      	movs	r4, #1
 8003308:	e7f7      	b.n	80032fa <osThreadNew+0x66>
    mem  = -1;
 800330a:	f04f 34ff 	mov.w	r4, #4294967295
 800330e:	e7f4      	b.n	80032fa <osThreadNew+0x66>
          mem = 0;
 8003310:	2400      	movs	r4, #0
 8003312:	e7f2      	b.n	80032fa <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003314:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003316:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003318:	9202      	str	r2, [sp, #8]
 800331a:	9401      	str	r4, [sp, #4]
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	460b      	mov	r3, r1
 8003320:	4662      	mov	r2, ip
 8003322:	4629      	mov	r1, r5
 8003324:	f000 fd6e 	bl	8003e04 <xTaskCreateStatic>
 8003328:	9005      	str	r0, [sp, #20]
 800332a:	e7e9      	b.n	8003300 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800332c:	aa05      	add	r2, sp, #20
 800332e:	9201      	str	r2, [sp, #4]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	460b      	mov	r3, r1
 8003334:	fa1f f28c 	uxth.w	r2, ip
 8003338:	4629      	mov	r1, r5
 800333a:	f000 fd9e 	bl	8003e7a <xTaskCreate>
 800333e:	2801      	cmp	r0, #1
 8003340:	d0de      	beq.n	8003300 <osThreadNew+0x6c>
            hTask = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	9305      	str	r3, [sp, #20]
 8003346:	e7db      	b.n	8003300 <osThreadNew+0x6c>
        return (NULL);
 8003348:	2000      	movs	r0, #0
 800334a:	e7da      	b.n	8003302 <osThreadNew+0x6e>
 800334c:	2000      	movs	r0, #0
 800334e:	e7d8      	b.n	8003302 <osThreadNew+0x6e>

08003350 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003350:	b508      	push	{r3, lr}
 8003352:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003356:	b933      	cbnz	r3, 8003366 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8003358:	b908      	cbnz	r0, 800335e <osDelay+0xe>
    stat = osOK;
 800335a:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800335c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800335e:	f000 ff2b 	bl	80041b8 <vTaskDelay>
    stat = osOK;
 8003362:	2000      	movs	r0, #0
 8003364:	e7fa      	b.n	800335c <osDelay+0xc>
    stat = osErrorISR;
 8003366:	f06f 0005 	mvn.w	r0, #5
 800336a:	e7f7      	b.n	800335c <osDelay+0xc>

0800336c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <vApplicationGetIdleTaskMemory+0x10>)
 800336e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003370:	4b03      	ldr	r3, [pc, #12]	@ (8003380 <vApplicationGetIdleTaskMemory+0x14>)
 8003372:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003374:	2380      	movs	r3, #128	@ 0x80
 8003376:	6013      	str	r3, [r2, #0]
}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	2000085c 	.word	0x2000085c
 8003380:	2000065c 	.word	0x2000065c

08003384 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <vApplicationGetTimerTaskMemory+0x10>)
 8003386:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003388:	4b03      	ldr	r3, [pc, #12]	@ (8003398 <vApplicationGetTimerTaskMemory+0x14>)
 800338a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800338c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003390:	6013      	str	r3, [r2, #0]
}
 8003392:	4770      	bx	lr
 8003394:	200005b4 	.word	0x200005b4
 8003398:	200001b4 	.word	0x200001b4

0800339c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800339c:	f100 0308 	add.w	r3, r0, #8
 80033a0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033a2:	f04f 32ff 	mov.w	r2, #4294967295
 80033a6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033aa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033b0:	4770      	bx	lr

080033b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033b6:	4770      	bx	lr

080033b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80033b8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ba:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033c0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033c2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033c4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80033c6:	6803      	ldr	r3, [r0, #0]
 80033c8:	3301      	adds	r3, #1
 80033ca:	6003      	str	r3, [r0, #0]
}
 80033cc:	4770      	bx	lr

080033ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033ce:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033d0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033d2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80033d6:	d011      	beq.n	80033fc <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033d8:	f100 0308 	add.w	r3, r0, #8
 80033dc:	461c      	mov	r4, r3
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	42aa      	cmp	r2, r5
 80033e4:	d9fa      	bls.n	80033dc <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033e6:	6863      	ldr	r3, [r4, #4]
 80033e8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033ea:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033ec:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80033ee:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033f0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80033f2:	6803      	ldr	r3, [r0, #0]
 80033f4:	3301      	adds	r3, #1
 80033f6:	6003      	str	r3, [r0, #0]
}
 80033f8:	bc30      	pop	{r4, r5}
 80033fa:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80033fc:	6904      	ldr	r4, [r0, #16]
 80033fe:	e7f2      	b.n	80033e6 <vListInsert+0x18>

08003400 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003400:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003402:	6841      	ldr	r1, [r0, #4]
 8003404:	6882      	ldr	r2, [r0, #8]
 8003406:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003408:	6841      	ldr	r1, [r0, #4]
 800340a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	4282      	cmp	r2, r0
 8003410:	d006      	beq.n	8003420 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003412:	2200      	movs	r2, #0
 8003414:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	3a01      	subs	r2, #1
 800341a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800341c:	6818      	ldr	r0, [r3, #0]
}
 800341e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003420:	6882      	ldr	r2, [r0, #8]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	e7f5      	b.n	8003412 <uxListRemove+0x12>

08003426 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003426:	b510      	push	{r4, lr}
 8003428:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800342a:	f001 faf3 	bl	8004a14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800342e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003430:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003432:	429a      	cmp	r2, r3
 8003434:	d004      	beq.n	8003440 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8003436:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8003438:	f001 fb0e 	bl	8004a58 <vPortExitCritical>

	return xReturn;
}
 800343c:	4620      	mov	r0, r4
 800343e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8003440:	2401      	movs	r4, #1
 8003442:	e7f9      	b.n	8003438 <prvIsQueueFull+0x12>

08003444 <prvIsQueueEmpty>:
{
 8003444:	b510      	push	{r4, lr}
 8003446:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003448:	f001 fae4 	bl	8004a14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800344c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800344e:	b923      	cbnz	r3, 800345a <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8003450:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8003452:	f001 fb01 	bl	8004a58 <vPortExitCritical>
}
 8003456:	4620      	mov	r0, r4
 8003458:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800345a:	2400      	movs	r4, #0
 800345c:	e7f9      	b.n	8003452 <prvIsQueueEmpty+0xe>

0800345e <prvCopyDataToQueue>:
{
 800345e:	b570      	push	{r4, r5, r6, lr}
 8003460:	4604      	mov	r4, r0
 8003462:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003464:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003466:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003468:	b95a      	cbnz	r2, 8003482 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800346a:	6803      	ldr	r3, [r0, #0]
 800346c:	b11b      	cbz	r3, 8003476 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800346e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003470:	3601      	adds	r6, #1
 8003472:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8003474:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003476:	6880      	ldr	r0, [r0, #8]
 8003478:	f000 fff4 	bl	8004464 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800347c:	2300      	movs	r3, #0
 800347e:	60a3      	str	r3, [r4, #8]
 8003480:	e7f6      	b.n	8003470 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8003482:	b96d      	cbnz	r5, 80034a0 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003484:	6840      	ldr	r0, [r0, #4]
 8003486:	f001 fdc7 	bl	8005018 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800348a:	6863      	ldr	r3, [r4, #4]
 800348c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800348e:	4413      	add	r3, r2
 8003490:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003492:	68a2      	ldr	r2, [r4, #8]
 8003494:	4293      	cmp	r3, r2
 8003496:	d319      	bcc.n	80034cc <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800349c:	4628      	mov	r0, r5
 800349e:	e7e7      	b.n	8003470 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034a0:	68c0      	ldr	r0, [r0, #12]
 80034a2:	f001 fdb9 	bl	8005018 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034a6:	68e3      	ldr	r3, [r4, #12]
 80034a8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80034aa:	4251      	negs	r1, r2
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d202      	bcs.n	80034bc <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034b6:	68a3      	ldr	r3, [r4, #8]
 80034b8:	440b      	add	r3, r1
 80034ba:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80034bc:	2d02      	cmp	r5, #2
 80034be:	d001      	beq.n	80034c4 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80034c0:	2000      	movs	r0, #0
 80034c2:	e7d5      	b.n	8003470 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034c4:	b126      	cbz	r6, 80034d0 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80034c6:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80034c8:	2000      	movs	r0, #0
 80034ca:	e7d1      	b.n	8003470 <prvCopyDataToQueue+0x12>
 80034cc:	4628      	mov	r0, r5
 80034ce:	e7cf      	b.n	8003470 <prvCopyDataToQueue+0x12>
 80034d0:	2000      	movs	r0, #0
 80034d2:	e7cd      	b.n	8003470 <prvCopyDataToQueue+0x12>

080034d4 <prvCopyDataFromQueue>:
{
 80034d4:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034d6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80034d8:	b16a      	cbz	r2, 80034f6 <prvCopyDataFromQueue+0x22>
{
 80034da:	b510      	push	{r4, lr}
 80034dc:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034de:	68d9      	ldr	r1, [r3, #12]
 80034e0:	4411      	add	r1, r2
 80034e2:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034e4:	689c      	ldr	r4, [r3, #8]
 80034e6:	42a1      	cmp	r1, r4
 80034e8:	d301      	bcc.n	80034ee <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034ea:	6819      	ldr	r1, [r3, #0]
 80034ec:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034ee:	68d9      	ldr	r1, [r3, #12]
 80034f0:	f001 fd92 	bl	8005018 <memcpy>
}
 80034f4:	bd10      	pop	{r4, pc}
 80034f6:	4770      	bx	lr

080034f8 <prvUnlockQueue>:
{
 80034f8:	b538      	push	{r3, r4, r5, lr}
 80034fa:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80034fc:	f001 fa8a 	bl	8004a14 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003500:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8003504:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003506:	e001      	b.n	800350c <prvUnlockQueue+0x14>
			--cTxLock;
 8003508:	3c01      	subs	r4, #1
 800350a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800350c:	2c00      	cmp	r4, #0
 800350e:	dd0a      	ble.n	8003526 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003510:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003512:	b143      	cbz	r3, 8003526 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003514:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8003518:	f000 fefa 	bl	8004310 <xTaskRemoveFromEventList>
 800351c:	2800      	cmp	r0, #0
 800351e:	d0f3      	beq.n	8003508 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8003520:	f000 ff8a 	bl	8004438 <vTaskMissedYield>
 8003524:	e7f0      	b.n	8003508 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8003526:	23ff      	movs	r3, #255	@ 0xff
 8003528:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800352c:	f001 fa94 	bl	8004a58 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003530:	f001 fa70 	bl	8004a14 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003534:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8003538:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800353a:	e001      	b.n	8003540 <prvUnlockQueue+0x48>
				--cRxLock;
 800353c:	3c01      	subs	r4, #1
 800353e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003540:	2c00      	cmp	r4, #0
 8003542:	dd0a      	ble.n	800355a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003544:	692b      	ldr	r3, [r5, #16]
 8003546:	b143      	cbz	r3, 800355a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003548:	f105 0010 	add.w	r0, r5, #16
 800354c:	f000 fee0 	bl	8004310 <xTaskRemoveFromEventList>
 8003550:	2800      	cmp	r0, #0
 8003552:	d0f3      	beq.n	800353c <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8003554:	f000 ff70 	bl	8004438 <vTaskMissedYield>
 8003558:	e7f0      	b.n	800353c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800355a:	23ff      	movs	r3, #255	@ 0xff
 800355c:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8003560:	f001 fa7a 	bl	8004a58 <vPortExitCritical>
}
 8003564:	bd38      	pop	{r3, r4, r5, pc}

08003566 <xQueueGenericReset>:
{
 8003566:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8003568:	b1e0      	cbz	r0, 80035a4 <xQueueGenericReset+0x3e>
 800356a:	460d      	mov	r5, r1
 800356c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800356e:	f001 fa51 	bl	8004a14 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003576:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003578:	fb01 3002 	mla	r0, r1, r2, r3
 800357c:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800357e:	2000      	movs	r0, #0
 8003580:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003582:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003584:	3a01      	subs	r2, #1
 8003586:	fb02 3301 	mla	r3, r2, r1, r3
 800358a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800358c:	23ff      	movs	r3, #255	@ 0xff
 800358e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003592:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8003596:	b9fd      	cbnz	r5, 80035d8 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003598:	6923      	ldr	r3, [r4, #16]
 800359a:	b963      	cbnz	r3, 80035b6 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800359c:	f001 fa5c 	bl	8004a58 <vPortExitCritical>
}
 80035a0:	2001      	movs	r0, #1
 80035a2:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80035b4:	e7fe      	b.n	80035b4 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035b6:	f104 0010 	add.w	r0, r4, #16
 80035ba:	f000 fea9 	bl	8004310 <xTaskRemoveFromEventList>
 80035be:	2800      	cmp	r0, #0
 80035c0:	d0ec      	beq.n	800359c <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80035c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80035c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	e7e1      	b.n	800359c <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035d8:	f104 0010 	add.w	r0, r4, #16
 80035dc:	f7ff fede 	bl	800339c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035e0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80035e4:	f7ff feda 	bl	800339c <vListInitialise>
 80035e8:	e7d8      	b.n	800359c <xQueueGenericReset+0x36>

080035ea <prvInitialiseNewQueue>:
{
 80035ea:	b538      	push	{r3, r4, r5, lr}
 80035ec:	461d      	mov	r5, r3
 80035ee:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80035f0:	460b      	mov	r3, r1
 80035f2:	b949      	cbnz	r1, 8003608 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035f4:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80035f6:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035f8:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035fa:	2101      	movs	r1, #1
 80035fc:	4620      	mov	r0, r4
 80035fe:	f7ff ffb2 	bl	8003566 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003602:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8003606:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003608:	6022      	str	r2, [r4, #0]
 800360a:	e7f4      	b.n	80035f6 <prvInitialiseNewQueue+0xc>

0800360c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800360c:	b940      	cbnz	r0, 8003620 <xQueueGenericCreateStatic+0x14>
 800360e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	e7fe      	b.n	800361e <xQueueGenericCreateStatic+0x12>
	{
 8003620:	b510      	push	{r4, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	461c      	mov	r4, r3
 8003626:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8003628:	b153      	cbz	r3, 8003640 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800362a:	b192      	cbz	r2, 8003652 <xQueueGenericCreateStatic+0x46>
 800362c:	b989      	cbnz	r1, 8003652 <xQueueGenericCreateStatic+0x46>
 800362e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	e7fe      	b.n	800363e <xQueueGenericCreateStatic+0x32>
 8003640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003650:	e7fe      	b.n	8003650 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003652:	b16a      	cbz	r2, 8003670 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003654:	2350      	movs	r3, #80	@ 0x50
 8003656:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003658:	9b03      	ldr	r3, [sp, #12]
 800365a:	2b50      	cmp	r3, #80	@ 0x50
 800365c:	d013      	beq.n	8003686 <xQueueGenericCreateStatic+0x7a>
 800365e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	e7fe      	b.n	800366e <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003670:	2900      	cmp	r1, #0
 8003672:	d0ef      	beq.n	8003654 <xQueueGenericCreateStatic+0x48>
 8003674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	e7fe      	b.n	8003684 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003686:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003688:	2301      	movs	r3, #1
 800368a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800368e:	9400      	str	r4, [sp, #0]
 8003690:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003694:	4660      	mov	r0, ip
 8003696:	f7ff ffa8 	bl	80035ea <prvInitialiseNewQueue>
	}
 800369a:	4620      	mov	r0, r4
 800369c:	b004      	add	sp, #16
 800369e:	bd10      	pop	{r4, pc}

080036a0 <xQueueGenericSend>:
{
 80036a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a2:	b085      	sub	sp, #20
 80036a4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80036a6:	b188      	cbz	r0, 80036cc <xQueueGenericSend+0x2c>
 80036a8:	460f      	mov	r7, r1
 80036aa:	461d      	mov	r5, r3
 80036ac:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036ae:	b1b1      	cbz	r1, 80036de <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036b0:	2d02      	cmp	r5, #2
 80036b2:	d120      	bne.n	80036f6 <xQueueGenericSend+0x56>
 80036b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d01d      	beq.n	80036f6 <xQueueGenericSend+0x56>
 80036ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	e7fe      	b.n	80036ca <xQueueGenericSend+0x2a>
 80036cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80036dc:	e7fe      	b.n	80036dc <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036de:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0e5      	beq.n	80036b0 <xQueueGenericSend+0x10>
 80036e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	e7fe      	b.n	80036f4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036f6:	f000 fea5 	bl	8004444 <xTaskGetSchedulerState>
 80036fa:	4606      	mov	r6, r0
 80036fc:	b958      	cbnz	r0, 8003716 <xQueueGenericSend+0x76>
 80036fe:	9b01      	ldr	r3, [sp, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d048      	beq.n	8003796 <xQueueGenericSend+0xf6>
 8003704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	e7fe      	b.n	8003714 <xQueueGenericSend+0x74>
 8003716:	2600      	movs	r6, #0
 8003718:	e03d      	b.n	8003796 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800371a:	462a      	mov	r2, r5
 800371c:	4639      	mov	r1, r7
 800371e:	4620      	mov	r0, r4
 8003720:	f7ff fe9d 	bl	800345e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003724:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003726:	b97b      	cbnz	r3, 8003748 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8003728:	b148      	cbz	r0, 800373e <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800372a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800372e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003732:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800373e:	f001 f98b 	bl	8004a58 <vPortExitCritical>
				return pdPASS;
 8003742:	2001      	movs	r0, #1
}
 8003744:	b005      	add	sp, #20
 8003746:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003748:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800374c:	f000 fde0 	bl	8004310 <xTaskRemoveFromEventList>
 8003750:	2800      	cmp	r0, #0
 8003752:	d0f4      	beq.n	800373e <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8003754:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800375c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	e7e9      	b.n	800373e <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800376a:	f001 f975 	bl	8004a58 <vPortExitCritical>
					return errQUEUE_FULL;
 800376e:	2000      	movs	r0, #0
 8003770:	e7e8      	b.n	8003744 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003772:	a802      	add	r0, sp, #8
 8003774:	f000 fe12 	bl	800439c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003778:	2601      	movs	r6, #1
 800377a:	e019      	b.n	80037b0 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800377c:	2300      	movs	r3, #0
 800377e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003782:	e021      	b.n	80037c8 <xQueueGenericSend+0x128>
 8003784:	2300      	movs	r3, #0
 8003786:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800378a:	e023      	b.n	80037d4 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800378c:	4620      	mov	r0, r4
 800378e:	f7ff feb3 	bl	80034f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003792:	f000 fc95 	bl	80040c0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8003796:	f001 f93d 	bl	8004a14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800379a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800379c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800379e:	429a      	cmp	r2, r3
 80037a0:	d3bb      	bcc.n	800371a <xQueueGenericSend+0x7a>
 80037a2:	2d02      	cmp	r5, #2
 80037a4:	d0b9      	beq.n	800371a <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80037a6:	9b01      	ldr	r3, [sp, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0de      	beq.n	800376a <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 80037ac:	2e00      	cmp	r6, #0
 80037ae:	d0e0      	beq.n	8003772 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80037b0:	f001 f952 	bl	8004a58 <vPortExitCritical>
		vTaskSuspendAll();
 80037b4:	f000 fbea 	bl	8003f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037b8:	f001 f92c 	bl	8004a14 <vPortEnterCritical>
 80037bc:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80037c0:	b252      	sxtb	r2, r2
 80037c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80037c6:	d0d9      	beq.n	800377c <xQueueGenericSend+0xdc>
 80037c8:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80037cc:	b252      	sxtb	r2, r2
 80037ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 80037d2:	d0d7      	beq.n	8003784 <xQueueGenericSend+0xe4>
 80037d4:	f001 f940 	bl	8004a58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037d8:	a901      	add	r1, sp, #4
 80037da:	a802      	add	r0, sp, #8
 80037dc:	f000 fdea 	bl	80043b4 <xTaskCheckForTimeOut>
 80037e0:	b9d8      	cbnz	r0, 800381a <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037e2:	4620      	mov	r0, r4
 80037e4:	f7ff fe1f 	bl	8003426 <prvIsQueueFull>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d0cf      	beq.n	800378c <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037ec:	9901      	ldr	r1, [sp, #4]
 80037ee:	f104 0010 	add.w	r0, r4, #16
 80037f2:	f000 fd59 	bl	80042a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037f6:	4620      	mov	r0, r4
 80037f8:	f7ff fe7e 	bl	80034f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037fc:	f000 fc60 	bl	80040c0 <xTaskResumeAll>
 8003800:	2800      	cmp	r0, #0
 8003802:	d1c8      	bne.n	8003796 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8003804:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800380c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	e7bd      	b.n	8003796 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800381a:	4620      	mov	r0, r4
 800381c:	f7ff fe6c 	bl	80034f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003820:	f000 fc4e 	bl	80040c0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8003824:	2000      	movs	r0, #0
 8003826:	e78d      	b.n	8003744 <xQueueGenericSend+0xa4>

08003828 <xQueueGenericSendFromISR>:
{
 8003828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800382c:	b190      	cbz	r0, 8003854 <xQueueGenericSendFromISR+0x2c>
 800382e:	460f      	mov	r7, r1
 8003830:	4616      	mov	r6, r2
 8003832:	461c      	mov	r4, r3
 8003834:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003836:	b1b1      	cbz	r1, 8003866 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003838:	2c02      	cmp	r4, #2
 800383a:	d120      	bne.n	800387e <xQueueGenericSendFromISR+0x56>
 800383c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800383e:	2b01      	cmp	r3, #1
 8003840:	d01d      	beq.n	800387e <xQueueGenericSendFromISR+0x56>
 8003842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	e7fe      	b.n	8003852 <xQueueGenericSendFromISR+0x2a>
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003864:	e7fe      	b.n	8003864 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003866:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0e5      	beq.n	8003838 <xQueueGenericSendFromISR+0x10>
 800386c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	e7fe      	b.n	800387c <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800387e:	f001 f9ef 	bl	8004c60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003882:	f3ef 8811 	mrs	r8, BASEPRI
 8003886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003896:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8003898:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800389a:	429a      	cmp	r2, r3
 800389c:	d306      	bcc.n	80038ac <xQueueGenericSendFromISR+0x84>
 800389e:	2c02      	cmp	r4, #2
 80038a0:	d004      	beq.n	80038ac <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80038a2:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038a4:	f388 8811 	msr	BASEPRI, r8
}
 80038a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80038ac:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 80038b0:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038b4:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038b6:	4622      	mov	r2, r4
 80038b8:	4639      	mov	r1, r7
 80038ba:	4628      	mov	r0, r5
 80038bc:	f7ff fdcf 	bl	800345e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80038c0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80038c4:	d006      	beq.n	80038d4 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038c6:	f109 0301 	add.w	r3, r9, #1
 80038ca:	b25b      	sxtb	r3, r3
 80038cc:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 80038d0:	2001      	movs	r0, #1
 80038d2:	e7e7      	b.n	80038a4 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038d4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80038d6:	b90b      	cbnz	r3, 80038dc <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80038d8:	2001      	movs	r0, #1
 80038da:	e7e3      	b.n	80038a4 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038dc:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80038e0:	f000 fd16 	bl	8004310 <xTaskRemoveFromEventList>
 80038e4:	b118      	cbz	r0, 80038ee <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 80038e6:	b126      	cbz	r6, 80038f2 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038e8:	2001      	movs	r0, #1
 80038ea:	6030      	str	r0, [r6, #0]
 80038ec:	e7da      	b.n	80038a4 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80038ee:	2001      	movs	r0, #1
 80038f0:	e7d8      	b.n	80038a4 <xQueueGenericSendFromISR+0x7c>
 80038f2:	2001      	movs	r0, #1
 80038f4:	e7d6      	b.n	80038a4 <xQueueGenericSendFromISR+0x7c>

080038f6 <xQueueReceive>:
{
 80038f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f8:	b085      	sub	sp, #20
 80038fa:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80038fc:	b190      	cbz	r0, 8003924 <xQueueReceive+0x2e>
 80038fe:	460f      	mov	r7, r1
 8003900:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003902:	b1c1      	cbz	r1, 8003936 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003904:	f000 fd9e 	bl	8004444 <xTaskGetSchedulerState>
 8003908:	4606      	mov	r6, r0
 800390a:	bb00      	cbnz	r0, 800394e <xQueueReceive+0x58>
 800390c:	9b01      	ldr	r3, [sp, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d05e      	beq.n	80039d0 <xQueueReceive+0xda>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	e7fe      	b.n	8003922 <xQueueReceive+0x2c>
 8003924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8003934:	e7fe      	b.n	8003934 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003936:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0e3      	beq.n	8003904 <xQueueReceive+0xe>
 800393c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	e7fe      	b.n	800394c <xQueueReceive+0x56>
 800394e:	2600      	movs	r6, #0
 8003950:	e03e      	b.n	80039d0 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003952:	4639      	mov	r1, r7
 8003954:	4620      	mov	r0, r4
 8003956:	f7ff fdbd 	bl	80034d4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800395a:	3d01      	subs	r5, #1
 800395c:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800395e:	6923      	ldr	r3, [r4, #16]
 8003960:	b923      	cbnz	r3, 800396c <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8003962:	f001 f879 	bl	8004a58 <vPortExitCritical>
				return pdPASS;
 8003966:	2001      	movs	r0, #1
}
 8003968:	b005      	add	sp, #20
 800396a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800396c:	f104 0010 	add.w	r0, r4, #16
 8003970:	f000 fcce 	bl	8004310 <xTaskRemoveFromEventList>
 8003974:	2800      	cmp	r0, #0
 8003976:	d0f4      	beq.n	8003962 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8003978:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800397c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003980:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	e7e9      	b.n	8003962 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800398e:	f001 f863 	bl	8004a58 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003992:	2000      	movs	r0, #0
 8003994:	e7e8      	b.n	8003968 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003996:	a802      	add	r0, sp, #8
 8003998:	f000 fd00 	bl	800439c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800399c:	2601      	movs	r6, #1
 800399e:	e021      	b.n	80039e4 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80039a0:	2300      	movs	r3, #0
 80039a2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80039a6:	e029      	b.n	80039fc <xQueueReceive+0x106>
 80039a8:	2300      	movs	r3, #0
 80039aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80039ae:	e02b      	b.n	8003a08 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80039b0:	4620      	mov	r0, r4
 80039b2:	f7ff fda1 	bl	80034f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039b6:	f000 fb83 	bl	80040c0 <xTaskResumeAll>
 80039ba:	e009      	b.n	80039d0 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80039bc:	4620      	mov	r0, r4
 80039be:	f7ff fd9b 	bl	80034f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039c2:	f000 fb7d 	bl	80040c0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039c6:	4620      	mov	r0, r4
 80039c8:	f7ff fd3c 	bl	8003444 <prvIsQueueEmpty>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d13f      	bne.n	8003a50 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80039d0:	f001 f820 	bl	8004a14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039d4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039d6:	2d00      	cmp	r5, #0
 80039d8:	d1bb      	bne.n	8003952 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80039da:	9b01      	ldr	r3, [sp, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0d6      	beq.n	800398e <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80039e0:	2e00      	cmp	r6, #0
 80039e2:	d0d8      	beq.n	8003996 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80039e4:	f001 f838 	bl	8004a58 <vPortExitCritical>
		vTaskSuspendAll();
 80039e8:	f000 fad0 	bl	8003f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039ec:	f001 f812 	bl	8004a14 <vPortEnterCritical>
 80039f0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80039f4:	b25b      	sxtb	r3, r3
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fa:	d0d1      	beq.n	80039a0 <xQueueReceive+0xaa>
 80039fc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003a00:	b25b      	sxtb	r3, r3
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d0cf      	beq.n	80039a8 <xQueueReceive+0xb2>
 8003a08:	f001 f826 	bl	8004a58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a0c:	a901      	add	r1, sp, #4
 8003a0e:	a802      	add	r0, sp, #8
 8003a10:	f000 fcd0 	bl	80043b4 <xTaskCheckForTimeOut>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d1d1      	bne.n	80039bc <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f7ff fd13 	bl	8003444 <prvIsQueueEmpty>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d0c6      	beq.n	80039b0 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a22:	9901      	ldr	r1, [sp, #4]
 8003a24:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003a28:	f000 fc3e 	bl	80042a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f7ff fd63 	bl	80034f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a32:	f000 fb45 	bl	80040c0 <xTaskResumeAll>
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d1ca      	bne.n	80039d0 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8003a3a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a42:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	e7bf      	b.n	80039d0 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8003a50:	2000      	movs	r0, #0
 8003a52:	e789      	b.n	8003968 <xQueueReceive+0x72>

08003a54 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a54:	2300      	movs	r3, #0
 8003a56:	2b07      	cmp	r3, #7
 8003a58:	d80c      	bhi.n	8003a74 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a5a:	4a07      	ldr	r2, [pc, #28]	@ (8003a78 <vQueueAddToRegistry+0x24>)
 8003a5c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003a60:	b10a      	cbz	r2, 8003a66 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a62:	3301      	adds	r3, #1
 8003a64:	e7f7      	b.n	8003a56 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a66:	4a04      	ldr	r2, [pc, #16]	@ (8003a78 <vQueueAddToRegistry+0x24>)
 8003a68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a6c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003a70:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a72:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	20000908 	.word	0x20000908

08003a7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a7c:	b570      	push	{r4, r5, r6, lr}
 8003a7e:	4604      	mov	r4, r0
 8003a80:	460d      	mov	r5, r1
 8003a82:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a84:	f000 ffc6 	bl	8004a14 <vPortEnterCritical>
 8003a88:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d00d      	beq.n	8003ab0 <vQueueWaitForMessageRestricted+0x34>
 8003a94:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003a98:	b25b      	sxtb	r3, r3
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d00b      	beq.n	8003ab8 <vQueueWaitForMessageRestricted+0x3c>
 8003aa0:	f000 ffda 	bl	8004a58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003aa4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003aa6:	b15b      	cbz	r3, 8003ac0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f7ff fd25 	bl	80034f8 <prvUnlockQueue>
	}
 8003aae:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003ab6:	e7ed      	b.n	8003a94 <vQueueWaitForMessageRestricted+0x18>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003abe:	e7ef      	b.n	8003aa0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ac0:	4632      	mov	r2, r6
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003ac8:	f000 fc06 	bl	80042d8 <vTaskPlaceOnEventListRestricted>
 8003acc:	e7ec      	b.n	8003aa8 <vQueueWaitForMessageRestricted+0x2c>
	...

08003ad0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad0:	4b08      	ldr	r3, [pc, #32]	@ (8003af4 <prvResetNextTaskUnblockTime+0x24>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	b923      	cbnz	r3, 8003ae2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ad8:	4b07      	ldr	r3, [pc, #28]	@ (8003af8 <prvResetNextTaskUnblockTime+0x28>)
 8003ada:	f04f 32ff 	mov.w	r2, #4294967295
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae2:	4b04      	ldr	r3, [pc, #16]	@ (8003af4 <prvResetNextTaskUnblockTime+0x24>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	4b02      	ldr	r3, [pc, #8]	@ (8003af8 <prvResetNextTaskUnblockTime+0x28>)
 8003aee:	601a      	str	r2, [r3, #0]
	}
}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	200009b8 	.word	0x200009b8
 8003af8:	20000950 	.word	0x20000950

08003afc <prvInitialiseNewTask>:
{
 8003afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b00:	4680      	mov	r8, r0
 8003b02:	460d      	mov	r5, r1
 8003b04:	4617      	mov	r7, r2
 8003b06:	4699      	mov	r9, r3
 8003b08:	9e08      	ldr	r6, [sp, #32]
 8003b0a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8003b0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b10:	0092      	lsls	r2, r2, #2
 8003b12:	21a5      	movs	r1, #165	@ 0xa5
 8003b14:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003b16:	f001 f9f5 	bl	8004f04 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003b1c:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8003b20:	3a01      	subs	r2, #1
 8003b22:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b26:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8003b2a:	2d00      	cmp	r5, #0
 8003b2c:	d042      	beq.n	8003bb4 <prvInitialiseNewTask+0xb8>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b2e:	f04f 0c00 	mov.w	ip, #0
 8003b32:	f1bc 0f0f 	cmp.w	ip, #15
 8003b36:	d809      	bhi.n	8003b4c <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b38:	f815 300c 	ldrb.w	r3, [r5, ip]
 8003b3c:	eb04 020c 	add.w	r2, r4, ip
 8003b40:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8003b44:	b113      	cbz	r3, 8003b4c <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b46:	f10c 0c01 	add.w	ip, ip, #1
 8003b4a:	e7f2      	b.n	8003b32 <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b52:	2e37      	cmp	r6, #55	@ 0x37
 8003b54:	d900      	bls.n	8003b58 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b56:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8003b58:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003b5a:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b5c:	2500      	movs	r5, #0
 8003b5e:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b60:	1d20      	adds	r0, r4, #4
 8003b62:	f7ff fc26 	bl	80033b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b66:	f104 0018 	add.w	r0, r4, #24
 8003b6a:	f7ff fc22 	bl	80033b2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b6e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b70:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8003b74:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b76:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8003b78:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b7c:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b80:	224c      	movs	r2, #76	@ 0x4c
 8003b82:	4629      	mov	r1, r5
 8003b84:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8003b88:	f001 f9bc 	bl	8004f04 <memset>
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <prvInitialiseNewTask+0xc0>)
 8003b8e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003b90:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b94:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8003b96:	33d0      	adds	r3, #208	@ 0xd0
 8003b98:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b9a:	464a      	mov	r2, r9
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	4638      	mov	r0, r7
 8003ba0:	f000 ff10 	bl	80049c4 <pxPortInitialiseStack>
 8003ba4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8003ba6:	f1ba 0f00 	cmp.w	sl, #0
 8003baa:	d001      	beq.n	8003bb0 <prvInitialiseNewTask+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bac:	f8ca 4000 	str.w	r4, [sl]
}
 8003bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8003bba:	e7ca      	b.n	8003b52 <prvInitialiseNewTask+0x56>
 8003bbc:	20004b9c 	.word	0x20004b9c

08003bc0 <prvInitialiseTaskLists>:
{
 8003bc0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bc2:	2400      	movs	r4, #0
 8003bc4:	e007      	b.n	8003bd6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bc6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003bca:	0093      	lsls	r3, r2, #2
 8003bcc:	480e      	ldr	r0, [pc, #56]	@ (8003c08 <prvInitialiseTaskLists+0x48>)
 8003bce:	4418      	add	r0, r3
 8003bd0:	f7ff fbe4 	bl	800339c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bd4:	3401      	adds	r4, #1
 8003bd6:	2c37      	cmp	r4, #55	@ 0x37
 8003bd8:	d9f5      	bls.n	8003bc6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8003bda:	4d0c      	ldr	r5, [pc, #48]	@ (8003c0c <prvInitialiseTaskLists+0x4c>)
 8003bdc:	4628      	mov	r0, r5
 8003bde:	f7ff fbdd 	bl	800339c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003be2:	4c0b      	ldr	r4, [pc, #44]	@ (8003c10 <prvInitialiseTaskLists+0x50>)
 8003be4:	4620      	mov	r0, r4
 8003be6:	f7ff fbd9 	bl	800339c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bea:	480a      	ldr	r0, [pc, #40]	@ (8003c14 <prvInitialiseTaskLists+0x54>)
 8003bec:	f7ff fbd6 	bl	800339c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003bf0:	4809      	ldr	r0, [pc, #36]	@ (8003c18 <prvInitialiseTaskLists+0x58>)
 8003bf2:	f7ff fbd3 	bl	800339c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003bf6:	4809      	ldr	r0, [pc, #36]	@ (8003c1c <prvInitialiseTaskLists+0x5c>)
 8003bf8:	f7ff fbd0 	bl	800339c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bfc:	4b08      	ldr	r3, [pc, #32]	@ (8003c20 <prvInitialiseTaskLists+0x60>)
 8003bfe:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c00:	4b08      	ldr	r3, [pc, #32]	@ (8003c24 <prvInitialiseTaskLists+0x64>)
 8003c02:	601c      	str	r4, [r3, #0]
}
 8003c04:	bd38      	pop	{r3, r4, r5, pc}
 8003c06:	bf00      	nop
 8003c08:	200009e4 	.word	0x200009e4
 8003c0c:	200009d0 	.word	0x200009d0
 8003c10:	200009bc 	.word	0x200009bc
 8003c14:	200009a0 	.word	0x200009a0
 8003c18:	2000098c 	.word	0x2000098c
 8003c1c:	20000974 	.word	0x20000974
 8003c20:	200009b8 	.word	0x200009b8
 8003c24:	200009b4 	.word	0x200009b4

08003c28 <prvAddNewTaskToReadyList>:
{
 8003c28:	b510      	push	{r4, lr}
 8003c2a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003c2c:	f000 fef2 	bl	8004a14 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003c30:	4a22      	ldr	r2, [pc, #136]	@ (8003cbc <prvAddNewTaskToReadyList+0x94>)
 8003c32:	6813      	ldr	r3, [r2, #0]
 8003c34:	3301      	adds	r3, #1
 8003c36:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c38:	4b21      	ldr	r3, [pc, #132]	@ (8003cc0 <prvAddNewTaskToReadyList+0x98>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	b15b      	cbz	r3, 8003c56 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8003c3e:	4b21      	ldr	r3, [pc, #132]	@ (8003cc4 <prvAddNewTaskToReadyList+0x9c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	b96b      	cbnz	r3, 8003c60 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c44:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc0 <prvAddNewTaskToReadyList+0x98>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c4a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d807      	bhi.n	8003c60 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8003c50:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <prvAddNewTaskToReadyList+0x98>)
 8003c52:	601c      	str	r4, [r3, #0]
 8003c54:	e004      	b.n	8003c60 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8003c56:	4b1a      	ldr	r3, [pc, #104]	@ (8003cc0 <prvAddNewTaskToReadyList+0x98>)
 8003c58:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c5a:	6813      	ldr	r3, [r2, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d029      	beq.n	8003cb4 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8003c60:	4a19      	ldr	r2, [pc, #100]	@ (8003cc8 <prvAddNewTaskToReadyList+0xa0>)
 8003c62:	6813      	ldr	r3, [r2, #0]
 8003c64:	3301      	adds	r3, #1
 8003c66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c68:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8003c6a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003c6c:	4b17      	ldr	r3, [pc, #92]	@ (8003ccc <prvAddNewTaskToReadyList+0xa4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4298      	cmp	r0, r3
 8003c72:	d901      	bls.n	8003c78 <prvAddNewTaskToReadyList+0x50>
 8003c74:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <prvAddNewTaskToReadyList+0xa4>)
 8003c76:	6018      	str	r0, [r3, #0]
 8003c78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c7c:	1d21      	adds	r1, r4, #4
 8003c7e:	4b14      	ldr	r3, [pc, #80]	@ (8003cd0 <prvAddNewTaskToReadyList+0xa8>)
 8003c80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003c84:	f7ff fb98 	bl	80033b8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003c88:	f000 fee6 	bl	8004a58 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <prvAddNewTaskToReadyList+0x9c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	b17b      	cbz	r3, 8003cb2 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c92:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc0 <prvAddNewTaskToReadyList+0x98>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c98:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d209      	bcs.n	8003cb2 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8003c9e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ca6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	f3bf 8f6f 	isb	sy
}
 8003cb2:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8003cb4:	f7ff ff84 	bl	8003bc0 <prvInitialiseTaskLists>
 8003cb8:	e7d2      	b.n	8003c60 <prvAddNewTaskToReadyList+0x38>
 8003cba:	bf00      	nop
 8003cbc:	20000970 	.word	0x20000970
 8003cc0:	20000e44 	.word	0x20000e44
 8003cc4:	20000964 	.word	0x20000964
 8003cc8:	20000954 	.word	0x20000954
 8003ccc:	20000968 	.word	0x20000968
 8003cd0:	200009e4 	.word	0x200009e4

08003cd4 <prvDeleteTCB>:
	{
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003cd8:	3054      	adds	r0, #84	@ 0x54
 8003cda:	f001 f91b 	bl	8004f14 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cde:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8003ce2:	b163      	cbz	r3, 8003cfe <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d011      	beq.n	8003d0c <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d00e      	beq.n	8003d0a <prvDeleteTCB+0x36>
 8003cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	e7fe      	b.n	8003cfc <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8003cfe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003d00:	f001 f8c2 	bl	8004e88 <vPortFree>
				vPortFree( pxTCB );
 8003d04:	4620      	mov	r0, r4
 8003d06:	f001 f8bf 	bl	8004e88 <vPortFree>
	}
 8003d0a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f001 f8bb 	bl	8004e88 <vPortFree>
 8003d12:	e7fa      	b.n	8003d0a <prvDeleteTCB+0x36>

08003d14 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d14:	4b0f      	ldr	r3, [pc, #60]	@ (8003d54 <prvCheckTasksWaitingTermination+0x40>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	b1d3      	cbz	r3, 8003d50 <prvCheckTasksWaitingTermination+0x3c>
{
 8003d1a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8003d1c:	f000 fe7a 	bl	8004a14 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d20:	4b0d      	ldr	r3, [pc, #52]	@ (8003d58 <prvCheckTasksWaitingTermination+0x44>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d26:	1d20      	adds	r0, r4, #4
 8003d28:	f7ff fb6a 	bl	8003400 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003d5c <prvCheckTasksWaitingTermination+0x48>)
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d34:	4a07      	ldr	r2, [pc, #28]	@ (8003d54 <prvCheckTasksWaitingTermination+0x40>)
 8003d36:	6813      	ldr	r3, [r2, #0]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8003d3c:	f000 fe8c 	bl	8004a58 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003d40:	4620      	mov	r0, r4
 8003d42:	f7ff ffc7 	bl	8003cd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d46:	4b03      	ldr	r3, [pc, #12]	@ (8003d54 <prvCheckTasksWaitingTermination+0x40>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e6      	bne.n	8003d1c <prvCheckTasksWaitingTermination+0x8>
}
 8003d4e:	bd10      	pop	{r4, pc}
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000988 	.word	0x20000988
 8003d58:	2000098c 	.word	0x2000098c
 8003d5c:	20000970 	.word	0x20000970

08003d60 <prvIdleTask>:
{
 8003d60:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8003d62:	f7ff ffd7 	bl	8003d14 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d66:	4b07      	ldr	r3, [pc, #28]	@ (8003d84 <prvIdleTask+0x24>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d9f9      	bls.n	8003d62 <prvIdleTask+0x2>
				taskYIELD();
 8003d6e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d76:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	e7ee      	b.n	8003d62 <prvIdleTask+0x2>
 8003d84:	200009e4 	.word	0x200009e4

08003d88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d8e:	4b17      	ldr	r3, [pc, #92]	@ (8003dec <prvAddCurrentTaskToDelayedList+0x64>)
 8003d90:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d92:	4b17      	ldr	r3, [pc, #92]	@ (8003df0 <prvAddCurrentTaskToDelayedList+0x68>)
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	3004      	adds	r0, #4
 8003d98:	f7ff fb32 	bl	8003400 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d9c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003da0:	d00d      	beq.n	8003dbe <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003da2:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003da4:	4b12      	ldr	r3, [pc, #72]	@ (8003df0 <prvAddCurrentTaskToDelayedList+0x68>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8003daa:	42a6      	cmp	r6, r4
 8003dac:	d910      	bls.n	8003dd0 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dae:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	4b0f      	ldr	r3, [pc, #60]	@ (8003df0 <prvAddCurrentTaskToDelayedList+0x68>)
 8003db4:	6819      	ldr	r1, [r3, #0]
 8003db6:	3104      	adds	r1, #4
 8003db8:	f7ff fb09 	bl	80033ce <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003dbc:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dbe:	2d00      	cmp	r5, #0
 8003dc0:	d0ef      	beq.n	8003da2 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <prvAddCurrentTaskToDelayedList+0x68>)
 8003dc4:	6819      	ldr	r1, [r3, #0]
 8003dc6:	3104      	adds	r1, #4
 8003dc8:	480b      	ldr	r0, [pc, #44]	@ (8003df8 <prvAddCurrentTaskToDelayedList+0x70>)
 8003dca:	f7ff faf5 	bl	80033b8 <vListInsertEnd>
 8003dce:	e7f5      	b.n	8003dbc <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dfc <prvAddCurrentTaskToDelayedList+0x74>)
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <prvAddCurrentTaskToDelayedList+0x68>)
 8003dd6:	6819      	ldr	r1, [r3, #0]
 8003dd8:	3104      	adds	r1, #4
 8003dda:	f7ff faf8 	bl	80033ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003dde:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <prvAddCurrentTaskToDelayedList+0x78>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	42a3      	cmp	r3, r4
 8003de4:	d9ea      	bls.n	8003dbc <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8003de6:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <prvAddCurrentTaskToDelayedList+0x78>)
 8003de8:	601c      	str	r4, [r3, #0]
}
 8003dea:	e7e7      	b.n	8003dbc <prvAddCurrentTaskToDelayedList+0x34>
 8003dec:	2000096c 	.word	0x2000096c
 8003df0:	20000e44 	.word	0x20000e44
 8003df4:	200009b4 	.word	0x200009b4
 8003df8:	20000974 	.word	0x20000974
 8003dfc:	200009b8 	.word	0x200009b8
 8003e00:	20000950 	.word	0x20000950

08003e04 <xTaskCreateStatic>:
	{
 8003e04:	b530      	push	{r4, r5, lr}
 8003e06:	b087      	sub	sp, #28
 8003e08:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8003e0a:	b17c      	cbz	r4, 8003e2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e0c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8003e0e:	b1b5      	cbz	r5, 8003e3e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e10:	25a8      	movs	r5, #168	@ 0xa8
 8003e12:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e14:	9d04      	ldr	r5, [sp, #16]
 8003e16:	2da8      	cmp	r5, #168	@ 0xa8
 8003e18:	d01a      	beq.n	8003e50 <xTaskCreateStatic+0x4c>
 8003e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	e7fe      	b.n	8003e2a <xTaskCreateStatic+0x26>
 8003e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8003e3c:	e7fe      	b.n	8003e3c <xTaskCreateStatic+0x38>
 8003e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8003e4e:	e7fe      	b.n	8003e4e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e50:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e52:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8003e54:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e56:	2402      	movs	r4, #2
 8003e58:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e5c:	2400      	movs	r4, #0
 8003e5e:	9403      	str	r4, [sp, #12]
 8003e60:	9502      	str	r5, [sp, #8]
 8003e62:	ac05      	add	r4, sp, #20
 8003e64:	9401      	str	r4, [sp, #4]
 8003e66:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003e68:	9400      	str	r4, [sp, #0]
 8003e6a:	f7ff fe47 	bl	8003afc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e6e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003e70:	f7ff feda 	bl	8003c28 <prvAddNewTaskToReadyList>
	}
 8003e74:	9805      	ldr	r0, [sp, #20]
 8003e76:	b007      	add	sp, #28
 8003e78:	bd30      	pop	{r4, r5, pc}

08003e7a <xTaskCreate>:
	{
 8003e7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	4607      	mov	r7, r0
 8003e82:	4688      	mov	r8, r1
 8003e84:	4614      	mov	r4, r2
 8003e86:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e88:	0090      	lsls	r0, r2, #2
 8003e8a:	f000 ff7b 	bl	8004d84 <pvPortMalloc>
			if( pxStack != NULL )
 8003e8e:	b308      	cbz	r0, 8003ed4 <xTaskCreate+0x5a>
 8003e90:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e92:	20a8      	movs	r0, #168	@ 0xa8
 8003e94:	f000 ff76 	bl	8004d84 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003e98:	4605      	mov	r5, r0
 8003e9a:	b1a8      	cbz	r0, 8003ec8 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8003e9c:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ea6:	9303      	str	r3, [sp, #12]
 8003ea8:	9002      	str	r0, [sp, #8]
 8003eaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	4633      	mov	r3, r6
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	4638      	mov	r0, r7
 8003eba:	f7ff fe1f 	bl	8003afc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f7ff feb2 	bl	8003c28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ec4:	2001      	movs	r0, #1
 8003ec6:	e007      	b.n	8003ed8 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8003ec8:	4648      	mov	r0, r9
 8003eca:	f000 ffdd 	bl	8004e88 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ece:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed2:	e001      	b.n	8003ed8 <xTaskCreate+0x5e>
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8003ed8:	b005      	add	sp, #20
 8003eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003ee0 <vTaskStartScheduler>:
{
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ee4:	2400      	movs	r4, #0
 8003ee6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ee8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003eea:	aa07      	add	r2, sp, #28
 8003eec:	a906      	add	r1, sp, #24
 8003eee:	a805      	add	r0, sp, #20
 8003ef0:	f7ff fa3c 	bl	800336c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ef4:	9b05      	ldr	r3, [sp, #20]
 8003ef6:	9302      	str	r3, [sp, #8]
 8003ef8:	9b06      	ldr	r3, [sp, #24]
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	9400      	str	r4, [sp, #0]
 8003efe:	4623      	mov	r3, r4
 8003f00:	9a07      	ldr	r2, [sp, #28]
 8003f02:	491a      	ldr	r1, [pc, #104]	@ (8003f6c <vTaskStartScheduler+0x8c>)
 8003f04:	481a      	ldr	r0, [pc, #104]	@ (8003f70 <vTaskStartScheduler+0x90>)
 8003f06:	f7ff ff7d 	bl	8003e04 <xTaskCreateStatic>
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f74 <vTaskStartScheduler+0x94>)
 8003f0c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8003f0e:	b1e8      	cbz	r0, 8003f4c <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8003f10:	f000 fb5c 	bl	80045cc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8003f14:	2801      	cmp	r0, #1
 8003f16:	d11a      	bne.n	8003f4e <vTaskStartScheduler+0x6e>
 8003f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f28:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <vTaskStartScheduler+0x98>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3354      	adds	r3, #84	@ 0x54
 8003f2e:	4a13      	ldr	r2, [pc, #76]	@ (8003f7c <vTaskStartScheduler+0x9c>)
 8003f30:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f32:	4b13      	ldr	r3, [pc, #76]	@ (8003f80 <vTaskStartScheduler+0xa0>)
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295
 8003f38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f3a:	4b12      	ldr	r3, [pc, #72]	@ (8003f84 <vTaskStartScheduler+0xa4>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f40:	4b11      	ldr	r3, [pc, #68]	@ (8003f88 <vTaskStartScheduler+0xa8>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003f46:	f000 fdff 	bl	8004b48 <xPortStartScheduler>
 8003f4a:	e003      	b.n	8003f54 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 8003f4c:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f4e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f52:	d001      	beq.n	8003f58 <vTaskStartScheduler+0x78>
}
 8003f54:	b008      	add	sp, #32
 8003f56:	bd10      	pop	{r4, pc}
 8003f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f68:	e7fe      	b.n	8003f68 <vTaskStartScheduler+0x88>
 8003f6a:	bf00      	nop
 8003f6c:	080053dc 	.word	0x080053dc
 8003f70:	08003d61 	.word	0x08003d61
 8003f74:	2000094c 	.word	0x2000094c
 8003f78:	20000e44 	.word	0x20000e44
 8003f7c:	20000010 	.word	0x20000010
 8003f80:	20000950 	.word	0x20000950
 8003f84:	20000964 	.word	0x20000964
 8003f88:	2000096c 	.word	0x2000096c

08003f8c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003f8c:	4a02      	ldr	r2, [pc, #8]	@ (8003f98 <vTaskSuspendAll+0xc>)
 8003f8e:	6813      	ldr	r3, [r2, #0]
 8003f90:	3301      	adds	r3, #1
 8003f92:	6013      	str	r3, [r2, #0]
}
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	20000948 	.word	0x20000948

08003f9c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003f9c:	4b01      	ldr	r3, [pc, #4]	@ (8003fa4 <xTaskGetTickCount+0x8>)
 8003f9e:	6818      	ldr	r0, [r3, #0]
}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	2000096c 	.word	0x2000096c

08003fa8 <xTaskIncrementTick>:
{
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003faa:	4b3a      	ldr	r3, [pc, #232]	@ (8004094 <xTaskIncrementTick+0xec>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d169      	bne.n	8004086 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fb2:	4b39      	ldr	r3, [pc, #228]	@ (8004098 <xTaskIncrementTick+0xf0>)
 8003fb4:	681d      	ldr	r5, [r3, #0]
 8003fb6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8003fb8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fba:	b9c5      	cbnz	r5, 8003fee <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003fbc:	4b37      	ldr	r3, [pc, #220]	@ (800409c <xTaskIncrementTick+0xf4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	b143      	cbz	r3, 8003fd6 <xTaskIncrementTick+0x2e>
 8003fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	e7fe      	b.n	8003fd4 <xTaskIncrementTick+0x2c>
 8003fd6:	4a31      	ldr	r2, [pc, #196]	@ (800409c <xTaskIncrementTick+0xf4>)
 8003fd8:	6811      	ldr	r1, [r2, #0]
 8003fda:	4b31      	ldr	r3, [pc, #196]	@ (80040a0 <xTaskIncrementTick+0xf8>)
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	6010      	str	r0, [r2, #0]
 8003fe0:	6019      	str	r1, [r3, #0]
 8003fe2:	4a30      	ldr	r2, [pc, #192]	@ (80040a4 <xTaskIncrementTick+0xfc>)
 8003fe4:	6813      	ldr	r3, [r2, #0]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	f7ff fd71 	bl	8003ad0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fee:	4b2e      	ldr	r3, [pc, #184]	@ (80040a8 <xTaskIncrementTick+0x100>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	42ab      	cmp	r3, r5
 8003ff4:	d93d      	bls.n	8004072 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8003ff6:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80040ac <xTaskIncrementTick+0x104>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004002:	009a      	lsls	r2, r3, #2
 8004004:	4b2a      	ldr	r3, [pc, #168]	@ (80040b0 <xTaskIncrementTick+0x108>)
 8004006:	589b      	ldr	r3, [r3, r2]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d900      	bls.n	800400e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800400c:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800400e:	4b29      	ldr	r3, [pc, #164]	@ (80040b4 <xTaskIncrementTick+0x10c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d03c      	beq.n	8004090 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8004016:	2701      	movs	r7, #1
	return xSwitchRequired;
 8004018:	e03a      	b.n	8004090 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800401a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800401c:	4b1f      	ldr	r3, [pc, #124]	@ (800409c <xTaskIncrementTick+0xf4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	b343      	cbz	r3, 8004076 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004024:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <xTaskIncrementTick+0xf4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800402c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800402e:	429d      	cmp	r5, r3
 8004030:	d326      	bcc.n	8004080 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004032:	1d26      	adds	r6, r4, #4
 8004034:	4630      	mov	r0, r6
 8004036:	f7ff f9e3 	bl	8003400 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800403a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800403c:	b11b      	cbz	r3, 8004046 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800403e:	f104 0018 	add.w	r0, r4, #24
 8004042:	f7ff f9dd 	bl	8003400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004046:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004048:	4a1b      	ldr	r2, [pc, #108]	@ (80040b8 <xTaskIncrementTick+0x110>)
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <xTaskIncrementTick+0xac>
 8004050:	4a19      	ldr	r2, [pc, #100]	@ (80040b8 <xTaskIncrementTick+0x110>)
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004058:	009a      	lsls	r2, r3, #2
 800405a:	4631      	mov	r1, r6
 800405c:	4814      	ldr	r0, [pc, #80]	@ (80040b0 <xTaskIncrementTick+0x108>)
 800405e:	4410      	add	r0, r2
 8004060:	f7ff f9aa 	bl	80033b8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004064:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004066:	4b11      	ldr	r3, [pc, #68]	@ (80040ac <xTaskIncrementTick+0x104>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	429a      	cmp	r2, r3
 800406e:	d2d4      	bcs.n	800401a <xTaskIncrementTick+0x72>
 8004070:	e7d4      	b.n	800401c <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8004072:	2700      	movs	r7, #0
 8004074:	e7d2      	b.n	800401c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004076:	4b0c      	ldr	r3, [pc, #48]	@ (80040a8 <xTaskIncrementTick+0x100>)
 8004078:	f04f 32ff 	mov.w	r2, #4294967295
 800407c:	601a      	str	r2, [r3, #0]
					break;
 800407e:	e7bb      	b.n	8003ff8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8004080:	4a09      	ldr	r2, [pc, #36]	@ (80040a8 <xTaskIncrementTick+0x100>)
 8004082:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004084:	e7b8      	b.n	8003ff8 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8004086:	4a0d      	ldr	r2, [pc, #52]	@ (80040bc <xTaskIncrementTick+0x114>)
 8004088:	6813      	ldr	r3, [r2, #0]
 800408a:	3301      	adds	r3, #1
 800408c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800408e:	2700      	movs	r7, #0
}
 8004090:	4638      	mov	r0, r7
 8004092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004094:	20000948 	.word	0x20000948
 8004098:	2000096c 	.word	0x2000096c
 800409c:	200009b8 	.word	0x200009b8
 80040a0:	200009b4 	.word	0x200009b4
 80040a4:	20000958 	.word	0x20000958
 80040a8:	20000950 	.word	0x20000950
 80040ac:	20000e44 	.word	0x20000e44
 80040b0:	200009e4 	.word	0x200009e4
 80040b4:	2000095c 	.word	0x2000095c
 80040b8:	20000968 	.word	0x20000968
 80040bc:	20000960 	.word	0x20000960

080040c0 <xTaskResumeAll>:
{
 80040c0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80040c2:	4b35      	ldr	r3, [pc, #212]	@ (8004198 <xTaskResumeAll+0xd8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	b943      	cbnz	r3, 80040da <xTaskResumeAll+0x1a>
 80040c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	e7fe      	b.n	80040d8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80040da:	f000 fc9b 	bl	8004a14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80040de:	4b2e      	ldr	r3, [pc, #184]	@ (8004198 <xTaskResumeAll+0xd8>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	3a01      	subs	r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d14f      	bne.n	800418c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040ec:	4b2b      	ldr	r3, [pc, #172]	@ (800419c <xTaskResumeAll+0xdc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	b90b      	cbnz	r3, 80040f6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80040f2:	2400      	movs	r4, #0
 80040f4:	e04b      	b.n	800418e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80040f6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040f8:	4b29      	ldr	r3, [pc, #164]	@ (80041a0 <xTaskResumeAll+0xe0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	b31b      	cbz	r3, 8004146 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fe:	4b28      	ldr	r3, [pc, #160]	@ (80041a0 <xTaskResumeAll+0xe0>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004104:	f104 0018 	add.w	r0, r4, #24
 8004108:	f7ff f97a 	bl	8003400 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800410c:	1d25      	adds	r5, r4, #4
 800410e:	4628      	mov	r0, r5
 8004110:	f7ff f976 	bl	8003400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004114:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004116:	4b23      	ldr	r3, [pc, #140]	@ (80041a4 <xTaskResumeAll+0xe4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4298      	cmp	r0, r3
 800411c:	d901      	bls.n	8004122 <xTaskResumeAll+0x62>
 800411e:	4b21      	ldr	r3, [pc, #132]	@ (80041a4 <xTaskResumeAll+0xe4>)
 8004120:	6018      	str	r0, [r3, #0]
 8004122:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004126:	4629      	mov	r1, r5
 8004128:	4b1f      	ldr	r3, [pc, #124]	@ (80041a8 <xTaskResumeAll+0xe8>)
 800412a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800412e:	f7ff f943 	bl	80033b8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004132:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004134:	4b1d      	ldr	r3, [pc, #116]	@ (80041ac <xTaskResumeAll+0xec>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413a:	429a      	cmp	r2, r3
 800413c:	d3dc      	bcc.n	80040f8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800413e:	4b1c      	ldr	r3, [pc, #112]	@ (80041b0 <xTaskResumeAll+0xf0>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e7d8      	b.n	80040f8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8004146:	b10c      	cbz	r4, 800414c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8004148:	f7ff fcc2 	bl	8003ad0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800414c:	4b19      	ldr	r3, [pc, #100]	@ (80041b4 <xTaskResumeAll+0xf4>)
 800414e:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8004150:	b984      	cbnz	r4, 8004174 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8004152:	4b17      	ldr	r3, [pc, #92]	@ (80041b0 <xTaskResumeAll+0xf0>)
 8004154:	681c      	ldr	r4, [r3, #0]
 8004156:	b1d4      	cbz	r4, 800418e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8004158:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800415c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004160:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800416c:	2401      	movs	r4, #1
 800416e:	e00e      	b.n	800418e <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004170:	3c01      	subs	r4, #1
 8004172:	d007      	beq.n	8004184 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8004174:	f7ff ff18 	bl	8003fa8 <xTaskIncrementTick>
 8004178:	2800      	cmp	r0, #0
 800417a:	d0f9      	beq.n	8004170 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800417c:	4b0c      	ldr	r3, [pc, #48]	@ (80041b0 <xTaskResumeAll+0xf0>)
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e7f5      	b.n	8004170 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8004184:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <xTaskResumeAll+0xf4>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e7e2      	b.n	8004152 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800418c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800418e:	f000 fc63 	bl	8004a58 <vPortExitCritical>
}
 8004192:	4620      	mov	r0, r4
 8004194:	bd38      	pop	{r3, r4, r5, pc}
 8004196:	bf00      	nop
 8004198:	20000948 	.word	0x20000948
 800419c:	20000970 	.word	0x20000970
 80041a0:	200009a0 	.word	0x200009a0
 80041a4:	20000968 	.word	0x20000968
 80041a8:	200009e4 	.word	0x200009e4
 80041ac:	20000e44 	.word	0x20000e44
 80041b0:	2000095c 	.word	0x2000095c
 80041b4:	20000960 	.word	0x20000960

080041b8 <vTaskDelay>:
	{
 80041b8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041ba:	b1a8      	cbz	r0, 80041e8 <vTaskDelay+0x30>
 80041bc:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80041be:	4b10      	ldr	r3, [pc, #64]	@ (8004200 <vTaskDelay+0x48>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	b143      	cbz	r3, 80041d6 <vTaskDelay+0x1e>
 80041c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	e7fe      	b.n	80041d4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80041d6:	f7ff fed9 	bl	8003f8c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041da:	2100      	movs	r1, #0
 80041dc:	4620      	mov	r0, r4
 80041de:	f7ff fdd3 	bl	8003d88 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80041e2:	f7ff ff6d 	bl	80040c0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80041e6:	b948      	cbnz	r0, 80041fc <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80041e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80041ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	f3bf 8f6f 	isb	sy
	}
 80041fc:	bd10      	pop	{r4, pc}
 80041fe:	bf00      	nop
 8004200:	20000948 	.word	0x20000948

08004204 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004204:	4b22      	ldr	r3, [pc, #136]	@ (8004290 <vTaskSwitchContext+0x8c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	b11b      	cbz	r3, 8004212 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800420a:	4b22      	ldr	r3, [pc, #136]	@ (8004294 <vTaskSwitchContext+0x90>)
 800420c:	2201      	movs	r2, #1
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8004212:	4b20      	ldr	r3, [pc, #128]	@ (8004294 <vTaskSwitchContext+0x90>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004218:	4b1f      	ldr	r3, [pc, #124]	@ (8004298 <vTaskSwitchContext+0x94>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004220:	008a      	lsls	r2, r1, #2
 8004222:	491e      	ldr	r1, [pc, #120]	@ (800429c <vTaskSwitchContext+0x98>)
 8004224:	588a      	ldr	r2, [r1, r2]
 8004226:	b95a      	cbnz	r2, 8004240 <vTaskSwitchContext+0x3c>
 8004228:	b10b      	cbz	r3, 800422e <vTaskSwitchContext+0x2a>
 800422a:	3b01      	subs	r3, #1
 800422c:	e7f6      	b.n	800421c <vTaskSwitchContext+0x18>
 800422e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	e7fe      	b.n	800423e <vTaskSwitchContext+0x3a>
 8004240:	4608      	mov	r0, r1
 8004242:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004246:	008a      	lsls	r2, r1, #2
 8004248:	4402      	add	r2, r0
 800424a:	6851      	ldr	r1, [r2, #4]
 800424c:	6849      	ldr	r1, [r1, #4]
 800424e:	6051      	str	r1, [r2, #4]
 8004250:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8004254:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8004258:	3208      	adds	r2, #8
 800425a:	4402      	add	r2, r0
 800425c:	4291      	cmp	r1, r2
 800425e:	d00f      	beq.n	8004280 <vTaskSwitchContext+0x7c>
 8004260:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004264:	0091      	lsls	r1, r2, #2
 8004266:	4a0d      	ldr	r2, [pc, #52]	@ (800429c <vTaskSwitchContext+0x98>)
 8004268:	440a      	add	r2, r1
 800426a:	6852      	ldr	r2, [r2, #4]
 800426c:	68d1      	ldr	r1, [r2, #12]
 800426e:	4a0c      	ldr	r2, [pc, #48]	@ (80042a0 <vTaskSwitchContext+0x9c>)
 8004270:	6011      	str	r1, [r2, #0]
 8004272:	4909      	ldr	r1, [pc, #36]	@ (8004298 <vTaskSwitchContext+0x94>)
 8004274:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	3354      	adds	r3, #84	@ 0x54
 800427a:	4a0a      	ldr	r2, [pc, #40]	@ (80042a4 <vTaskSwitchContext+0xa0>)
 800427c:	6013      	str	r3, [r2, #0]
}
 800427e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004280:	6848      	ldr	r0, [r1, #4]
 8004282:	4662      	mov	r2, ip
 8004284:	0091      	lsls	r1, r2, #2
 8004286:	4a05      	ldr	r2, [pc, #20]	@ (800429c <vTaskSwitchContext+0x98>)
 8004288:	440a      	add	r2, r1
 800428a:	6050      	str	r0, [r2, #4]
 800428c:	e7e8      	b.n	8004260 <vTaskSwitchContext+0x5c>
 800428e:	bf00      	nop
 8004290:	20000948 	.word	0x20000948
 8004294:	2000095c 	.word	0x2000095c
 8004298:	20000968 	.word	0x20000968
 800429c:	200009e4 	.word	0x200009e4
 80042a0:	20000e44 	.word	0x20000e44
 80042a4:	20000010 	.word	0x20000010

080042a8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80042a8:	b158      	cbz	r0, 80042c2 <vTaskPlaceOnEventList+0x1a>
{
 80042aa:	b510      	push	{r4, lr}
 80042ac:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042ae:	4a09      	ldr	r2, [pc, #36]	@ (80042d4 <vTaskPlaceOnEventList+0x2c>)
 80042b0:	6811      	ldr	r1, [r2, #0]
 80042b2:	3118      	adds	r1, #24
 80042b4:	f7ff f88b 	bl	80033ce <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042b8:	2101      	movs	r1, #1
 80042ba:	4620      	mov	r0, r4
 80042bc:	f7ff fd64 	bl	8003d88 <prvAddCurrentTaskToDelayedList>
}
 80042c0:	bd10      	pop	{r4, pc}
 80042c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80042d2:	e7fe      	b.n	80042d2 <vTaskPlaceOnEventList+0x2a>
 80042d4:	20000e44 	.word	0x20000e44

080042d8 <vTaskPlaceOnEventListRestricted>:
	{
 80042d8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80042da:	b170      	cbz	r0, 80042fa <vTaskPlaceOnEventListRestricted+0x22>
 80042dc:	460d      	mov	r5, r1
 80042de:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042e0:	4a0a      	ldr	r2, [pc, #40]	@ (800430c <vTaskPlaceOnEventListRestricted+0x34>)
 80042e2:	6811      	ldr	r1, [r2, #0]
 80042e4:	3118      	adds	r1, #24
 80042e6:	f7ff f867 	bl	80033b8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80042ea:	b10c      	cbz	r4, 80042f0 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80042ec:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042f0:	4621      	mov	r1, r4
 80042f2:	4628      	mov	r0, r5
 80042f4:	f7ff fd48 	bl	8003d88 <prvAddCurrentTaskToDelayedList>
	}
 80042f8:	bd38      	pop	{r3, r4, r5, pc}
 80042fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800430a:	e7fe      	b.n	800430a <vTaskPlaceOnEventListRestricted+0x32>
 800430c:	20000e44 	.word	0x20000e44

08004310 <xTaskRemoveFromEventList>:
{
 8004310:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004312:	68c3      	ldr	r3, [r0, #12]
 8004314:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004316:	b324      	cbz	r4, 8004362 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004318:	f104 0518 	add.w	r5, r4, #24
 800431c:	4628      	mov	r0, r5
 800431e:	f7ff f86f 	bl	8003400 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004322:	4b18      	ldr	r3, [pc, #96]	@ (8004384 <xTaskRemoveFromEventList+0x74>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	bb2b      	cbnz	r3, 8004374 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004328:	1d25      	adds	r5, r4, #4
 800432a:	4628      	mov	r0, r5
 800432c:	f7ff f868 	bl	8003400 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004330:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004332:	4b15      	ldr	r3, [pc, #84]	@ (8004388 <xTaskRemoveFromEventList+0x78>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4298      	cmp	r0, r3
 8004338:	d901      	bls.n	800433e <xTaskRemoveFromEventList+0x2e>
 800433a:	4b13      	ldr	r3, [pc, #76]	@ (8004388 <xTaskRemoveFromEventList+0x78>)
 800433c:	6018      	str	r0, [r3, #0]
 800433e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004342:	4629      	mov	r1, r5
 8004344:	4b11      	ldr	r3, [pc, #68]	@ (800438c <xTaskRemoveFromEventList+0x7c>)
 8004346:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800434a:	f7ff f835 	bl	80033b8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800434e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004350:	4b0f      	ldr	r3, [pc, #60]	@ (8004390 <xTaskRemoveFromEventList+0x80>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004356:	429a      	cmp	r2, r3
 8004358:	d911      	bls.n	800437e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800435a:	2001      	movs	r0, #1
 800435c:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <xTaskRemoveFromEventList+0x84>)
 800435e:	6018      	str	r0, [r3, #0]
}
 8004360:	bd38      	pop	{r3, r4, r5, pc}
 8004362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8004372:	e7fe      	b.n	8004372 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004374:	4629      	mov	r1, r5
 8004376:	4808      	ldr	r0, [pc, #32]	@ (8004398 <xTaskRemoveFromEventList+0x88>)
 8004378:	f7ff f81e 	bl	80033b8 <vListInsertEnd>
 800437c:	e7e7      	b.n	800434e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800437e:	2000      	movs	r0, #0
	return xReturn;
 8004380:	e7ee      	b.n	8004360 <xTaskRemoveFromEventList+0x50>
 8004382:	bf00      	nop
 8004384:	20000948 	.word	0x20000948
 8004388:	20000968 	.word	0x20000968
 800438c:	200009e4 	.word	0x200009e4
 8004390:	20000e44 	.word	0x20000e44
 8004394:	2000095c 	.word	0x2000095c
 8004398:	200009a0 	.word	0x200009a0

0800439c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800439c:	4b03      	ldr	r3, [pc, #12]	@ (80043ac <vTaskInternalSetTimeOutState+0x10>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043a2:	4b03      	ldr	r3, [pc, #12]	@ (80043b0 <vTaskInternalSetTimeOutState+0x14>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6043      	str	r3, [r0, #4]
}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000958 	.word	0x20000958
 80043b0:	2000096c 	.word	0x2000096c

080043b4 <xTaskCheckForTimeOut>:
{
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80043b6:	b1c8      	cbz	r0, 80043ec <xTaskCheckForTimeOut+0x38>
 80043b8:	460c      	mov	r4, r1
 80043ba:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80043bc:	b1f9      	cbz	r1, 80043fe <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 80043be:	f000 fb29 	bl	8004a14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80043c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004430 <xTaskCheckForTimeOut+0x7c>)
 80043c4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043c6:	686b      	ldr	r3, [r5, #4]
 80043c8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80043ca:	6822      	ldr	r2, [r4, #0]
 80043cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80043d0:	d026      	beq.n	8004420 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043d2:	4e18      	ldr	r6, [pc, #96]	@ (8004434 <xTaskCheckForTimeOut+0x80>)
 80043d4:	6836      	ldr	r6, [r6, #0]
 80043d6:	682f      	ldr	r7, [r5, #0]
 80043d8:	42b7      	cmp	r7, r6
 80043da:	d001      	beq.n	80043e0 <xTaskCheckForTimeOut+0x2c>
 80043dc:	428b      	cmp	r3, r1
 80043de:	d924      	bls.n	800442a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043e0:	4282      	cmp	r2, r0
 80043e2:	d815      	bhi.n	8004410 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80043e8:	2401      	movs	r4, #1
 80043ea:	e01a      	b.n	8004422 <xTaskCheckForTimeOut+0x6e>
 80043ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80043fc:	e7fe      	b.n	80043fc <xTaskCheckForTimeOut+0x48>
 80043fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800440e:	e7fe      	b.n	800440e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8004410:	1a5b      	subs	r3, r3, r1
 8004412:	4413      	add	r3, r2
 8004414:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004416:	4628      	mov	r0, r5
 8004418:	f7ff ffc0 	bl	800439c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800441c:	2400      	movs	r4, #0
 800441e:	e000      	b.n	8004422 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8004420:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004422:	f000 fb19 	bl	8004a58 <vPortExitCritical>
}
 8004426:	4620      	mov	r0, r4
 8004428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800442a:	2401      	movs	r4, #1
 800442c:	e7f9      	b.n	8004422 <xTaskCheckForTimeOut+0x6e>
 800442e:	bf00      	nop
 8004430:	2000096c 	.word	0x2000096c
 8004434:	20000958 	.word	0x20000958

08004438 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004438:	4b01      	ldr	r3, [pc, #4]	@ (8004440 <vTaskMissedYield+0x8>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]
}
 800443e:	4770      	bx	lr
 8004440:	2000095c 	.word	0x2000095c

08004444 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004444:	4b05      	ldr	r3, [pc, #20]	@ (800445c <xTaskGetSchedulerState+0x18>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	b133      	cbz	r3, 8004458 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800444a:	4b05      	ldr	r3, [pc, #20]	@ (8004460 <xTaskGetSchedulerState+0x1c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	b10b      	cbz	r3, 8004454 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8004450:	2000      	movs	r0, #0
	}
 8004452:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8004454:	2002      	movs	r0, #2
 8004456:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004458:	2001      	movs	r0, #1
 800445a:	4770      	bx	lr
 800445c:	20000964 	.word	0x20000964
 8004460:	20000948 	.word	0x20000948

08004464 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8004464:	2800      	cmp	r0, #0
 8004466:	d03b      	beq.n	80044e0 <xTaskPriorityDisinherit+0x7c>
	{
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800446c:	4b1e      	ldr	r3, [pc, #120]	@ (80044e8 <xTaskPriorityDisinherit+0x84>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4283      	cmp	r3, r0
 8004472:	d008      	beq.n	8004486 <xTaskPriorityDisinherit+0x22>
 8004474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	e7fe      	b.n	8004484 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8004486:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004488:	b943      	cbnz	r3, 800449c <xTaskPriorityDisinherit+0x38>
 800448a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	e7fe      	b.n	800449a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800449c:	3b01      	subs	r3, #1
 800449e:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044a0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80044a2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80044a4:	4291      	cmp	r1, r2
 80044a6:	d01d      	beq.n	80044e4 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044a8:	b10b      	cbz	r3, 80044ae <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80044aa:	2000      	movs	r0, #0
	}
 80044ac:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044ae:	1d05      	adds	r5, r0, #4
 80044b0:	4628      	mov	r0, r5
 80044b2:	f7fe ffa5 	bl	8003400 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044b6:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80044b8:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ba:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 80044be:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80044c0:	4b0a      	ldr	r3, [pc, #40]	@ (80044ec <xTaskPriorityDisinherit+0x88>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4298      	cmp	r0, r3
 80044c6:	d901      	bls.n	80044cc <xTaskPriorityDisinherit+0x68>
 80044c8:	4b08      	ldr	r3, [pc, #32]	@ (80044ec <xTaskPriorityDisinherit+0x88>)
 80044ca:	6018      	str	r0, [r3, #0]
 80044cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044d0:	4629      	mov	r1, r5
 80044d2:	4b07      	ldr	r3, [pc, #28]	@ (80044f0 <xTaskPriorityDisinherit+0x8c>)
 80044d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80044d8:	f7fe ff6e 	bl	80033b8 <vListInsertEnd>
					xReturn = pdTRUE;
 80044dc:	2001      	movs	r0, #1
 80044de:	e7e5      	b.n	80044ac <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80044e0:	2000      	movs	r0, #0
	}
 80044e2:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80044e4:	2000      	movs	r0, #0
 80044e6:	e7e1      	b.n	80044ac <xTaskPriorityDisinherit+0x48>
 80044e8:	20000e44 	.word	0x20000e44
 80044ec:	20000968 	.word	0x20000968
 80044f0:	200009e4 	.word	0x200009e4

080044f4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80044f4:	4b06      	ldr	r3, [pc, #24]	@ (8004510 <prvGetNextExpireTime+0x1c>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	6813      	ldr	r3, [r2, #0]
 80044fa:	b92b      	cbnz	r3, 8004508 <prvGetNextExpireTime+0x14>
 80044fc:	2301      	movs	r3, #1
 80044fe:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004500:	b923      	cbnz	r3, 800450c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004502:	68d3      	ldr	r3, [r2, #12]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004508:	2300      	movs	r3, #0
 800450a:	e7f8      	b.n	80044fe <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800450c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800450e:	4770      	bx	lr
 8004510:	20000f48 	.word	0x20000f48

08004514 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004514:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004516:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004518:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800451a:	4291      	cmp	r1, r2
 800451c:	d80c      	bhi.n	8004538 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800451e:	1ad2      	subs	r2, r2, r3
 8004520:	6983      	ldr	r3, [r0, #24]
 8004522:	429a      	cmp	r2, r3
 8004524:	d301      	bcc.n	800452a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004526:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8004528:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800452a:	1d01      	adds	r1, r0, #4
 800452c:	4b09      	ldr	r3, [pc, #36]	@ (8004554 <prvInsertTimerInActiveList+0x40>)
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	f7fe ff4d 	bl	80033ce <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8004534:	2000      	movs	r0, #0
 8004536:	e7f7      	b.n	8004528 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004538:	429a      	cmp	r2, r3
 800453a:	d201      	bcs.n	8004540 <prvInsertTimerInActiveList+0x2c>
 800453c:	4299      	cmp	r1, r3
 800453e:	d206      	bcs.n	800454e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004540:	1d01      	adds	r1, r0, #4
 8004542:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <prvInsertTimerInActiveList+0x44>)
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	f7fe ff42 	bl	80033ce <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800454a:	2000      	movs	r0, #0
 800454c:	e7ec      	b.n	8004528 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800454e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8004550:	e7ea      	b.n	8004528 <prvInsertTimerInActiveList+0x14>
 8004552:	bf00      	nop
 8004554:	20000f44 	.word	0x20000f44
 8004558:	20000f48 	.word	0x20000f48

0800455c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800455c:	b530      	push	{r4, r5, lr}
 800455e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004560:	f000 fa58 	bl	8004a14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004564:	4b11      	ldr	r3, [pc, #68]	@ (80045ac <prvCheckForValidListAndQueue+0x50>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	b11b      	cbz	r3, 8004572 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800456a:	f000 fa75 	bl	8004a58 <vPortExitCritical>
}
 800456e:	b003      	add	sp, #12
 8004570:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8004572:	4d0f      	ldr	r5, [pc, #60]	@ (80045b0 <prvCheckForValidListAndQueue+0x54>)
 8004574:	4628      	mov	r0, r5
 8004576:	f7fe ff11 	bl	800339c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800457a:	4c0e      	ldr	r4, [pc, #56]	@ (80045b4 <prvCheckForValidListAndQueue+0x58>)
 800457c:	4620      	mov	r0, r4
 800457e:	f7fe ff0d 	bl	800339c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004582:	4b0d      	ldr	r3, [pc, #52]	@ (80045b8 <prvCheckForValidListAndQueue+0x5c>)
 8004584:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004586:	4b0d      	ldr	r3, [pc, #52]	@ (80045bc <prvCheckForValidListAndQueue+0x60>)
 8004588:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800458a:	2300      	movs	r3, #0
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	4b0c      	ldr	r3, [pc, #48]	@ (80045c0 <prvCheckForValidListAndQueue+0x64>)
 8004590:	4a0c      	ldr	r2, [pc, #48]	@ (80045c4 <prvCheckForValidListAndQueue+0x68>)
 8004592:	2110      	movs	r1, #16
 8004594:	200a      	movs	r0, #10
 8004596:	f7ff f839 	bl	800360c <xQueueGenericCreateStatic>
 800459a:	4b04      	ldr	r3, [pc, #16]	@ (80045ac <prvCheckForValidListAndQueue+0x50>)
 800459c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800459e:	2800      	cmp	r0, #0
 80045a0:	d0e3      	beq.n	800456a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045a2:	4909      	ldr	r1, [pc, #36]	@ (80045c8 <prvCheckForValidListAndQueue+0x6c>)
 80045a4:	f7ff fa56 	bl	8003a54 <vQueueAddToRegistry>
 80045a8:	e7df      	b.n	800456a <prvCheckForValidListAndQueue+0xe>
 80045aa:	bf00      	nop
 80045ac:	20000f40 	.word	0x20000f40
 80045b0:	20000f60 	.word	0x20000f60
 80045b4:	20000f4c 	.word	0x20000f4c
 80045b8:	20000f48 	.word	0x20000f48
 80045bc:	20000f44 	.word	0x20000f44
 80045c0:	20000e48 	.word	0x20000e48
 80045c4:	20000e98 	.word	0x20000e98
 80045c8:	080053e4 	.word	0x080053e4

080045cc <xTimerCreateTimerTask>:
{
 80045cc:	b510      	push	{r4, lr}
 80045ce:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80045d0:	f7ff ffc4 	bl	800455c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80045d4:	4b12      	ldr	r3, [pc, #72]	@ (8004620 <xTimerCreateTimerTask+0x54>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	b1cb      	cbz	r3, 800460e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045da:	2400      	movs	r4, #0
 80045dc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045de:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045e0:	aa07      	add	r2, sp, #28
 80045e2:	a906      	add	r1, sp, #24
 80045e4:	a805      	add	r0, sp, #20
 80045e6:	f7fe fecd 	bl	8003384 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045ea:	9b05      	ldr	r3, [sp, #20]
 80045ec:	9302      	str	r3, [sp, #8]
 80045ee:	9b06      	ldr	r3, [sp, #24]
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	2302      	movs	r3, #2
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	4623      	mov	r3, r4
 80045f8:	9a07      	ldr	r2, [sp, #28]
 80045fa:	490a      	ldr	r1, [pc, #40]	@ (8004624 <xTimerCreateTimerTask+0x58>)
 80045fc:	480a      	ldr	r0, [pc, #40]	@ (8004628 <xTimerCreateTimerTask+0x5c>)
 80045fe:	f7ff fc01 	bl	8003e04 <xTaskCreateStatic>
 8004602:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <xTimerCreateTimerTask+0x60>)
 8004604:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8004606:	b110      	cbz	r0, 800460e <xTimerCreateTimerTask+0x42>
}
 8004608:	2001      	movs	r0, #1
 800460a:	b008      	add	sp, #32
 800460c:	bd10      	pop	{r4, pc}
 800460e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800461e:	e7fe      	b.n	800461e <xTimerCreateTimerTask+0x52>
 8004620:	20000f40 	.word	0x20000f40
 8004624:	080053ec 	.word	0x080053ec
 8004628:	08004931 	.word	0x08004931
 800462c:	20000f3c 	.word	0x20000f3c

08004630 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8004630:	b1b8      	cbz	r0, 8004662 <xTimerGenericCommand+0x32>
 8004632:	469c      	mov	ip, r3
 8004634:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8004636:	4818      	ldr	r0, [pc, #96]	@ (8004698 <xTimerGenericCommand+0x68>)
 8004638:	6800      	ldr	r0, [r0, #0]
 800463a:	b358      	cbz	r0, 8004694 <xTimerGenericCommand+0x64>
{
 800463c:	b500      	push	{lr}
 800463e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8004640:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004642:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004644:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004646:	2905      	cmp	r1, #5
 8004648:	dc1c      	bgt.n	8004684 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800464a:	f7ff fefb 	bl	8004444 <xTaskGetSchedulerState>
 800464e:	2802      	cmp	r0, #2
 8004650:	d010      	beq.n	8004674 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004652:	2300      	movs	r3, #0
 8004654:	461a      	mov	r2, r3
 8004656:	4669      	mov	r1, sp
 8004658:	480f      	ldr	r0, [pc, #60]	@ (8004698 <xTimerGenericCommand+0x68>)
 800465a:	6800      	ldr	r0, [r0, #0]
 800465c:	f7ff f820 	bl	80036a0 <xQueueGenericSend>
 8004660:	e015      	b.n	800468e <xTimerGenericCommand+0x5e>
 8004662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8004672:	e7fe      	b.n	8004672 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004674:	2300      	movs	r3, #0
 8004676:	9a06      	ldr	r2, [sp, #24]
 8004678:	4669      	mov	r1, sp
 800467a:	4807      	ldr	r0, [pc, #28]	@ (8004698 <xTimerGenericCommand+0x68>)
 800467c:	6800      	ldr	r0, [r0, #0]
 800467e:	f7ff f80f 	bl	80036a0 <xQueueGenericSend>
 8004682:	e004      	b.n	800468e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004684:	2300      	movs	r3, #0
 8004686:	4662      	mov	r2, ip
 8004688:	4669      	mov	r1, sp
 800468a:	f7ff f8cd 	bl	8003828 <xQueueGenericSendFromISR>
}
 800468e:	b005      	add	sp, #20
 8004690:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8004694:	2000      	movs	r0, #0
}
 8004696:	4770      	bx	lr
 8004698:	20000f40 	.word	0x20000f40

0800469c <prvSwitchTimerLists>:
{
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004710 <prvSwitchTimerLists+0x74>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	b362      	cbz	r2, 8004702 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ac:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046ae:	1d25      	adds	r5, r4, #4
 80046b0:	4628      	mov	r0, r5
 80046b2:	f7fe fea5 	bl	8003400 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046b6:	6a23      	ldr	r3, [r4, #32]
 80046b8:	4620      	mov	r0, r4
 80046ba:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046bc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80046c0:	f013 0f04 	tst.w	r3, #4
 80046c4:	d0ec      	beq.n	80046a0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80046c6:	69a3      	ldr	r3, [r4, #24]
 80046c8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80046ca:	429e      	cmp	r6, r3
 80046cc:	d207      	bcs.n	80046de <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80046ce:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046d0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046d2:	4629      	mov	r1, r5
 80046d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004710 <prvSwitchTimerLists+0x74>)
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	f7fe fe79 	bl	80033ce <vListInsert>
 80046dc:	e7e0      	b.n	80046a0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046de:	2100      	movs	r1, #0
 80046e0:	9100      	str	r1, [sp, #0]
 80046e2:	460b      	mov	r3, r1
 80046e4:	4632      	mov	r2, r6
 80046e6:	4620      	mov	r0, r4
 80046e8:	f7ff ffa2 	bl	8004630 <xTimerGenericCommand>
				configASSERT( xResult );
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d1d7      	bne.n	80046a0 <prvSwitchTimerLists+0x4>
 80046f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	e7fe      	b.n	8004700 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8004702:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <prvSwitchTimerLists+0x78>)
 8004704:	6810      	ldr	r0, [r2, #0]
 8004706:	4902      	ldr	r1, [pc, #8]	@ (8004710 <prvSwitchTimerLists+0x74>)
 8004708:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800470a:	6013      	str	r3, [r2, #0]
}
 800470c:	b002      	add	sp, #8
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	20000f48 	.word	0x20000f48
 8004714:	20000f44 	.word	0x20000f44

08004718 <prvSampleTimeNow>:
{
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800471c:	f7ff fc3e 	bl	8003f9c <xTaskGetTickCount>
 8004720:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8004722:	4b07      	ldr	r3, [pc, #28]	@ (8004740 <prvSampleTimeNow+0x28>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4283      	cmp	r3, r0
 8004728:	d805      	bhi.n	8004736 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800472a:	2300      	movs	r3, #0
 800472c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800472e:	4b04      	ldr	r3, [pc, #16]	@ (8004740 <prvSampleTimeNow+0x28>)
 8004730:	601c      	str	r4, [r3, #0]
}
 8004732:	4620      	mov	r0, r4
 8004734:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8004736:	f7ff ffb1 	bl	800469c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800473a:	2301      	movs	r3, #1
 800473c:	602b      	str	r3, [r5, #0]
 800473e:	e7f6      	b.n	800472e <prvSampleTimeNow+0x16>
 8004740:	20000f38 	.word	0x20000f38

08004744 <prvProcessExpiredTimer>:
{
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	4606      	mov	r6, r0
 800474a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800474c:	4917      	ldr	r1, [pc, #92]	@ (80047ac <prvProcessExpiredTimer+0x68>)
 800474e:	6809      	ldr	r1, [r1, #0]
 8004750:	68c9      	ldr	r1, [r1, #12]
 8004752:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004754:	1d20      	adds	r0, r4, #4
 8004756:	f7fe fe53 	bl	8003400 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800475a:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 800475e:	f01c 0f04 	tst.w	ip, #4
 8004762:	d108      	bne.n	8004776 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004764:	f02c 0c01 	bic.w	ip, ip, #1
 8004768:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800476c:	6a23      	ldr	r3, [r4, #32]
 800476e:	4620      	mov	r0, r4
 8004770:	4798      	blx	r3
}
 8004772:	b002      	add	sp, #8
 8004774:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004776:	69a1      	ldr	r1, [r4, #24]
 8004778:	4633      	mov	r3, r6
 800477a:	462a      	mov	r2, r5
 800477c:	4431      	add	r1, r6
 800477e:	4620      	mov	r0, r4
 8004780:	f7ff fec8 	bl	8004514 <prvInsertTimerInActiveList>
 8004784:	2800      	cmp	r0, #0
 8004786:	d0f1      	beq.n	800476c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004788:	2100      	movs	r1, #0
 800478a:	9100      	str	r1, [sp, #0]
 800478c:	460b      	mov	r3, r1
 800478e:	4632      	mov	r2, r6
 8004790:	4620      	mov	r0, r4
 8004792:	f7ff ff4d 	bl	8004630 <xTimerGenericCommand>
			configASSERT( xResult );
 8004796:	2800      	cmp	r0, #0
 8004798:	d1e8      	bne.n	800476c <prvProcessExpiredTimer+0x28>
 800479a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	e7fe      	b.n	80047aa <prvProcessExpiredTimer+0x66>
 80047ac:	20000f48 	.word	0x20000f48

080047b0 <prvProcessTimerOrBlockTask>:
{
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	4606      	mov	r6, r0
 80047b6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 80047b8:	f7ff fbe8 	bl	8003f8c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047bc:	a801      	add	r0, sp, #4
 80047be:	f7ff ffab 	bl	8004718 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80047c2:	9b01      	ldr	r3, [sp, #4]
 80047c4:	bb33      	cbnz	r3, 8004814 <prvProcessTimerOrBlockTask+0x64>
 80047c6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047c8:	b9e4      	cbnz	r4, 8004804 <prvProcessTimerOrBlockTask+0x54>
 80047ca:	42b0      	cmp	r0, r6
 80047cc:	d213      	bcs.n	80047f6 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047ce:	4622      	mov	r2, r4
 80047d0:	1b71      	subs	r1, r6, r5
 80047d2:	4b12      	ldr	r3, [pc, #72]	@ (800481c <prvProcessTimerOrBlockTask+0x6c>)
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	f7ff f951 	bl	8003a7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047da:	f7ff fc71 	bl	80040c0 <xTaskResumeAll>
 80047de:	b9d8      	cbnz	r0, 8004818 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 80047e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80047e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	e010      	b.n	8004818 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 80047f6:	f7ff fc63 	bl	80040c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047fa:	4629      	mov	r1, r5
 80047fc:	4630      	mov	r0, r6
 80047fe:	f7ff ffa1 	bl	8004744 <prvProcessExpiredTimer>
 8004802:	e009      	b.n	8004818 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004804:	4a06      	ldr	r2, [pc, #24]	@ (8004820 <prvProcessTimerOrBlockTask+0x70>)
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	b90a      	cbnz	r2, 8004810 <prvProcessTimerOrBlockTask+0x60>
 800480c:	2401      	movs	r4, #1
 800480e:	e7de      	b.n	80047ce <prvProcessTimerOrBlockTask+0x1e>
 8004810:	461c      	mov	r4, r3
 8004812:	e7dc      	b.n	80047ce <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8004814:	f7ff fc54 	bl	80040c0 <xTaskResumeAll>
}
 8004818:	b002      	add	sp, #8
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	20000f40 	.word	0x20000f40
 8004820:	20000f44 	.word	0x20000f44

08004824 <prvProcessReceivedCommands>:
{
 8004824:	b510      	push	{r4, lr}
 8004826:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004828:	e002      	b.n	8004830 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800482a:	9b04      	ldr	r3, [sp, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	da0f      	bge.n	8004850 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004830:	2200      	movs	r2, #0
 8004832:	a904      	add	r1, sp, #16
 8004834:	4b3d      	ldr	r3, [pc, #244]	@ (800492c <prvProcessReceivedCommands+0x108>)
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	f7ff f85d 	bl	80038f6 <xQueueReceive>
 800483c:	2800      	cmp	r0, #0
 800483e:	d073      	beq.n	8004928 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004840:	9b04      	ldr	r3, [sp, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	daf1      	bge.n	800482a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004846:	9907      	ldr	r1, [sp, #28]
 8004848:	9806      	ldr	r0, [sp, #24]
 800484a:	9b05      	ldr	r3, [sp, #20]
 800484c:	4798      	blx	r3
 800484e:	e7ec      	b.n	800482a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004850:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004852:	6963      	ldr	r3, [r4, #20]
 8004854:	b113      	cbz	r3, 800485c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004856:	1d20      	adds	r0, r4, #4
 8004858:	f7fe fdd2 	bl	8003400 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800485c:	a803      	add	r0, sp, #12
 800485e:	f7ff ff5b 	bl	8004718 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8004862:	9b04      	ldr	r3, [sp, #16]
 8004864:	2b09      	cmp	r3, #9
 8004866:	d8e3      	bhi.n	8004830 <prvProcessReceivedCommands+0xc>
 8004868:	e8df f003 	tbb	[pc, r3]
 800486c:	30050505 	.word	0x30050505
 8004870:	05055037 	.word	0x05055037
 8004874:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004876:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004882:	9b05      	ldr	r3, [sp, #20]
 8004884:	69a1      	ldr	r1, [r4, #24]
 8004886:	4602      	mov	r2, r0
 8004888:	4419      	add	r1, r3
 800488a:	4620      	mov	r0, r4
 800488c:	f7ff fe42 	bl	8004514 <prvInsertTimerInActiveList>
 8004890:	2800      	cmp	r0, #0
 8004892:	d0cd      	beq.n	8004830 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004894:	6a23      	ldr	r3, [r4, #32]
 8004896:	4620      	mov	r0, r4
 8004898:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800489a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800489e:	f013 0f04 	tst.w	r3, #4
 80048a2:	d0c5      	beq.n	8004830 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048a4:	69a2      	ldr	r2, [r4, #24]
 80048a6:	2100      	movs	r1, #0
 80048a8:	9100      	str	r1, [sp, #0]
 80048aa:	460b      	mov	r3, r1
 80048ac:	9805      	ldr	r0, [sp, #20]
 80048ae:	4402      	add	r2, r0
 80048b0:	4620      	mov	r0, r4
 80048b2:	f7ff febd 	bl	8004630 <xTimerGenericCommand>
							configASSERT( xResult );
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d1ba      	bne.n	8004830 <prvProcessReceivedCommands+0xc>
 80048ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	e7fe      	b.n	80048ca <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048cc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 80048d8:	e7aa      	b.n	8004830 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048da:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048e6:	9905      	ldr	r1, [sp, #20]
 80048e8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048ea:	b131      	cbz	r1, 80048fa <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048ec:	4603      	mov	r3, r0
 80048ee:	4602      	mov	r2, r0
 80048f0:	4401      	add	r1, r0
 80048f2:	4620      	mov	r0, r4
 80048f4:	f7ff fe0e 	bl	8004514 <prvInsertTimerInActiveList>
					break;
 80048f8:	e79a      	b.n	8004830 <prvProcessReceivedCommands+0xc>
 80048fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800490a:	e7fe      	b.n	800490a <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800490c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004910:	f013 0f02 	tst.w	r3, #2
 8004914:	d004      	beq.n	8004920 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004916:	f023 0301 	bic.w	r3, r3, #1
 800491a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800491e:	e787      	b.n	8004830 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8004920:	4620      	mov	r0, r4
 8004922:	f000 fab1 	bl	8004e88 <vPortFree>
 8004926:	e783      	b.n	8004830 <prvProcessReceivedCommands+0xc>
}
 8004928:	b008      	add	sp, #32
 800492a:	bd10      	pop	{r4, pc}
 800492c:	20000f40 	.word	0x20000f40

08004930 <prvTimerTask>:
{
 8004930:	b500      	push	{lr}
 8004932:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004934:	a801      	add	r0, sp, #4
 8004936:	f7ff fddd 	bl	80044f4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800493a:	9901      	ldr	r1, [sp, #4]
 800493c:	f7ff ff38 	bl	80047b0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8004940:	f7ff ff70 	bl	8004824 <prvProcessReceivedCommands>
	for( ;; )
 8004944:	e7f6      	b.n	8004934 <prvTimerTask+0x4>
	...

08004948 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004948:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800494a:	2300      	movs	r3, #0
 800494c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800494e:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <prvTaskExitError+0x3c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004956:	d008      	beq.n	800496a <prvTaskExitError+0x22>
 8004958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	e7fe      	b.n	8004968 <prvTaskExitError+0x20>
 800496a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800497a:	9b01      	ldr	r3, [sp, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0fc      	beq.n	800497a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004980:	b002      	add	sp, #8
 8004982:	4770      	bx	lr
 8004984:	2000000c 	.word	0x2000000c

08004988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004988:	4808      	ldr	r0, [pc, #32]	@ (80049ac <prvPortStartFirstTask+0x24>)
 800498a:	6800      	ldr	r0, [r0, #0]
 800498c:	6800      	ldr	r0, [r0, #0]
 800498e:	f380 8808 	msr	MSP, r0
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8814 	msr	CONTROL, r0
 800499a:	b662      	cpsie	i
 800499c:	b661      	cpsie	f
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	df00      	svc	0
 80049a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049aa:	0000      	.short	0x0000
 80049ac:	e000ed08 	.word	0xe000ed08

080049b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049b0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80049c0 <vPortEnableVFP+0x10>
 80049b4:	6801      	ldr	r1, [r0, #0]
 80049b6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80049ba:	6001      	str	r1, [r0, #0]
 80049bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049be:	0000      	.short	0x0000
 80049c0:	e000ed88 	.word	0xe000ed88

080049c4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049c8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049cc:	f021 0101 	bic.w	r1, r1, #1
 80049d0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049d4:	4b05      	ldr	r3, [pc, #20]	@ (80049ec <pxPortInitialiseStack+0x28>)
 80049d6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049da:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049de:	f06f 0302 	mvn.w	r3, #2
 80049e2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80049e6:	3844      	subs	r0, #68	@ 0x44
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	08004949 	.word	0x08004949

080049f0 <SVC_Handler>:
	__asm volatile (
 80049f0:	4b07      	ldr	r3, [pc, #28]	@ (8004a10 <pxCurrentTCBConst2>)
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	6808      	ldr	r0, [r1, #0]
 80049f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fa:	f380 8809 	msr	PSP, r0
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f380 8811 	msr	BASEPRI, r0
 8004a0a:	4770      	bx	lr
 8004a0c:	f3af 8000 	nop.w

08004a10 <pxCurrentTCBConst2>:
 8004a10:	20000e44 	.word	0x20000e44

08004a14 <vPortEnterCritical>:
 8004a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004a24:	4a0b      	ldr	r2, [pc, #44]	@ (8004a54 <vPortEnterCritical+0x40>)
 8004a26:	6813      	ldr	r3, [r2, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d000      	beq.n	8004a32 <vPortEnterCritical+0x1e>
}
 8004a30:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a32:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004a36:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8004a3a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8004a3e:	d0f7      	beq.n	8004a30 <vPortEnterCritical+0x1c>
 8004a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	e7fe      	b.n	8004a50 <vPortEnterCritical+0x3c>
 8004a52:	bf00      	nop
 8004a54:	2000000c 	.word	0x2000000c

08004a58 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004a58:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <vPortExitCritical+0x28>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	b943      	cbnz	r3, 8004a70 <vPortExitCritical+0x18>
 8004a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	e7fe      	b.n	8004a6e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004a70:	3b01      	subs	r3, #1
 8004a72:	4a03      	ldr	r2, [pc, #12]	@ (8004a80 <vPortExitCritical+0x28>)
 8004a74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a76:	b90b      	cbnz	r3, 8004a7c <vPortExitCritical+0x24>
	__asm volatile
 8004a78:	f383 8811 	msr	BASEPRI, r3
}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	2000000c 	.word	0x2000000c
	...

08004a90 <PendSV_Handler>:
	__asm volatile
 8004a90:	f3ef 8009 	mrs	r0, PSP
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	4b15      	ldr	r3, [pc, #84]	@ (8004af0 <pxCurrentTCBConst>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	f01e 0f10 	tst.w	lr, #16
 8004aa0:	bf08      	it	eq
 8004aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aaa:	6010      	str	r0, [r2, #0]
 8004aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ab4:	f380 8811 	msr	BASEPRI, r0
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f7ff fba0 	bl	8004204 <vTaskSwitchContext>
 8004ac4:	f04f 0000 	mov.w	r0, #0
 8004ac8:	f380 8811 	msr	BASEPRI, r0
 8004acc:	bc09      	pop	{r0, r3}
 8004ace:	6819      	ldr	r1, [r3, #0]
 8004ad0:	6808      	ldr	r0, [r1, #0]
 8004ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad6:	f01e 0f10 	tst.w	lr, #16
 8004ada:	bf08      	it	eq
 8004adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ae0:	f380 8809 	msr	PSP, r0
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	f3af 8000 	nop.w

08004af0 <pxCurrentTCBConst>:
 8004af0:	20000e44 	.word	0x20000e44

08004af4 <xPortSysTickHandler>:
{
 8004af4:	b508      	push	{r3, lr}
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004b06:	f7ff fa4f 	bl	8003fa8 <xTaskIncrementTick>
 8004b0a:	b128      	cbz	r0, 8004b18 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b0c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004b10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b14:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f383 8811 	msr	BASEPRI, r3
}
 8004b1e:	bd08      	pop	{r3, pc}

08004b20 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b20:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004b24:	2300      	movs	r3, #0
 8004b26:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b28:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b2a:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <vPortSetupTimerInterrupt+0x20>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4905      	ldr	r1, [pc, #20]	@ (8004b44 <vPortSetupTimerInterrupt+0x24>)
 8004b30:	fba1 1303 	umull	r1, r3, r1, r3
 8004b34:	099b      	lsrs	r3, r3, #6
 8004b36:	3b01      	subs	r3, #1
 8004b38:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b3a:	2307      	movs	r3, #7
 8004b3c:	6113      	str	r3, [r2, #16]
}
 8004b3e:	4770      	bx	lr
 8004b40:	20000000 	.word	0x20000000
 8004b44:	10624dd3 	.word	0x10624dd3

08004b48 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b48:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004b4c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8004b50:	4b3d      	ldr	r3, [pc, #244]	@ (8004c48 <xPortStartScheduler+0x100>)
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d01c      	beq.n	8004b90 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004b5a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8004b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c4c <xPortStartScheduler+0x104>)
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d01e      	beq.n	8004ba2 <xPortStartScheduler+0x5a>
{
 8004b64:	b530      	push	{r4, r5, lr}
 8004b66:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b68:	4b39      	ldr	r3, [pc, #228]	@ (8004c50 <xPortStartScheduler+0x108>)
 8004b6a:	781a      	ldrb	r2, [r3, #0]
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b70:	22ff      	movs	r2, #255	@ 0xff
 8004b72:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004b80:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b84:	4a33      	ldr	r2, [pc, #204]	@ (8004c54 <xPortStartScheduler+0x10c>)
 8004b86:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b88:	4b33      	ldr	r3, [pc, #204]	@ (8004c58 <xPortStartScheduler+0x110>)
 8004b8a:	2207      	movs	r2, #7
 8004b8c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b8e:	e01b      	b.n	8004bc8 <xPortStartScheduler+0x80>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ba0:	e7fe      	b.n	8004ba0 <xPortStartScheduler+0x58>
 8004ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004bb2:	e7fe      	b.n	8004bb2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8004bb4:	4a28      	ldr	r2, [pc, #160]	@ (8004c58 <xPortStartScheduler+0x110>)
 8004bb6:	6813      	ldr	r3, [r2, #0]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bbc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004bcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004bd0:	d1f0      	bne.n	8004bb4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bd2:	4b21      	ldr	r3, [pc, #132]	@ (8004c58 <xPortStartScheduler+0x110>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d008      	beq.n	8004bec <xPortStartScheduler+0xa4>
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	e7fe      	b.n	8004bea <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	4a1a      	ldr	r2, [pc, #104]	@ (8004c58 <xPortStartScheduler+0x110>)
 8004bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bf2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bf6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bf8:	9b01      	ldr	r3, [sp, #4]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	4a14      	ldr	r2, [pc, #80]	@ (8004c50 <xPortStartScheduler+0x108>)
 8004bfe:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c00:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8004c04:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8004c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c0c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c10:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8004c14:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004c18:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8004c1c:	f7ff ff80 	bl	8004b20 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004c20:	2500      	movs	r5, #0
 8004c22:	4b0e      	ldr	r3, [pc, #56]	@ (8004c5c <xPortStartScheduler+0x114>)
 8004c24:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8004c26:	f7ff fec3 	bl	80049b0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c2a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8004c2e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004c32:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8004c36:	f7ff fea7 	bl	8004988 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004c3a:	f7ff fae3 	bl	8004204 <vTaskSwitchContext>
	prvTaskExitError();
 8004c3e:	f7ff fe83 	bl	8004948 <prvTaskExitError>
}
 8004c42:	4628      	mov	r0, r5
 8004c44:	b003      	add	sp, #12
 8004c46:	bd30      	pop	{r4, r5, pc}
 8004c48:	410fc271 	.word	0x410fc271
 8004c4c:	410fc270 	.word	0x410fc270
 8004c50:	e000e400 	.word	0xe000e400
 8004c54:	20000f78 	.word	0x20000f78
 8004c58:	20000f74 	.word	0x20000f74
 8004c5c:	2000000c 	.word	0x2000000c

08004c60 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c60:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c64:	2b0f      	cmp	r3, #15
 8004c66:	d90f      	bls.n	8004c88 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c68:	4a11      	ldr	r2, [pc, #68]	@ (8004cb0 <vPortValidateInterruptPriority+0x50>)
 8004c6a:	5c9b      	ldrb	r3, [r3, r2]
 8004c6c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c6e:	4a11      	ldr	r2, [pc, #68]	@ (8004cb4 <vPortValidateInterruptPriority+0x54>)
 8004c70:	7812      	ldrb	r2, [r2, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d908      	bls.n	8004c88 <vPortValidateInterruptPriority+0x28>
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	e7fe      	b.n	8004c86 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c88:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004c8c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8004c90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c94:	4a08      	ldr	r2, [pc, #32]	@ (8004cb8 <vPortValidateInterruptPriority+0x58>)
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d908      	bls.n	8004cae <vPortValidateInterruptPriority+0x4e>
 8004c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	e7fe      	b.n	8004cac <vPortValidateInterruptPriority+0x4c>
	}
 8004cae:	4770      	bx	lr
 8004cb0:	e000e3f0 	.word	0xe000e3f0
 8004cb4:	20000f78 	.word	0x20000f78
 8004cb8:	20000f74 	.word	0x20000f74

08004cbc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cbc:	4a12      	ldr	r2, [pc, #72]	@ (8004d08 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cbe:	f012 0f07 	tst.w	r2, #7
 8004cc2:	d01e      	beq.n	8004d02 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cc4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cca:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 8004cce:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cd2:	480e      	ldr	r0, [pc, #56]	@ (8004d0c <prvHeapInit+0x50>)
 8004cd4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cda:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8004cdc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cde:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8004ce2:	480b      	ldr	r0, [pc, #44]	@ (8004d10 <prvHeapInit+0x54>)
 8004ce4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8004ce6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ce8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cea:	1a99      	subs	r1, r3, r2
 8004cec:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cee:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cf0:	4b08      	ldr	r3, [pc, #32]	@ (8004d14 <prvHeapInit+0x58>)
 8004cf2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cf4:	4b08      	ldr	r3, [pc, #32]	@ (8004d18 <prvHeapInit+0x5c>)
 8004cf6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cf8:	4b08      	ldr	r3, [pc, #32]	@ (8004d1c <prvHeapInit+0x60>)
 8004cfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004cfe:	601a      	str	r2, [r3, #0]
}
 8004d00:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d02:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004d06:	e7e4      	b.n	8004cd2 <prvHeapInit+0x16>
 8004d08:	20000f9c 	.word	0x20000f9c
 8004d0c:	20000f94 	.word	0x20000f94
 8004d10:	20000f90 	.word	0x20000f90
 8004d14:	20000f88 	.word	0x20000f88
 8004d18:	20000f8c 	.word	0x20000f8c
 8004d1c:	20000f7c 	.word	0x20000f7c

08004d20 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d20:	4b16      	ldr	r3, [pc, #88]	@ (8004d7c <prvInsertBlockIntoFreeList+0x5c>)
 8004d22:	461a      	mov	r2, r3
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4283      	cmp	r3, r0
 8004d28:	d3fb      	bcc.n	8004d22 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d2a:	6851      	ldr	r1, [r2, #4]
 8004d2c:	eb02 0c01 	add.w	ip, r2, r1
 8004d30:	4584      	cmp	ip, r0
 8004d32:	d009      	beq.n	8004d48 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d34:	6841      	ldr	r1, [r0, #4]
 8004d36:	eb00 0c01 	add.w	ip, r0, r1
 8004d3a:	4563      	cmp	r3, ip
 8004d3c:	d009      	beq.n	8004d52 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d3e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d40:	4290      	cmp	r0, r2
 8004d42:	d019      	beq.n	8004d78 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d44:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8004d46:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d48:	6840      	ldr	r0, [r0, #4]
 8004d4a:	4401      	add	r1, r0
 8004d4c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8004d4e:	4610      	mov	r0, r2
 8004d50:	e7f0      	b.n	8004d34 <prvInsertBlockIntoFreeList+0x14>
{
 8004d52:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d54:	4c0a      	ldr	r4, [pc, #40]	@ (8004d80 <prvInsertBlockIntoFreeList+0x60>)
 8004d56:	6824      	ldr	r4, [r4, #0]
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	d00b      	beq.n	8004d74 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4419      	add	r1, r3
 8004d60:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8004d68:	4290      	cmp	r0, r2
 8004d6a:	d000      	beq.n	8004d6e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d6c:	6010      	str	r0, [r2, #0]
	}
}
 8004d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d72:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d74:	6004      	str	r4, [r0, #0]
 8004d76:	e7f7      	b.n	8004d68 <prvInsertBlockIntoFreeList+0x48>
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	20000f94 	.word	0x20000f94
 8004d80:	20000f90 	.word	0x20000f90

08004d84 <pvPortMalloc>:
{
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004d88:	f7ff f900 	bl	8003f8c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004d8c:	4b38      	ldr	r3, [pc, #224]	@ (8004e70 <pvPortMalloc+0xec>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	b1b3      	cbz	r3, 8004dc0 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d92:	4b38      	ldr	r3, [pc, #224]	@ (8004e74 <pvPortMalloc+0xf0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	421c      	tst	r4, r3
 8004d98:	d150      	bne.n	8004e3c <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8004d9a:	2c00      	cmp	r4, #0
 8004d9c:	d050      	beq.n	8004e40 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8004d9e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004da2:	f014 0f07 	tst.w	r4, #7
 8004da6:	d002      	beq.n	8004dae <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004da8:	f022 0207 	bic.w	r2, r2, #7
 8004dac:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	d055      	beq.n	8004e5e <pvPortMalloc+0xda>
 8004db2:	4b31      	ldr	r3, [pc, #196]	@ (8004e78 <pvPortMalloc+0xf4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d353      	bcc.n	8004e62 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8004dba:	4930      	ldr	r1, [pc, #192]	@ (8004e7c <pvPortMalloc+0xf8>)
 8004dbc:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dbe:	e004      	b.n	8004dca <pvPortMalloc+0x46>
			prvHeapInit();
 8004dc0:	f7ff ff7c 	bl	8004cbc <prvHeapInit>
 8004dc4:	e7e5      	b.n	8004d92 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8004dc6:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dc8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dca:	6863      	ldr	r3, [r4, #4]
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d202      	bcs.n	8004dd6 <pvPortMalloc+0x52>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f7      	bne.n	8004dc6 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8004dd6:	4b26      	ldr	r3, [pc, #152]	@ (8004e70 <pvPortMalloc+0xec>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	d043      	beq.n	8004e66 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004dde:	680d      	ldr	r5, [r1, #0]
 8004de0:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004de6:	6863      	ldr	r3, [r4, #4]
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d910      	bls.n	8004e10 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dee:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004df0:	f010 0f07 	tst.w	r0, #7
 8004df4:	d008      	beq.n	8004e08 <pvPortMalloc+0x84>
 8004df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	e7fe      	b.n	8004e06 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e08:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e0a:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e0c:	f7ff ff88 	bl	8004d20 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e10:	6862      	ldr	r2, [r4, #4]
 8004e12:	4919      	ldr	r1, [pc, #100]	@ (8004e78 <pvPortMalloc+0xf4>)
 8004e14:	680b      	ldr	r3, [r1, #0]
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e1a:	4919      	ldr	r1, [pc, #100]	@ (8004e80 <pvPortMalloc+0xfc>)
 8004e1c:	6809      	ldr	r1, [r1, #0]
 8004e1e:	428b      	cmp	r3, r1
 8004e20:	d201      	bcs.n	8004e26 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e22:	4917      	ldr	r1, [pc, #92]	@ (8004e80 <pvPortMalloc+0xfc>)
 8004e24:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e26:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <pvPortMalloc+0xf0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8004e32:	4a14      	ldr	r2, [pc, #80]	@ (8004e84 <pvPortMalloc+0x100>)
 8004e34:	6813      	ldr	r3, [r2, #0]
 8004e36:	3301      	adds	r3, #1
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e002      	b.n	8004e42 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8004e3c:	2500      	movs	r5, #0
 8004e3e:	e000      	b.n	8004e42 <pvPortMalloc+0xbe>
 8004e40:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8004e42:	f7ff f93d 	bl	80040c0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e46:	f015 0f07 	tst.w	r5, #7
 8004e4a:	d00e      	beq.n	8004e6a <pvPortMalloc+0xe6>
 8004e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	e7fe      	b.n	8004e5c <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8004e5e:	2500      	movs	r5, #0
 8004e60:	e7ef      	b.n	8004e42 <pvPortMalloc+0xbe>
 8004e62:	2500      	movs	r5, #0
 8004e64:	e7ed      	b.n	8004e42 <pvPortMalloc+0xbe>
 8004e66:	2500      	movs	r5, #0
 8004e68:	e7eb      	b.n	8004e42 <pvPortMalloc+0xbe>
}
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	bd38      	pop	{r3, r4, r5, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000f90 	.word	0x20000f90
 8004e74:	20000f7c 	.word	0x20000f7c
 8004e78:	20000f8c 	.word	0x20000f8c
 8004e7c:	20000f94 	.word	0x20000f94
 8004e80:	20000f88 	.word	0x20000f88
 8004e84:	20000f84 	.word	0x20000f84

08004e88 <vPortFree>:
	if( pv != NULL )
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d034      	beq.n	8004ef6 <vPortFree+0x6e>
{
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8004e90:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e94:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004e98:	4a17      	ldr	r2, [pc, #92]	@ (8004ef8 <vPortFree+0x70>)
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	4213      	tst	r3, r2
 8004e9e:	d108      	bne.n	8004eb2 <vPortFree+0x2a>
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	e7fe      	b.n	8004eb0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004eb2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004eb6:	b141      	cbz	r1, 8004eca <vPortFree+0x42>
 8004eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	e7fe      	b.n	8004ec8 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004eca:	ea23 0302 	bic.w	r3, r3, r2
 8004ece:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004ed2:	f7ff f85b 	bl	8003f8c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ed6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8004eda:	4a08      	ldr	r2, [pc, #32]	@ (8004efc <vPortFree+0x74>)
 8004edc:	6813      	ldr	r3, [r2, #0]
 8004ede:	440b      	add	r3, r1
 8004ee0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f7ff ff1c 	bl	8004d20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ee8:	4a05      	ldr	r2, [pc, #20]	@ (8004f00 <vPortFree+0x78>)
 8004eea:	6813      	ldr	r3, [r2, #0]
 8004eec:	3301      	adds	r3, #1
 8004eee:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8004ef0:	f7ff f8e6 	bl	80040c0 <xTaskResumeAll>
}
 8004ef4:	bd38      	pop	{r3, r4, r5, pc}
 8004ef6:	4770      	bx	lr
 8004ef8:	20000f7c 	.word	0x20000f7c
 8004efc:	20000f8c 	.word	0x20000f8c
 8004f00:	20000f80 	.word	0x20000f80

08004f04 <memset>:
 8004f04:	4402      	add	r2, r0
 8004f06:	4603      	mov	r3, r0
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d100      	bne.n	8004f0e <memset+0xa>
 8004f0c:	4770      	bx	lr
 8004f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f12:	e7f9      	b.n	8004f08 <memset+0x4>

08004f14 <_reclaim_reent>:
 8004f14:	4b29      	ldr	r3, [pc, #164]	@ (8004fbc <_reclaim_reent+0xa8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4283      	cmp	r3, r0
 8004f1a:	b570      	push	{r4, r5, r6, lr}
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	d04b      	beq.n	8004fb8 <_reclaim_reent+0xa4>
 8004f20:	69c3      	ldr	r3, [r0, #28]
 8004f22:	b1ab      	cbz	r3, 8004f50 <_reclaim_reent+0x3c>
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	b16b      	cbz	r3, 8004f44 <_reclaim_reent+0x30>
 8004f28:	2500      	movs	r5, #0
 8004f2a:	69e3      	ldr	r3, [r4, #28]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	5959      	ldr	r1, [r3, r5]
 8004f30:	2900      	cmp	r1, #0
 8004f32:	d13b      	bne.n	8004fac <_reclaim_reent+0x98>
 8004f34:	3504      	adds	r5, #4
 8004f36:	2d80      	cmp	r5, #128	@ 0x80
 8004f38:	d1f7      	bne.n	8004f2a <_reclaim_reent+0x16>
 8004f3a:	69e3      	ldr	r3, [r4, #28]
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	68d9      	ldr	r1, [r3, #12]
 8004f40:	f000 f878 	bl	8005034 <_free_r>
 8004f44:	69e3      	ldr	r3, [r4, #28]
 8004f46:	6819      	ldr	r1, [r3, #0]
 8004f48:	b111      	cbz	r1, 8004f50 <_reclaim_reent+0x3c>
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 f872 	bl	8005034 <_free_r>
 8004f50:	6961      	ldr	r1, [r4, #20]
 8004f52:	b111      	cbz	r1, 8004f5a <_reclaim_reent+0x46>
 8004f54:	4620      	mov	r0, r4
 8004f56:	f000 f86d 	bl	8005034 <_free_r>
 8004f5a:	69e1      	ldr	r1, [r4, #28]
 8004f5c:	b111      	cbz	r1, 8004f64 <_reclaim_reent+0x50>
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 f868 	bl	8005034 <_free_r>
 8004f64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004f66:	b111      	cbz	r1, 8004f6e <_reclaim_reent+0x5a>
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f000 f863 	bl	8005034 <_free_r>
 8004f6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f70:	b111      	cbz	r1, 8004f78 <_reclaim_reent+0x64>
 8004f72:	4620      	mov	r0, r4
 8004f74:	f000 f85e 	bl	8005034 <_free_r>
 8004f78:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004f7a:	b111      	cbz	r1, 8004f82 <_reclaim_reent+0x6e>
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f000 f859 	bl	8005034 <_free_r>
 8004f82:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004f84:	b111      	cbz	r1, 8004f8c <_reclaim_reent+0x78>
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 f854 	bl	8005034 <_free_r>
 8004f8c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004f8e:	b111      	cbz	r1, 8004f96 <_reclaim_reent+0x82>
 8004f90:	4620      	mov	r0, r4
 8004f92:	f000 f84f 	bl	8005034 <_free_r>
 8004f96:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004f98:	b111      	cbz	r1, 8004fa0 <_reclaim_reent+0x8c>
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f000 f84a 	bl	8005034 <_free_r>
 8004fa0:	6a23      	ldr	r3, [r4, #32]
 8004fa2:	b14b      	cbz	r3, 8004fb8 <_reclaim_reent+0xa4>
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004faa:	4718      	bx	r3
 8004fac:	680e      	ldr	r6, [r1, #0]
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f000 f840 	bl	8005034 <_free_r>
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	e7bb      	b.n	8004f30 <_reclaim_reent+0x1c>
 8004fb8:	bd70      	pop	{r4, r5, r6, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000010 	.word	0x20000010

08004fc0 <__errno>:
 8004fc0:	4b01      	ldr	r3, [pc, #4]	@ (8004fc8 <__errno+0x8>)
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20000010 	.word	0x20000010

08004fcc <__libc_init_array>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	4d0d      	ldr	r5, [pc, #52]	@ (8005004 <__libc_init_array+0x38>)
 8004fd0:	4c0d      	ldr	r4, [pc, #52]	@ (8005008 <__libc_init_array+0x3c>)
 8004fd2:	1b64      	subs	r4, r4, r5
 8004fd4:	10a4      	asrs	r4, r4, #2
 8004fd6:	2600      	movs	r6, #0
 8004fd8:	42a6      	cmp	r6, r4
 8004fda:	d109      	bne.n	8004ff0 <__libc_init_array+0x24>
 8004fdc:	4d0b      	ldr	r5, [pc, #44]	@ (800500c <__libc_init_array+0x40>)
 8004fde:	4c0c      	ldr	r4, [pc, #48]	@ (8005010 <__libc_init_array+0x44>)
 8004fe0:	f000 f9b6 	bl	8005350 <_init>
 8004fe4:	1b64      	subs	r4, r4, r5
 8004fe6:	10a4      	asrs	r4, r4, #2
 8004fe8:	2600      	movs	r6, #0
 8004fea:	42a6      	cmp	r6, r4
 8004fec:	d105      	bne.n	8004ffa <__libc_init_array+0x2e>
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff4:	4798      	blx	r3
 8004ff6:	3601      	adds	r6, #1
 8004ff8:	e7ee      	b.n	8004fd8 <__libc_init_array+0xc>
 8004ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffe:	4798      	blx	r3
 8005000:	3601      	adds	r6, #1
 8005002:	e7f2      	b.n	8004fea <__libc_init_array+0x1e>
 8005004:	08005410 	.word	0x08005410
 8005008:	08005410 	.word	0x08005410
 800500c:	08005410 	.word	0x08005410
 8005010:	08005414 	.word	0x08005414

08005014 <__retarget_lock_acquire_recursive>:
 8005014:	4770      	bx	lr

08005016 <__retarget_lock_release_recursive>:
 8005016:	4770      	bx	lr

08005018 <memcpy>:
 8005018:	440a      	add	r2, r1
 800501a:	4291      	cmp	r1, r2
 800501c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005020:	d100      	bne.n	8005024 <memcpy+0xc>
 8005022:	4770      	bx	lr
 8005024:	b510      	push	{r4, lr}
 8005026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800502a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800502e:	4291      	cmp	r1, r2
 8005030:	d1f9      	bne.n	8005026 <memcpy+0xe>
 8005032:	bd10      	pop	{r4, pc}

08005034 <_free_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4605      	mov	r5, r0
 8005038:	2900      	cmp	r1, #0
 800503a:	d041      	beq.n	80050c0 <_free_r+0x8c>
 800503c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005040:	1f0c      	subs	r4, r1, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	bfb8      	it	lt
 8005046:	18e4      	addlt	r4, r4, r3
 8005048:	f000 f83e 	bl	80050c8 <__malloc_lock>
 800504c:	4a1d      	ldr	r2, [pc, #116]	@ (80050c4 <_free_r+0x90>)
 800504e:	6813      	ldr	r3, [r2, #0]
 8005050:	b933      	cbnz	r3, 8005060 <_free_r+0x2c>
 8005052:	6063      	str	r3, [r4, #4]
 8005054:	6014      	str	r4, [r2, #0]
 8005056:	4628      	mov	r0, r5
 8005058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800505c:	f000 b83a 	b.w	80050d4 <__malloc_unlock>
 8005060:	42a3      	cmp	r3, r4
 8005062:	d908      	bls.n	8005076 <_free_r+0x42>
 8005064:	6820      	ldr	r0, [r4, #0]
 8005066:	1821      	adds	r1, r4, r0
 8005068:	428b      	cmp	r3, r1
 800506a:	bf01      	itttt	eq
 800506c:	6819      	ldreq	r1, [r3, #0]
 800506e:	685b      	ldreq	r3, [r3, #4]
 8005070:	1809      	addeq	r1, r1, r0
 8005072:	6021      	streq	r1, [r4, #0]
 8005074:	e7ed      	b.n	8005052 <_free_r+0x1e>
 8005076:	461a      	mov	r2, r3
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	b10b      	cbz	r3, 8005080 <_free_r+0x4c>
 800507c:	42a3      	cmp	r3, r4
 800507e:	d9fa      	bls.n	8005076 <_free_r+0x42>
 8005080:	6811      	ldr	r1, [r2, #0]
 8005082:	1850      	adds	r0, r2, r1
 8005084:	42a0      	cmp	r0, r4
 8005086:	d10b      	bne.n	80050a0 <_free_r+0x6c>
 8005088:	6820      	ldr	r0, [r4, #0]
 800508a:	4401      	add	r1, r0
 800508c:	1850      	adds	r0, r2, r1
 800508e:	4283      	cmp	r3, r0
 8005090:	6011      	str	r1, [r2, #0]
 8005092:	d1e0      	bne.n	8005056 <_free_r+0x22>
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	6053      	str	r3, [r2, #4]
 800509a:	4408      	add	r0, r1
 800509c:	6010      	str	r0, [r2, #0]
 800509e:	e7da      	b.n	8005056 <_free_r+0x22>
 80050a0:	d902      	bls.n	80050a8 <_free_r+0x74>
 80050a2:	230c      	movs	r3, #12
 80050a4:	602b      	str	r3, [r5, #0]
 80050a6:	e7d6      	b.n	8005056 <_free_r+0x22>
 80050a8:	6820      	ldr	r0, [r4, #0]
 80050aa:	1821      	adds	r1, r4, r0
 80050ac:	428b      	cmp	r3, r1
 80050ae:	bf04      	itt	eq
 80050b0:	6819      	ldreq	r1, [r3, #0]
 80050b2:	685b      	ldreq	r3, [r3, #4]
 80050b4:	6063      	str	r3, [r4, #4]
 80050b6:	bf04      	itt	eq
 80050b8:	1809      	addeq	r1, r1, r0
 80050ba:	6021      	streq	r1, [r4, #0]
 80050bc:	6054      	str	r4, [r2, #4]
 80050be:	e7ca      	b.n	8005056 <_free_r+0x22>
 80050c0:	bd38      	pop	{r3, r4, r5, pc}
 80050c2:	bf00      	nop
 80050c4:	20004cd8 	.word	0x20004cd8

080050c8 <__malloc_lock>:
 80050c8:	4801      	ldr	r0, [pc, #4]	@ (80050d0 <__malloc_lock+0x8>)
 80050ca:	f7ff bfa3 	b.w	8005014 <__retarget_lock_acquire_recursive>
 80050ce:	bf00      	nop
 80050d0:	20004cd4 	.word	0x20004cd4

080050d4 <__malloc_unlock>:
 80050d4:	4801      	ldr	r0, [pc, #4]	@ (80050dc <__malloc_unlock+0x8>)
 80050d6:	f7ff bf9e 	b.w	8005016 <__retarget_lock_release_recursive>
 80050da:	bf00      	nop
 80050dc:	20004cd4 	.word	0x20004cd4

080050e0 <fmod>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	ed2d 8b02 	vpush	{d8}
 80050e6:	ec57 6b10 	vmov	r6, r7, d0
 80050ea:	ec55 4b11 	vmov	r4, r5, d1
 80050ee:	f000 f825 	bl	800513c <__ieee754_fmod>
 80050f2:	4622      	mov	r2, r4
 80050f4:	462b      	mov	r3, r5
 80050f6:	4630      	mov	r0, r6
 80050f8:	4639      	mov	r1, r7
 80050fa:	eeb0 8a40 	vmov.f32	s16, s0
 80050fe:	eef0 8a60 	vmov.f32	s17, s1
 8005102:	f7fb fcc3 	bl	8000a8c <__aeabi_dcmpun>
 8005106:	b990      	cbnz	r0, 800512e <fmod+0x4e>
 8005108:	2200      	movs	r2, #0
 800510a:	2300      	movs	r3, #0
 800510c:	4620      	mov	r0, r4
 800510e:	4629      	mov	r1, r5
 8005110:	f7fb fc8a 	bl	8000a28 <__aeabi_dcmpeq>
 8005114:	b158      	cbz	r0, 800512e <fmod+0x4e>
 8005116:	f7ff ff53 	bl	8004fc0 <__errno>
 800511a:	2321      	movs	r3, #33	@ 0x21
 800511c:	6003      	str	r3, [r0, #0]
 800511e:	2200      	movs	r2, #0
 8005120:	2300      	movs	r3, #0
 8005122:	4610      	mov	r0, r2
 8005124:	4619      	mov	r1, r3
 8005126:	f7fb fb41 	bl	80007ac <__aeabi_ddiv>
 800512a:	ec41 0b18 	vmov	d8, r0, r1
 800512e:	eeb0 0a48 	vmov.f32	s0, s16
 8005132:	eef0 0a68 	vmov.f32	s1, s17
 8005136:	ecbd 8b02 	vpop	{d8}
 800513a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800513c <__ieee754_fmod>:
 800513c:	ec53 2b11 	vmov	r2, r3, d1
 8005140:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8005144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005148:	ea52 040c 	orrs.w	r4, r2, ip
 800514c:	ec51 0b10 	vmov	r0, r1, d0
 8005150:	461e      	mov	r6, r3
 8005152:	4617      	mov	r7, r2
 8005154:	4696      	mov	lr, r2
 8005156:	d00c      	beq.n	8005172 <__ieee754_fmod+0x36>
 8005158:	4c77      	ldr	r4, [pc, #476]	@ (8005338 <__ieee754_fmod+0x1fc>)
 800515a:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800515e:	45a0      	cmp	r8, r4
 8005160:	4689      	mov	r9, r1
 8005162:	d806      	bhi.n	8005172 <__ieee754_fmod+0x36>
 8005164:	4254      	negs	r4, r2
 8005166:	4d75      	ldr	r5, [pc, #468]	@ (800533c <__ieee754_fmod+0x200>)
 8005168:	4314      	orrs	r4, r2
 800516a:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800516e:	42ac      	cmp	r4, r5
 8005170:	d909      	bls.n	8005186 <__ieee754_fmod+0x4a>
 8005172:	f7fb f9f1 	bl	8000558 <__aeabi_dmul>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	f7fb fb17 	bl	80007ac <__aeabi_ddiv>
 800517e:	ec41 0b10 	vmov	d0, r0, r1
 8005182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005186:	45e0      	cmp	r8, ip
 8005188:	4682      	mov	sl, r0
 800518a:	4604      	mov	r4, r0
 800518c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005190:	dc09      	bgt.n	80051a6 <__ieee754_fmod+0x6a>
 8005192:	dbf4      	blt.n	800517e <__ieee754_fmod+0x42>
 8005194:	4282      	cmp	r2, r0
 8005196:	d8f2      	bhi.n	800517e <__ieee754_fmod+0x42>
 8005198:	d105      	bne.n	80051a6 <__ieee754_fmod+0x6a>
 800519a:	4b69      	ldr	r3, [pc, #420]	@ (8005340 <__ieee754_fmod+0x204>)
 800519c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80051a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051a4:	e7eb      	b.n	800517e <__ieee754_fmod+0x42>
 80051a6:	4a65      	ldr	r2, [pc, #404]	@ (800533c <__ieee754_fmod+0x200>)
 80051a8:	ea19 0f02 	tst.w	r9, r2
 80051ac:	d148      	bne.n	8005240 <__ieee754_fmod+0x104>
 80051ae:	f1b8 0f00 	cmp.w	r8, #0
 80051b2:	d13d      	bne.n	8005230 <__ieee754_fmod+0xf4>
 80051b4:	4963      	ldr	r1, [pc, #396]	@ (8005344 <__ieee754_fmod+0x208>)
 80051b6:	4653      	mov	r3, sl
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	dc36      	bgt.n	800522a <__ieee754_fmod+0xee>
 80051bc:	4216      	tst	r6, r2
 80051be:	d14f      	bne.n	8005260 <__ieee754_fmod+0x124>
 80051c0:	f1bc 0f00 	cmp.w	ip, #0
 80051c4:	d144      	bne.n	8005250 <__ieee754_fmod+0x114>
 80051c6:	4a5f      	ldr	r2, [pc, #380]	@ (8005344 <__ieee754_fmod+0x208>)
 80051c8:	463b      	mov	r3, r7
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	dc3d      	bgt.n	800524a <__ieee754_fmod+0x10e>
 80051ce:	485e      	ldr	r0, [pc, #376]	@ (8005348 <__ieee754_fmod+0x20c>)
 80051d0:	4281      	cmp	r1, r0
 80051d2:	db4a      	blt.n	800526a <__ieee754_fmod+0x12e>
 80051d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051dc:	485a      	ldr	r0, [pc, #360]	@ (8005348 <__ieee754_fmod+0x20c>)
 80051de:	4282      	cmp	r2, r0
 80051e0:	db57      	blt.n	8005292 <__ieee754_fmod+0x156>
 80051e2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80051e6:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80051ea:	1a89      	subs	r1, r1, r2
 80051ec:	1b98      	subs	r0, r3, r6
 80051ee:	eba4 070e 	sub.w	r7, r4, lr
 80051f2:	2900      	cmp	r1, #0
 80051f4:	d162      	bne.n	80052bc <__ieee754_fmod+0x180>
 80051f6:	4574      	cmp	r4, lr
 80051f8:	bf38      	it	cc
 80051fa:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80051fe:	2800      	cmp	r0, #0
 8005200:	bfa4      	itt	ge
 8005202:	463c      	movge	r4, r7
 8005204:	4603      	movge	r3, r0
 8005206:	ea53 0104 	orrs.w	r1, r3, r4
 800520a:	d0c6      	beq.n	800519a <__ieee754_fmod+0x5e>
 800520c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005210:	db69      	blt.n	80052e6 <__ieee754_fmod+0x1aa>
 8005212:	494d      	ldr	r1, [pc, #308]	@ (8005348 <__ieee754_fmod+0x20c>)
 8005214:	428a      	cmp	r2, r1
 8005216:	db6c      	blt.n	80052f2 <__ieee754_fmod+0x1b6>
 8005218:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800521c:	432b      	orrs	r3, r5
 800521e:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8005222:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005226:	4620      	mov	r0, r4
 8005228:	e7a9      	b.n	800517e <__ieee754_fmod+0x42>
 800522a:	3901      	subs	r1, #1
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	e7c3      	b.n	80051b8 <__ieee754_fmod+0x7c>
 8005230:	4945      	ldr	r1, [pc, #276]	@ (8005348 <__ieee754_fmod+0x20c>)
 8005232:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8005236:	2b00      	cmp	r3, #0
 8005238:	ddc0      	ble.n	80051bc <__ieee754_fmod+0x80>
 800523a:	3901      	subs	r1, #1
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	e7fa      	b.n	8005236 <__ieee754_fmod+0xfa>
 8005240:	ea4f 5128 	mov.w	r1, r8, asr #20
 8005244:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005248:	e7b8      	b.n	80051bc <__ieee754_fmod+0x80>
 800524a:	3a01      	subs	r2, #1
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	e7bc      	b.n	80051ca <__ieee754_fmod+0x8e>
 8005250:	4a3d      	ldr	r2, [pc, #244]	@ (8005348 <__ieee754_fmod+0x20c>)
 8005252:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8005256:	2b00      	cmp	r3, #0
 8005258:	ddb9      	ble.n	80051ce <__ieee754_fmod+0x92>
 800525a:	3a01      	subs	r2, #1
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	e7fa      	b.n	8005256 <__ieee754_fmod+0x11a>
 8005260:	ea4f 522c 	mov.w	r2, ip, asr #20
 8005264:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005268:	e7b1      	b.n	80051ce <__ieee754_fmod+0x92>
 800526a:	1a40      	subs	r0, r0, r1
 800526c:	281f      	cmp	r0, #31
 800526e:	dc0a      	bgt.n	8005286 <__ieee754_fmod+0x14a>
 8005270:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8005274:	fa08 f800 	lsl.w	r8, r8, r0
 8005278:	fa2a f303 	lsr.w	r3, sl, r3
 800527c:	ea43 0308 	orr.w	r3, r3, r8
 8005280:	fa0a f400 	lsl.w	r4, sl, r0
 8005284:	e7aa      	b.n	80051dc <__ieee754_fmod+0xa0>
 8005286:	4b31      	ldr	r3, [pc, #196]	@ (800534c <__ieee754_fmod+0x210>)
 8005288:	1a5b      	subs	r3, r3, r1
 800528a:	fa0a f303 	lsl.w	r3, sl, r3
 800528e:	2400      	movs	r4, #0
 8005290:	e7a4      	b.n	80051dc <__ieee754_fmod+0xa0>
 8005292:	1a80      	subs	r0, r0, r2
 8005294:	281f      	cmp	r0, #31
 8005296:	dc0a      	bgt.n	80052ae <__ieee754_fmod+0x172>
 8005298:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800529c:	fa0c fc00 	lsl.w	ip, ip, r0
 80052a0:	fa27 f606 	lsr.w	r6, r7, r6
 80052a4:	ea46 060c 	orr.w	r6, r6, ip
 80052a8:	fa07 fe00 	lsl.w	lr, r7, r0
 80052ac:	e79d      	b.n	80051ea <__ieee754_fmod+0xae>
 80052ae:	4e27      	ldr	r6, [pc, #156]	@ (800534c <__ieee754_fmod+0x210>)
 80052b0:	1ab6      	subs	r6, r6, r2
 80052b2:	fa07 f606 	lsl.w	r6, r7, r6
 80052b6:	f04f 0e00 	mov.w	lr, #0
 80052ba:	e796      	b.n	80051ea <__ieee754_fmod+0xae>
 80052bc:	4574      	cmp	r4, lr
 80052be:	bf38      	it	cc
 80052c0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80052c4:	2800      	cmp	r0, #0
 80052c6:	da05      	bge.n	80052d4 <__ieee754_fmod+0x198>
 80052c8:	0fe0      	lsrs	r0, r4, #31
 80052ca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80052ce:	0064      	lsls	r4, r4, #1
 80052d0:	3901      	subs	r1, #1
 80052d2:	e78b      	b.n	80051ec <__ieee754_fmod+0xb0>
 80052d4:	ea50 0307 	orrs.w	r3, r0, r7
 80052d8:	f43f af5f 	beq.w	800519a <__ieee754_fmod+0x5e>
 80052dc:	0ffb      	lsrs	r3, r7, #31
 80052de:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80052e2:	007c      	lsls	r4, r7, #1
 80052e4:	e7f4      	b.n	80052d0 <__ieee754_fmod+0x194>
 80052e6:	0fe1      	lsrs	r1, r4, #31
 80052e8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80052ec:	0064      	lsls	r4, r4, #1
 80052ee:	3a01      	subs	r2, #1
 80052f0:	e78c      	b.n	800520c <__ieee754_fmod+0xd0>
 80052f2:	1a89      	subs	r1, r1, r2
 80052f4:	2914      	cmp	r1, #20
 80052f6:	dc0a      	bgt.n	800530e <__ieee754_fmod+0x1d2>
 80052f8:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80052fc:	fa03 f202 	lsl.w	r2, r3, r2
 8005300:	40cc      	lsrs	r4, r1
 8005302:	4322      	orrs	r2, r4
 8005304:	410b      	asrs	r3, r1
 8005306:	ea43 0105 	orr.w	r1, r3, r5
 800530a:	4610      	mov	r0, r2
 800530c:	e737      	b.n	800517e <__ieee754_fmod+0x42>
 800530e:	291f      	cmp	r1, #31
 8005310:	dc07      	bgt.n	8005322 <__ieee754_fmod+0x1e6>
 8005312:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8005316:	40cc      	lsrs	r4, r1
 8005318:	fa03 f202 	lsl.w	r2, r3, r2
 800531c:	4322      	orrs	r2, r4
 800531e:	462b      	mov	r3, r5
 8005320:	e7f1      	b.n	8005306 <__ieee754_fmod+0x1ca>
 8005322:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8005326:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800532a:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800532e:	32e2      	adds	r2, #226	@ 0xe2
 8005330:	fa43 f202 	asr.w	r2, r3, r2
 8005334:	e7f3      	b.n	800531e <__ieee754_fmod+0x1e2>
 8005336:	bf00      	nop
 8005338:	7fefffff 	.word	0x7fefffff
 800533c:	7ff00000 	.word	0x7ff00000
 8005340:	080053f8 	.word	0x080053f8
 8005344:	fffffbed 	.word	0xfffffbed
 8005348:	fffffc02 	.word	0xfffffc02
 800534c:	fffffbe2 	.word	0xfffffbe2

08005350 <_init>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	bf00      	nop
 8005354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005356:	bc08      	pop	{r3}
 8005358:	469e      	mov	lr, r3
 800535a:	4770      	bx	lr

0800535c <_fini>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	bf00      	nop
 8005360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005362:	bc08      	pop	{r3}
 8005364:	469e      	mov	lr, r3
 8005366:	4770      	bx	lr
