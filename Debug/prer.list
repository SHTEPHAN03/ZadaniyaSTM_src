
prer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000453c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080046dc  080046dc  000056dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004768  08004768  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004768  08004768  00005768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004770  08004770  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004770  08004770  00005770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004774  08004774  00005774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004778  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c8c  20000060  080047d8  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cec  080047d8  00006cec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209af  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e46  00000000  00000000  00026a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000eb42  00000000  00000000  0002a885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  000393c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ba  00000000  00000000  0003a860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001892f  00000000  00000000  0003b91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020c70  00000000  00000000  00054249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097b4f  00000000  00000000  00074eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ca08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d50  00000000  00000000  0010ca4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003a  00000000  00000000  0011079c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046c4 	.word	0x080046c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080046c4 	.word	0x080046c4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004d0:	b508      	push	{r3, lr}
 80004d2:	e00d      	b.n	80004f0 <StartDefaultTask+0x20>
	  if (bitcheck(numByte, 7) == 0){
		  i = 0;
		  byteArr[i]=numByte;
	  }
	  else  {
		  i++;
 80004d4:	491a      	ldr	r1, [pc, #104]	@ (8000540 <StartDefaultTask+0x70>)
 80004d6:	780b      	ldrb	r3, [r1, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	700b      	strb	r3, [r1, #0]
		  byteArr[i]=numByte;
 80004de:	4919      	ldr	r1, [pc, #100]	@ (8000544 <StartDefaultTask+0x74>)
 80004e0:	54ca      	strb	r2, [r1, r3]
	  }
	  if (i==2){
 80004e2:	4b17      	ldr	r3, [pc, #92]	@ (8000540 <StartDefaultTask+0x70>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b02      	cmp	r3, #2
 80004e8:	d016      	beq.n	8000518 <StartDefaultTask+0x48>
	  }
		  znach=byteArr[2]*17;
	  }
	  }

	  osDelay(1);
 80004ea:	2001      	movs	r0, #1
 80004ec:	f002 fa26 	bl	800293c <osDelay>
	  if (HAL_UART_Receive(&huart1, &numByte,1,50) == HAL_OK){
 80004f0:	2332      	movs	r3, #50	@ 0x32
 80004f2:	2201      	movs	r2, #1
 80004f4:	4914      	ldr	r1, [pc, #80]	@ (8000548 <StartDefaultTask+0x78>)
 80004f6:	4815      	ldr	r0, [pc, #84]	@ (800054c <StartDefaultTask+0x7c>)
 80004f8:	f001 ff51 	bl	800239e <HAL_UART_Receive>
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d1f4      	bne.n	80004ea <StartDefaultTask+0x1a>
	  if (bitcheck(numByte, 7) == 0){
 8000500:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <StartDefaultTask+0x78>)
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	f993 3000 	ldrsb.w	r3, [r3]
 8000508:	2b00      	cmp	r3, #0
 800050a:	dbe3      	blt.n	80004d4 <StartDefaultTask+0x4>
		  i = 0;
 800050c:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <StartDefaultTask+0x70>)
 800050e:	2100      	movs	r1, #0
 8000510:	7019      	strb	r1, [r3, #0]
		  byteArr[i]=numByte;
 8000512:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <StartDefaultTask+0x74>)
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	e7e4      	b.n	80004e2 <StartDefaultTask+0x12>
		  if (bitcheck(byteArr[2],7) != bitcheck(byteArr[0],5)){
 8000518:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <StartDefaultTask+0x74>)
 800051a:	789a      	ldrb	r2, [r3, #2]
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000522:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 8000526:	d003      	beq.n	8000530 <StartDefaultTask+0x60>
			  bitflip(byteArr[2],7);
 8000528:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 800052c:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <StartDefaultTask+0x74>)
 800052e:	709a      	strb	r2, [r3, #2]
		  znach=byteArr[2]*17;
 8000530:	4b04      	ldr	r3, [pc, #16]	@ (8000544 <StartDefaultTask+0x74>)
 8000532:	789b      	ldrb	r3, [r3, #2]
 8000534:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8000538:	4a05      	ldr	r2, [pc, #20]	@ (8000550 <StartDefaultTask+0x80>)
 800053a:	8013      	strh	r3, [r2, #0]
 800053c:	e7d5      	b.n	80004ea <StartDefaultTask+0x1a>
 800053e:	bf00      	nop
 8000540:	2000009a 	.word	0x2000009a
 8000544:	2000009c 	.word	0x2000009c
 8000548:	2000009f 	.word	0x2000009f
 800054c:	20000178 	.word	0x20000178
 8000550:	20000098 	.word	0x20000098

08000554 <colorLib>:
 {
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	b083      	sub	sp, #12
	H = znach/13;
 8000558:	4b5e      	ldr	r3, [pc, #376]	@ (80006d4 <colorLib+0x180>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	4a5e      	ldr	r2, [pc, #376]	@ (80006d8 <colorLib+0x184>)
 800055e:	fba2 2303 	umull	r2, r3, r2, r3
 8000562:	f3c3 0387 	ubfx	r3, r3, #2, #8
 8000566:	4a5d      	ldr	r2, [pc, #372]	@ (80006dc <colorLib+0x188>)
 8000568:	7013      	strb	r3, [r2, #0]
	V = 85;
 800056a:	485d      	ldr	r0, [pc, #372]	@ (80006e0 <colorLib+0x18c>)
 800056c:	2255      	movs	r2, #85	@ 0x55
 800056e:	7002      	strb	r2, [r0, #0]
	S = 100;
 8000570:	4a5c      	ldr	r2, [pc, #368]	@ (80006e4 <colorLib+0x190>)
 8000572:	2164      	movs	r1, #100	@ 0x64
 8000574:	7011      	strb	r1, [r2, #0]
	Hi = (H / 56) % 6;
 8000576:	08da      	lsrs	r2, r3, #3
 8000578:	4c5b      	ldr	r4, [pc, #364]	@ (80006e8 <colorLib+0x194>)
 800057a:	fba4 2102 	umull	r2, r1, r4, r2
 800057e:	fa5f fc81 	uxtb.w	ip, r1
 8000582:	4a5a      	ldr	r2, [pc, #360]	@ (80006ec <colorLib+0x198>)
 8000584:	fba2 520c 	umull	r5, r2, r2, ip
 8000588:	0892      	lsrs	r2, r2, #2
 800058a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800058e:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8000592:	ebac 0c0e 	sub.w	ip, ip, lr
 8000596:	fa5f f28c 	uxtb.w	r2, ip
 800059a:	4d55      	ldr	r5, [pc, #340]	@ (80006f0 <colorLib+0x19c>)
 800059c:	702a      	strb	r2, [r5, #0]
	Vmin = ((100 - S) * V) / 100;
 800059e:	eddf 6a55 	vldr	s13, [pc, #340]	@ 80006f4 <colorLib+0x1a0>
 80005a2:	4d55      	ldr	r5, [pc, #340]	@ (80006f8 <colorLib+0x1a4>)
 80005a4:	edc5 6a00 	vstr	s13, [r5]
	a = (V - Vmin) * ((H % 56) / 56);
 80005a8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80005ac:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 80005b0:	eba3 030c 	sub.w	r3, r3, ip
 80005b4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80005b8:	fba4 4303 	umull	r4, r3, r4, r3
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80006fc <colorLib+0x1a8>
 80005ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005d2:	edcd 7a01 	vstr	s15, [sp, #4]
 80005d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80005da:	4949      	ldr	r1, [pc, #292]	@ (8000700 <colorLib+0x1ac>)
 80005dc:	700b      	strb	r3, [r1, #0]
	Vinc = Vmin + a;
 80005de:	ee07 3a90 	vmov	s15, r3
 80005e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005e6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80005ea:	4946      	ldr	r1, [pc, #280]	@ (8000704 <colorLib+0x1b0>)
 80005ec:	ed81 7a00 	vstr	s14, [r1]
	Vdec = V - a;
 80005f0:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 80005f4:	ee07 3a90 	vmov	s15, r3
 80005f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005fc:	4b42      	ldr	r3, [pc, #264]	@ (8000708 <colorLib+0x1b4>)
 80005fe:	edc3 7a00 	vstr	s15, [r3]
	V = V * 255 / 100;
 8000602:	24d8      	movs	r4, #216	@ 0xd8
 8000604:	7004      	strb	r4, [r0, #0]
	Vdec = Vdec * 255 / 100;
 8000606:	ed9f 6a41 	vldr	s12, [pc, #260]	@ 800070c <colorLib+0x1b8>
 800060a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800060e:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8000710 <colorLib+0x1bc>
 8000612:	eec7 5aa6 	vdiv.f32	s11, s15, s13
 8000616:	edc3 5a00 	vstr	s11, [r3]
	Vinc = Vinc * 255 / 100;
 800061a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800061e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000622:	edc1 7a00 	vstr	s15, [r1]
	   if (Hi == 0) {
 8000626:	b962      	cbnz	r2, 8000642 <colorLib+0xee>
	      R = V;
 8000628:	4b3a      	ldr	r3, [pc, #232]	@ (8000714 <colorLib+0x1c0>)
 800062a:	701c      	strb	r4, [r3, #0]
	      G = Vinc;
 800062c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000630:	ee17 3a90 	vmov	r3, s15
 8000634:	4a38      	ldr	r2, [pc, #224]	@ (8000718 <colorLib+0x1c4>)
 8000636:	7013      	strb	r3, [r2, #0]
	      B = Vmin;
 8000638:	4b38      	ldr	r3, [pc, #224]	@ (800071c <colorLib+0x1c8>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
}
 800063e:	b003      	add	sp, #12
 8000640:	bd30      	pop	{r4, r5, pc}
	   else if (Hi == 1) {
 8000642:	1e53      	subs	r3, r2, #1
 8000644:	2b04      	cmp	r3, #4
 8000646:	d8fa      	bhi.n	800063e <colorLib+0xea>
 8000648:	e8df f003 	tbb	[pc, r3]
 800064c:	2a1d1003 	.word	0x2a1d1003
 8000650:	37          	.byte	0x37
 8000651:	00          	.byte	0x00
	      R = Vdec;
 8000652:	eefc 7ae5 	vcvt.u32.f32	s15, s11
 8000656:	ee17 3a90 	vmov	r3, s15
 800065a:	4a2e      	ldr	r2, [pc, #184]	@ (8000714 <colorLib+0x1c0>)
 800065c:	7013      	strb	r3, [r2, #0]
	      G = V;
 800065e:	4b2e      	ldr	r3, [pc, #184]	@ (8000718 <colorLib+0x1c4>)
 8000660:	22d8      	movs	r2, #216	@ 0xd8
 8000662:	701a      	strb	r2, [r3, #0]
	      B = Vmin;
 8000664:	4b2d      	ldr	r3, [pc, #180]	@ (800071c <colorLib+0x1c8>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e7e8      	b.n	800063e <colorLib+0xea>
	      R = Vmin;
 800066c:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <colorLib+0x1c0>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
	      G = V;
 8000672:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <colorLib+0x1c4>)
 8000674:	22d8      	movs	r2, #216	@ 0xd8
 8000676:	701a      	strb	r2, [r3, #0]
	      B = Vinc;
 8000678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800067c:	ee17 3a90 	vmov	r3, s15
 8000680:	4a26      	ldr	r2, [pc, #152]	@ (800071c <colorLib+0x1c8>)
 8000682:	7013      	strb	r3, [r2, #0]
 8000684:	e7db      	b.n	800063e <colorLib+0xea>
	      R = Vmin;
 8000686:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <colorLib+0x1c0>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	      G = Vdec;
 800068c:	eefc 7ae5 	vcvt.u32.f32	s15, s11
 8000690:	ee17 3a90 	vmov	r3, s15
 8000694:	4a20      	ldr	r2, [pc, #128]	@ (8000718 <colorLib+0x1c4>)
 8000696:	7013      	strb	r3, [r2, #0]
	      B = V;
 8000698:	4b20      	ldr	r3, [pc, #128]	@ (800071c <colorLib+0x1c8>)
 800069a:	22d8      	movs	r2, #216	@ 0xd8
 800069c:	701a      	strb	r2, [r3, #0]
 800069e:	e7ce      	b.n	800063e <colorLib+0xea>
	      R = Vinc;
 80006a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006a4:	ee17 3a90 	vmov	r3, s15
 80006a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000714 <colorLib+0x1c0>)
 80006aa:	7013      	strb	r3, [r2, #0]
	      G = Vmin;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <colorLib+0x1c4>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
	      B = V;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <colorLib+0x1c8>)
 80006b4:	22d8      	movs	r2, #216	@ 0xd8
 80006b6:	701a      	strb	r2, [r3, #0]
 80006b8:	e7c1      	b.n	800063e <colorLib+0xea>
	      R = V;
 80006ba:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <colorLib+0x1c0>)
 80006bc:	22d8      	movs	r2, #216	@ 0xd8
 80006be:	701a      	strb	r2, [r3, #0]
	      G = Vmin;
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <colorLib+0x1c4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
	      B = Vdec;
 80006c6:	eefc 7ae5 	vcvt.u32.f32	s15, s11
 80006ca:	ee17 3a90 	vmov	r3, s15
 80006ce:	4a13      	ldr	r2, [pc, #76]	@ (800071c <colorLib+0x1c8>)
 80006d0:	7013      	strb	r3, [r2, #0]
}
 80006d2:	e7b4      	b.n	800063e <colorLib+0xea>
 80006d4:	20000098 	.word	0x20000098
 80006d8:	4ec4ec4f 	.word	0x4ec4ec4f
 80006dc:	20000097 	.word	0x20000097
 80006e0:	20000095 	.word	0x20000095
 80006e4:	20000096 	.word	0x20000096
 80006e8:	24924925 	.word	0x24924925
 80006ec:	aaaaaaab 	.word	0xaaaaaaab
 80006f0:	20000094 	.word	0x20000094
 80006f4:	00000000 	.word	0x00000000
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	42aa0000 	.word	0x42aa0000
 8000700:	20000093 	.word	0x20000093
 8000704:	20000088 	.word	0x20000088
 8000708:	20000084 	.word	0x20000084
 800070c:	437f0000 	.word	0x437f0000
 8000710:	42c80000 	.word	0x42c80000
 8000714:	20000092 	.word	0x20000092
 8000718:	20000091 	.word	0x20000091
 800071c:	20000090 	.word	0x20000090

08000720 <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8000720:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartLedTask */
  /* Infinite loop */
  for(;;)
  {
	  colorLib();
 8000722:	f7ff ff17 	bl	8000554 <colorLib>
	  Set_PWM_Duty_Cycle(&htim3, TIM_CHANNEL_1, R);
 8000726:	4c0a      	ldr	r4, [pc, #40]	@ (8000750 <StartLedTask+0x30>)
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <StartLedTask+0x34>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	2100      	movs	r1, #0
 800072e:	4620      	mov	r0, r4
 8000730:	f000 f892 	bl	8000858 <Set_PWM_Duty_Cycle>
	  Set_PWM_Duty_Cycle(&htim3, TIM_CHANNEL_2, G);
 8000734:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <StartLedTask+0x38>)
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	2104      	movs	r1, #4
 800073a:	4620      	mov	r0, r4
 800073c:	f000 f88c 	bl	8000858 <Set_PWM_Duty_Cycle>
	  Set_PWM_Duty_Cycle(&htim3, TIM_CHANNEL_3, B);
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <StartLedTask+0x3c>)
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	2108      	movs	r1, #8
 8000746:	4620      	mov	r0, r4
 8000748:	f000 f886 	bl	8000858 <Set_PWM_Duty_Cycle>
  for(;;)
 800074c:	e7e9      	b.n	8000722 <StartLedTask+0x2>
 800074e:	bf00      	nop
 8000750:	200000e8 	.word	0x200000e8
 8000754:	20000092 	.word	0x20000092
 8000758:	20000091 	.word	0x20000091
 800075c:	20000090 	.word	0x20000090

08000760 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000760:	b508      	push	{r3, lr}
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000762:	4a07      	ldr	r2, [pc, #28]	@ (8000780 <MX_FREERTOS_Init+0x20>)
 8000764:	2100      	movs	r1, #0
 8000766:	4807      	ldr	r0, [pc, #28]	@ (8000784 <MX_FREERTOS_Init+0x24>)
 8000768:	f002 f88a 	bl	8002880 <osThreadNew>
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_FREERTOS_Init+0x28>)
 800076e:	6018      	str	r0, [r3, #0]
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 8000770:	4a06      	ldr	r2, [pc, #24]	@ (800078c <MX_FREERTOS_Init+0x2c>)
 8000772:	2100      	movs	r1, #0
 8000774:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_FREERTOS_Init+0x30>)
 8000776:	f002 f883 	bl	8002880 <osThreadNew>
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_FREERTOS_Init+0x34>)
 800077c:	6018      	str	r0, [r3, #0]
}
 800077e:	bd08      	pop	{r3, pc}
 8000780:	08004714 	.word	0x08004714
 8000784:	080004d1 	.word	0x080004d1
 8000788:	20000080 	.word	0x20000080
 800078c:	080046f0 	.word	0x080046f0
 8000790:	08000721 	.word	0x08000721
 8000794:	2000007c 	.word	0x2000007c

08000798 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	2400      	movs	r4, #0
 800079e:	9405      	str	r4, [sp, #20]
 80007a0:	9406      	str	r4, [sp, #24]
 80007a2:	9407      	str	r4, [sp, #28]
 80007a4:	9408      	str	r4, [sp, #32]
 80007a6:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a8:	9401      	str	r4, [sp, #4]
 80007aa:	4b28      	ldr	r3, [pc, #160]	@ (800084c <MX_GPIO_Init+0xb4>)
 80007ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ae:	f042 0204 	orr.w	r2, r2, #4
 80007b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80007b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007b6:	f002 0204 	and.w	r2, r2, #4
 80007ba:	9201      	str	r2, [sp, #4]
 80007bc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	9402      	str	r4, [sp, #8]
 80007c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80007c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80007c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ca:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80007ce:	9202      	str	r2, [sp, #8]
 80007d0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	9403      	str	r4, [sp, #12]
 80007d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007d6:	f042 0201 	orr.w	r2, r2, #1
 80007da:	631a      	str	r2, [r3, #48]	@ 0x30
 80007dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007de:	f002 0201 	and.w	r2, r2, #1
 80007e2:	9203      	str	r2, [sp, #12]
 80007e4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	9404      	str	r4, [sp, #16]
 80007e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ea:	f042 0202 	orr.w	r2, r2, #2
 80007ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	9304      	str	r3, [sp, #16]
 80007f8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLed_GPIO_Port, GLed_Pin, GPIO_PIN_RESET);
 80007fa:	4d15      	ldr	r5, [pc, #84]	@ (8000850 <MX_GPIO_Init+0xb8>)
 80007fc:	4622      	mov	r2, r4
 80007fe:	2120      	movs	r1, #32
 8000800:	4628      	mov	r0, r5
 8000802:	f000 fcd5 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000806:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800080a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000810:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	a905      	add	r1, sp, #20
 8000816:	480f      	ldr	r0, [pc, #60]	@ (8000854 <MX_GPIO_Init+0xbc>)
 8000818:	f000 fbe6 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 800081c:	2308      	movs	r3, #8
 800081e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000828:	2307      	movs	r3, #7
 800082a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800082c:	a905      	add	r1, sp, #20
 800082e:	4628      	mov	r0, r5
 8000830:	f000 fbda 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GLed_Pin;
 8000834:	2320      	movs	r3, #32
 8000836:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GLed_GPIO_Port, &GPIO_InitStruct);
 8000840:	a905      	add	r1, sp, #20
 8000842:	4628      	mov	r0, r5
 8000844:	f000 fbd0 	bl	8000fe8 <HAL_GPIO_Init>

}
 8000848:	b00b      	add	sp, #44	@ 0x2c
 800084a:	bd30      	pop	{r4, r5, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000
 8000854:	40020800 	.word	0x40020800

08000858 <Set_PWM_Duty_Cycle>:
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
void Set_PWM_Duty_Cycle(TIM_HandleTypeDef *htim, uint32_t Channe1, uint16_t pwm)
  {
      __HAL_TIM_SET_COMPARE(htim, Channe1, pwm);
 8000858:	b911      	cbnz	r1, 8000860 <Set_PWM_Duty_Cycle+0x8>
 800085a:	6803      	ldr	r3, [r0, #0]
 800085c:	635a      	str	r2, [r3, #52]	@ 0x34
 800085e:	4770      	bx	lr
 8000860:	2904      	cmp	r1, #4
 8000862:	d004      	beq.n	800086e <Set_PWM_Duty_Cycle+0x16>
 8000864:	2908      	cmp	r1, #8
 8000866:	d005      	beq.n	8000874 <Set_PWM_Duty_Cycle+0x1c>
 8000868:	6803      	ldr	r3, [r0, #0]
 800086a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
 800086c:	4770      	bx	lr
      __HAL_TIM_SET_COMPARE(htim, Channe1, pwm);
 800086e:	6803      	ldr	r3, [r0, #0]
 8000870:	639a      	str	r2, [r3, #56]	@ 0x38
 8000872:	4770      	bx	lr
 8000874:	6803      	ldr	r3, [r0, #0]
 8000876:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000878:	4770      	bx	lr
	...

0800087c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800087c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800087e:	6802      	ldr	r2, [r0, #0]
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000882:	429a      	cmp	r2, r3
 8000884:	d000      	beq.n	8000888 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000886:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000888:	f000 fad6 	bl	8000e38 <HAL_IncTick>
}
 800088c:	e7fb      	b.n	8000886 <HAL_TIM_PeriodElapsedCallback+0xa>
 800088e:	bf00      	nop
 8000890:	40014400 	.word	0x40014400

08000894 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000896:	e7fe      	b.n	8000896 <Error_Handler+0x2>

08000898 <SystemClock_Config>:
{
 8000898:	b500      	push	{lr}
 800089a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089c:	2230      	movs	r2, #48	@ 0x30
 800089e:	2100      	movs	r1, #0
 80008a0:	a808      	add	r0, sp, #32
 80008a2:	f003 fe27 	bl	80044f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a6:	2300      	movs	r3, #0
 80008a8:	9303      	str	r3, [sp, #12]
 80008aa:	9304      	str	r3, [sp, #16]
 80008ac:	9305      	str	r3, [sp, #20]
 80008ae:	9306      	str	r3, [sp, #24]
 80008b0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	4a21      	ldr	r2, [pc, #132]	@ (800093c <SystemClock_Config+0xa4>)
 80008b6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80008b8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80008bc:	6411      	str	r1, [r2, #64]	@ 0x40
 80008be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80008c0:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80008c4:	9201      	str	r2, [sp, #4]
 80008c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000940 <SystemClock_Config+0xa8>)
 80008cc:	6813      	ldr	r3, [r2, #0]
 80008ce:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	6813      	ldr	r3, [r2, #0]
 80008da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008de:	9302      	str	r3, [sp, #8]
 80008e0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e2:	2301      	movs	r3, #1
 80008e4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ea:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ec:	2302      	movs	r3, #2
 80008ee:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008f4:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f6:	2204      	movs	r2, #4
 80008f8:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80008fa:	2240      	movs	r2, #64	@ 0x40
 80008fc:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fe:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000900:	2307      	movs	r3, #7
 8000902:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	a808      	add	r0, sp, #32
 8000906:	f000 fc59 	bl	80011bc <HAL_RCC_OscConfig>
 800090a:	b990      	cbnz	r0, 8000932 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090c:	230f      	movs	r3, #15
 800090e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	2302      	movs	r3, #2
 8000912:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000914:	2380      	movs	r3, #128	@ 0x80
 8000916:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800091c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000922:	2101      	movs	r1, #1
 8000924:	a803      	add	r0, sp, #12
 8000926:	f000 feb3 	bl	8001690 <HAL_RCC_ClockConfig>
 800092a:	b920      	cbnz	r0, 8000936 <SystemClock_Config+0x9e>
}
 800092c:	b015      	add	sp, #84	@ 0x54
 800092e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000932:	f7ff ffaf 	bl	8000894 <Error_Handler>
    Error_Handler();
 8000936:	f7ff ffad 	bl	8000894 <Error_Handler>
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <main>:
{
 8000944:	b508      	push	{r3, lr}
  HAL_Init();
 8000946:	f000 fa5d 	bl	8000e04 <HAL_Init>
  SystemClock_Config();
 800094a:	f7ff ffa5 	bl	8000898 <SystemClock_Config>
  MX_GPIO_Init();
 800094e:	f7ff ff23 	bl	8000798 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000952:	f000 f8b7 	bl	8000ac4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000956:	f000 f9d1 	bl	8000cfc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800095a:	f000 f965 	bl	8000c28 <MX_TIM3_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800095e:	480b      	ldr	r0, [pc, #44]	@ (800098c <main+0x48>)
 8000960:	f001 f836 	bl	80019d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000964:	4c0a      	ldr	r4, [pc, #40]	@ (8000990 <main+0x4c>)
 8000966:	2104      	movs	r1, #4
 8000968:	4620      	mov	r0, r4
 800096a:	f001 fb07 	bl	8001f7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800096e:	2100      	movs	r1, #0
 8000970:	4620      	mov	r0, r4
 8000972:	f001 fb03 	bl	8001f7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000976:	2108      	movs	r1, #8
 8000978:	4620      	mov	r0, r4
 800097a:	f001 faff 	bl	8001f7c <HAL_TIM_PWM_Start>
  osKernelInitialize();
 800097e:	f001 ff51 	bl	8002824 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000982:	f7ff feed 	bl	8000760 <MX_FREERTOS_Init>
  osKernelStart();
 8000986:	f001 ff5f 	bl	8002848 <osKernelStart>
  while (1)
 800098a:	e7fe      	b.n	800098a <main+0x46>
 800098c:	20000130 	.word	0x20000130
 8000990:	200000e8 	.word	0x200000e8

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b500      	push	{lr}
 8000996:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000998:	2200      	movs	r2, #0
 800099a:	9200      	str	r2, [sp, #0]
 800099c:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <HAL_MspInit+0x40>)
 800099e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80009a0:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80009a4:	6459      	str	r1, [r3, #68]	@ 0x44
 80009a6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80009a8:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80009ac:	9100      	str	r1, [sp, #0]
 80009ae:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	9201      	str	r2, [sp, #4]
 80009b2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80009b4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80009b8:	6419      	str	r1, [r3, #64]	@ 0x40
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	9301      	str	r3, [sp, #4]
 80009c2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c4:	210f      	movs	r1, #15
 80009c6:	f06f 0001 	mvn.w	r0, #1
 80009ca:	f000 fa9b 	bl	8000f04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	b003      	add	sp, #12
 80009d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b530      	push	{r4, r5, lr}
 80009da:	b089      	sub	sp, #36	@ 0x24
 80009dc:	4605      	mov	r5, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80009de:	2400      	movs	r4, #0
 80009e0:	9401      	str	r4, [sp, #4]
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <HAL_InitTick+0x80>)
 80009e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009e6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80009ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f6:	a902      	add	r1, sp, #8
 80009f8:	a803      	add	r0, sp, #12
 80009fa:	f000 ff1f 	bl	800183c <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009fe:	f000 ff0d 	bl	800181c <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a02:	4a16      	ldr	r2, [pc, #88]	@ (8000a5c <HAL_InitTick+0x84>)
 8000a04:	fba2 2300 	umull	r2, r3, r2, r0
 8000a08:	0c9b      	lsrs	r3, r3, #18
 8000a0a:	3b01      	subs	r3, #1

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000a0c:	4814      	ldr	r0, [pc, #80]	@ (8000a60 <HAL_InitTick+0x88>)
 8000a0e:	4a15      	ldr	r2, [pc, #84]	@ (8000a64 <HAL_InitTick+0x8c>)
 8000a10:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000a12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a16:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000a18:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 8000a1a:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	6084      	str	r4, [r0, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000a20:	f001 f91c 	bl	8001c5c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000a24:	4604      	mov	r4, r0
 8000a26:	b110      	cbz	r0, 8000a2e <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8000a28:	4620      	mov	r0, r4
 8000a2a:	b009      	add	sp, #36	@ 0x24
 8000a2c:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000a2e:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <HAL_InitTick+0x88>)
 8000a30:	f000 ffce 	bl	80019d0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000a34:	4604      	mov	r4, r0
 8000a36:	2800      	cmp	r0, #0
 8000a38:	d1f6      	bne.n	8000a28 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a3a:	2019      	movs	r0, #25
 8000a3c:	f000 fa72 	bl	8000f24 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a40:	2d0f      	cmp	r5, #15
 8000a42:	d901      	bls.n	8000a48 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8000a44:	2401      	movs	r4, #1
 8000a46:	e7ef      	b.n	8000a28 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	4629      	mov	r1, r5
 8000a4c:	2019      	movs	r0, #25
 8000a4e:	f000 fa59 	bl	8000f04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a52:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <HAL_InitTick+0x90>)
 8000a54:	601d      	str	r5, [r3, #0]
 8000a56:	e7e7      	b.n	8000a28 <HAL_InitTick+0x50>
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	431bde83 	.word	0x431bde83
 8000a60:	200000a0 	.word	0x200000a0
 8000a64:	40014400 	.word	0x40014400
 8000a68:	20000008 	.word	0x20000008

08000a6c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler>

08000a6e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler>

08000a70 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler>

08000a72 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler>

08000a74 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler>

08000a76 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a76:	4770      	bx	lr

08000a78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a7a:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a7c:	f000 ffe9 	bl	8001a52 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000a82:	f000 ffe6 	bl	8001a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a86:	bd08      	pop	{r3, pc}
 8000a88:	20000130 	.word	0x20000130
 8000a8c:	200000a0 	.word	0x200000a0

08000a90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a92:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <TIM3_IRQHandler+0xc>)
 8000a94:	f000 ffdd 	bl	8001a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a98:	bd08      	pop	{r3, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000e8 	.word	0x200000e8

08000aa0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000aa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aa2:	4802      	ldr	r0, [pc, #8]	@ (8000aac <USART1_IRQHandler+0xc>)
 8000aa4:	f001 fd70 	bl	8002588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000aa8:	bd08      	pop	{r3, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000178 	.word	0x20000178

08000ab0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <SystemInit+0x10>)
 8000ab2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000ab6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ac4:	b500      	push	{lr}
 8000ac6:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac8:	2300      	movs	r3, #0
 8000aca:	9302      	str	r3, [sp, #8]
 8000acc:	9303      	str	r3, [sp, #12]
 8000ace:	9304      	str	r3, [sp, #16]
 8000ad0:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad6:	4815      	ldr	r0, [pc, #84]	@ (8000b2c <MX_TIM1_Init+0x68>)
 8000ad8:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <MX_TIM1_Init+0x6c>)
 8000ada:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 16-1;
 8000adc:	220f      	movs	r2, #15
 8000ade:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1000-1;
 8000ae2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ae6:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae8:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aea:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aee:	f001 f8b5 	bl	8001c5c <HAL_TIM_Base_Init>
 8000af2:	b990      	cbnz	r0, 8000b1a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000afa:	a902      	add	r1, sp, #8
 8000afc:	480b      	ldr	r0, [pc, #44]	@ (8000b2c <MX_TIM1_Init+0x68>)
 8000afe:	f001 f9ae 	bl	8001e5e <HAL_TIM_ConfigClockSource>
 8000b02:	b968      	cbnz	r0, 8000b20 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b08:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b0a:	4669      	mov	r1, sp
 8000b0c:	4807      	ldr	r0, [pc, #28]	@ (8000b2c <MX_TIM1_Init+0x68>)
 8000b0e:	f001 faad 	bl	800206c <HAL_TIMEx_MasterConfigSynchronization>
 8000b12:	b940      	cbnz	r0, 8000b26 <MX_TIM1_Init+0x62>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b14:	b007      	add	sp, #28
 8000b16:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b1a:	f7ff febb 	bl	8000894 <Error_Handler>
 8000b1e:	e7e9      	b.n	8000af4 <MX_TIM1_Init+0x30>
    Error_Handler();
 8000b20:	f7ff feb8 	bl	8000894 <Error_Handler>
 8000b24:	e7ee      	b.n	8000b04 <MX_TIM1_Init+0x40>
    Error_Handler();
 8000b26:	f7ff feb5 	bl	8000894 <Error_Handler>
}
 8000b2a:	e7f3      	b.n	8000b14 <MX_TIM1_Init+0x50>
 8000b2c:	20000130 	.word	0x20000130
 8000b30:	40010000 	.word	0x40010000

08000b34 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b34:	b500      	push	{lr}
 8000b36:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM1)
 8000b38:	6803      	ldr	r3, [r0, #0]
 8000b3a:	4a18      	ldr	r2, [pc, #96]	@ (8000b9c <HAL_TIM_Base_MspInit+0x68>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d005      	beq.n	8000b4c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8000b40:	4a17      	ldr	r2, [pc, #92]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x6c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d016      	beq.n	8000b74 <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b46:	b003      	add	sp, #12
 8000b48:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	9200      	str	r2, [sp, #0]
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x70>)
 8000b52:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000b54:	f041 0101 	orr.w	r1, r1, #1
 8000b58:	6459      	str	r1, [r3, #68]	@ 0x44
 8000b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8000b64:	210f      	movs	r1, #15
 8000b66:	2019      	movs	r0, #25
 8000b68:	f000 f9cc 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b6c:	2019      	movs	r0, #25
 8000b6e:	f000 f9d9 	bl	8000f24 <HAL_NVIC_EnableIRQ>
 8000b72:	e7e8      	b.n	8000b46 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b74:	2200      	movs	r2, #0
 8000b76:	9201      	str	r2, [sp, #4]
 8000b78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x70>)
 8000b7a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000b7c:	f041 0102 	orr.w	r1, r1, #2
 8000b80:	6419      	str	r1, [r3, #64]	@ 0x40
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	201d      	movs	r0, #29
 8000b90:	f000 f9b8 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b94:	201d      	movs	r0, #29
 8000b96:	f000 f9c5 	bl	8000f24 <HAL_NVIC_EnableIRQ>
}
 8000b9a:	e7d4      	b.n	8000b46 <HAL_TIM_Base_MspInit+0x12>
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	40000400 	.word	0x40000400
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ba8:	b530      	push	{r4, r5, lr}
 8000baa:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	2300      	movs	r3, #0
 8000bae:	9303      	str	r3, [sp, #12]
 8000bb0:	9304      	str	r3, [sp, #16]
 8000bb2:	9305      	str	r3, [sp, #20]
 8000bb4:	9306      	str	r3, [sp, #24]
 8000bb6:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM3)
 8000bb8:	6802      	ldr	r2, [r0, #0]
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <HAL_TIM_MspPostInit+0x74>)
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d001      	beq.n	8000bc4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bc0:	b009      	add	sp, #36	@ 0x24
 8000bc2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	2500      	movs	r5, #0
 8000bc6:	9501      	str	r5, [sp, #4]
 8000bc8:	f503 330d 	add.w	r3, r3, #144384	@ 0x23400
 8000bcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bce:	f042 0201 	orr.w	r2, r2, #1
 8000bd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bd6:	f002 0201 	and.w	r2, r2, #1
 8000bda:	9201      	str	r2, [sp, #4]
 8000bdc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	9502      	str	r5, [sp, #8]
 8000be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000be2:	f042 0202 	orr.w	r2, r2, #2
 8000be6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bf2:	23c0      	movs	r3, #192	@ 0xc0
 8000bf4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2402      	movs	r4, #2
 8000bf8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bfa:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	a903      	add	r1, sp, #12
 8000bfe:	4808      	ldr	r0, [pc, #32]	@ (8000c20 <HAL_TIM_MspPostInit+0x78>)
 8000c00:	f000 f9f2 	bl	8000fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c04:	2301      	movs	r3, #1
 8000c06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c0e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	a903      	add	r1, sp, #12
 8000c12:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <HAL_TIM_MspPostInit+0x7c>)
 8000c14:	f000 f9e8 	bl	8000fe8 <HAL_GPIO_Init>
}
 8000c18:	e7d2      	b.n	8000bc0 <HAL_TIM_MspPostInit+0x18>
 8000c1a:	bf00      	nop
 8000c1c:	40000400 	.word	0x40000400
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400

08000c28 <MX_TIM3_Init>:
{
 8000c28:	b500      	push	{lr}
 8000c2a:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8000c30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000c32:	930c      	str	r3, [sp, #48]	@ 0x30
 8000c34:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c36:	9308      	str	r3, [sp, #32]
 8000c38:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	9302      	str	r3, [sp, #8]
 8000c3e:	9303      	str	r3, [sp, #12]
 8000c40:	9304      	str	r3, [sp, #16]
 8000c42:	9305      	str	r3, [sp, #20]
 8000c44:	9306      	str	r3, [sp, #24]
 8000c46:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8000c48:	482a      	ldr	r0, [pc, #168]	@ (8000cf4 <MX_TIM3_Init+0xcc>)
 8000c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf8 <MX_TIM3_Init+0xd0>)
 8000c4c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 3200;
 8000c4e:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8000c52:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 256-1;
 8000c56:	22ff      	movs	r2, #255	@ 0xff
 8000c58:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c5e:	f000 fffd 	bl	8001c5c <HAL_TIM_Base_Init>
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d131      	bne.n	8000cca <MX_TIM3_Init+0xa2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c6a:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c6c:	a90a      	add	r1, sp, #40	@ 0x28
 8000c6e:	4821      	ldr	r0, [pc, #132]	@ (8000cf4 <MX_TIM3_Init+0xcc>)
 8000c70:	f001 f8f5 	bl	8001e5e <HAL_TIM_ConfigClockSource>
 8000c74:	bb60      	cbnz	r0, 8000cd0 <MX_TIM3_Init+0xa8>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c76:	481f      	ldr	r0, [pc, #124]	@ (8000cf4 <MX_TIM3_Init+0xcc>)
 8000c78:	f001 f81c 	bl	8001cb4 <HAL_TIM_PWM_Init>
 8000c7c:	bb58      	cbnz	r0, 8000cd6 <MX_TIM3_Init+0xae>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c82:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c84:	a908      	add	r1, sp, #32
 8000c86:	481b      	ldr	r0, [pc, #108]	@ (8000cf4 <MX_TIM3_Init+0xcc>)
 8000c88:	f001 f9f0 	bl	800206c <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	bb30      	cbnz	r0, 8000cdc <MX_TIM3_Init+0xb4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c8e:	2360      	movs	r3, #96	@ 0x60
 8000c90:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8000c92:	2200      	movs	r2, #0
 8000c94:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c96:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c98:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9a:	a901      	add	r1, sp, #4
 8000c9c:	4815      	ldr	r0, [pc, #84]	@ (8000cf4 <MX_TIM3_Init+0xcc>)
 8000c9e:	f001 f863 	bl	8001d68 <HAL_TIM_PWM_ConfigChannel>
 8000ca2:	b9f0      	cbnz	r0, 8000ce2 <MX_TIM3_Init+0xba>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	eb0d 0102 	add.w	r1, sp, r2
 8000caa:	4812      	ldr	r0, [pc, #72]	@ (8000cf4 <MX_TIM3_Init+0xcc>)
 8000cac:	f001 f85c 	bl	8001d68 <HAL_TIM_PWM_ConfigChannel>
 8000cb0:	b9d0      	cbnz	r0, 8000ce8 <MX_TIM3_Init+0xc0>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	a901      	add	r1, sp, #4
 8000cb6:	480f      	ldr	r0, [pc, #60]	@ (8000cf4 <MX_TIM3_Init+0xcc>)
 8000cb8:	f001 f856 	bl	8001d68 <HAL_TIM_PWM_ConfigChannel>
 8000cbc:	b9b8      	cbnz	r0, 8000cee <MX_TIM3_Init+0xc6>
  HAL_TIM_MspPostInit(&htim3);
 8000cbe:	480d      	ldr	r0, [pc, #52]	@ (8000cf4 <MX_TIM3_Init+0xcc>)
 8000cc0:	f7ff ff72 	bl	8000ba8 <HAL_TIM_MspPostInit>
}
 8000cc4:	b00f      	add	sp, #60	@ 0x3c
 8000cc6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000cca:	f7ff fde3 	bl	8000894 <Error_Handler>
 8000cce:	e7ca      	b.n	8000c66 <MX_TIM3_Init+0x3e>
    Error_Handler();
 8000cd0:	f7ff fde0 	bl	8000894 <Error_Handler>
 8000cd4:	e7cf      	b.n	8000c76 <MX_TIM3_Init+0x4e>
    Error_Handler();
 8000cd6:	f7ff fddd 	bl	8000894 <Error_Handler>
 8000cda:	e7d0      	b.n	8000c7e <MX_TIM3_Init+0x56>
    Error_Handler();
 8000cdc:	f7ff fdda 	bl	8000894 <Error_Handler>
 8000ce0:	e7d5      	b.n	8000c8e <MX_TIM3_Init+0x66>
    Error_Handler();
 8000ce2:	f7ff fdd7 	bl	8000894 <Error_Handler>
 8000ce6:	e7dd      	b.n	8000ca4 <MX_TIM3_Init+0x7c>
    Error_Handler();
 8000ce8:	f7ff fdd4 	bl	8000894 <Error_Handler>
 8000cec:	e7e1      	b.n	8000cb2 <MX_TIM3_Init+0x8a>
    Error_Handler();
 8000cee:	f7ff fdd1 	bl	8000894 <Error_Handler>
 8000cf2:	e7e4      	b.n	8000cbe <MX_TIM3_Init+0x96>
 8000cf4:	200000e8 	.word	0x200000e8
 8000cf8:	40000400 	.word	0x40000400

08000cfc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cfc:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cfe:	480a      	ldr	r0, [pc, #40]	@ (8000d28 <MX_USART1_UART_Init+0x2c>)
 8000d00:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <MX_USART1_UART_Init+0x30>)
 8000d02:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8000d04:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000d08:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d0e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d10:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d12:	220c      	movs	r2, #12
 8000d14:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d1a:	f001 fb10 	bl	800233e <HAL_UART_Init>
 8000d1e:	b900      	cbnz	r0, 8000d22 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d20:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d22:	f7ff fdb7 	bl	8000894 <Error_Handler>
}
 8000d26:	e7fb      	b.n	8000d20 <MX_USART1_UART_Init+0x24>
 8000d28:	20000178 	.word	0x20000178
 8000d2c:	40011000 	.word	0x40011000

08000d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d30:	b510      	push	{r4, lr}
 8000d32:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	2300      	movs	r3, #0
 8000d36:	9303      	str	r3, [sp, #12]
 8000d38:	9304      	str	r3, [sp, #16]
 8000d3a:	9305      	str	r3, [sp, #20]
 8000d3c:	9306      	str	r3, [sp, #24]
 8000d3e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8000d40:	6802      	ldr	r2, [r0, #0]
 8000d42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000d46:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d4e:	b008      	add	sp, #32
 8000d50:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d52:	2400      	movs	r4, #0
 8000d54:	9401      	str	r4, [sp, #4]
 8000d56:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000d5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d5c:	f042 0210 	orr.w	r2, r2, #16
 8000d60:	645a      	str	r2, [r3, #68]	@ 0x44
 8000d62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d64:	f002 0210 	and.w	r2, r2, #16
 8000d68:	9201      	str	r2, [sp, #4]
 8000d6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	9402      	str	r4, [sp, #8]
 8000d6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d70:	f042 0201 	orr.w	r2, r2, #1
 8000d74:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d80:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	a903      	add	r1, sp, #12
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <HAL_UART_MspInit+0x7c>)
 8000d96:	f000 f927 	bl	8000fe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d9a:	4622      	mov	r2, r4
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	2025      	movs	r0, #37	@ 0x25
 8000da0:	f000 f8b0 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000da4:	2025      	movs	r0, #37	@ 0x25
 8000da6:	f000 f8bd 	bl	8000f24 <HAL_NVIC_EnableIRQ>
}
 8000daa:	e7d0      	b.n	8000d4e <HAL_UART_MspInit+0x1e>
 8000dac:	40020000 	.word	0x40020000

08000db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000db4:	f7ff fe7c 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	@ (8000df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000dde:	f003 fbe7 	bl	80045b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de2:	f7ff fdaf 	bl	8000944 <main>
  bx  lr    
 8000de6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000df4:	08004778 	.word	0x08004778
  ldr r2, =_sbss
 8000df8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000dfc:	20004cec 	.word	0x20004cec

08000e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e06:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <HAL_Init+0x30>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e0e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e16:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e1e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f85d 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	200f      	movs	r0, #15
 8000e28:	f7ff fdd6 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fdb2 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000e30:	2000      	movs	r0, #0
 8000e32:	bd08      	pop	{r3, pc}
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e38:	4a03      	ldr	r2, [pc, #12]	@ (8000e48 <HAL_IncTick+0x10>)
 8000e3a:	6811      	ldr	r1, [r2, #0]
 8000e3c:	4b03      	ldr	r3, [pc, #12]	@ (8000e4c <HAL_IncTick+0x14>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	440b      	add	r3, r1
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200001c0 	.word	0x200001c0
 8000e4c:	20000004 	.word	0x20000004

08000e50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e50:	4b01      	ldr	r3, [pc, #4]	@ (8000e58 <HAL_GetTick+0x8>)
 8000e52:	6818      	ldr	r0, [r3, #0]
}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200001c0 	.word	0x200001c0

08000e5c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	db07      	blt.n	8000e70 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e60:	f000 021f 	and.w	r2, r0, #31
 8000e64:	0940      	lsrs	r0, r0, #5
 8000e66:	2301      	movs	r3, #1
 8000e68:	4093      	lsls	r3, r2
 8000e6a:	4a02      	ldr	r2, [pc, #8]	@ (8000e74 <__NVIC_EnableIRQ+0x18>)
 8000e6c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	db08      	blt.n	8000e8e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	0109      	lsls	r1, r1, #4
 8000e7e:	b2c9      	uxtb	r1, r1
 8000e80:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000e84:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000e88:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000e8c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	f000 000f 	and.w	r0, r0, #15
 8000e92:	0109      	lsls	r1, r1, #4
 8000e94:	b2c9      	uxtb	r1, r1
 8000e96:	4b01      	ldr	r3, [pc, #4]	@ (8000e9c <__NVIC_SetPriority+0x24>)
 8000e98:	5419      	strb	r1, [r3, r0]
  }
}
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed14 	.word	0xe000ed14

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea2:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea6:	f1c0 0c07 	rsb	ip, r0, #7
 8000eaa:	f1bc 0f04 	cmp.w	ip, #4
 8000eae:	bf28      	it	cs
 8000eb0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb4:	1d03      	adds	r3, r0, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d90f      	bls.n	8000eda <NVIC_EncodePriority+0x3a>
 8000eba:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 3eff 	mov.w	lr, #4294967295
 8000ec0:	fa0e f00c 	lsl.w	r0, lr, ip
 8000ec4:	ea21 0100 	bic.w	r1, r1, r0
 8000ec8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eca:	fa0e fe03 	lsl.w	lr, lr, r3
 8000ece:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000ed2:	ea41 0002 	orr.w	r0, r1, r2
 8000ed6:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	2300      	movs	r3, #0
 8000edc:	e7ee      	b.n	8000ebc <NVIC_EncodePriority+0x1c>
	...

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4a07      	ldr	r2, [pc, #28]	@ (8000f00 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ee2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000ee8:	041b      	lsls	r3, r3, #16
 8000eea:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	0200      	lsls	r0, r0, #8
 8000eee:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000efc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f04:	b510      	push	{r4, lr}
 8000f06:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_NVIC_SetPriority+0x1c>)
 8000f0a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000f10:	f7ff ffc6 	bl	8000ea0 <NVIC_EncodePriority>
 8000f14:	4601      	mov	r1, r0
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff ffae 	bl	8000e78 <__NVIC_SetPriority>
}
 8000f1c:	bd10      	pop	{r4, pc}
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f26:	f7ff ff99 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000f2a:	bd08      	pop	{r3, pc}

08000f2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f2c:	b570      	push	{r4, r5, r6, lr}
 8000f2e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f30:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000f32:	f7ff ff8d 	bl	8000e50 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f36:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d006      	beq.n	8000f4e <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f40:	2380      	movs	r3, #128	@ 0x80
 8000f42:	6563      	str	r3, [r4, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f44:	2300      	movs	r3, #0
 8000f46:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f4a:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8000f4c:	bd70      	pop	{r4, r5, r6, pc}
 8000f4e:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f50:	6822      	ldr	r2, [r4, #0]
 8000f52:	6813      	ldr	r3, [r2, #0]
 8000f54:	f023 0316 	bic.w	r3, r3, #22
 8000f58:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f5a:	6822      	ldr	r2, [r4, #0]
 8000f5c:	6953      	ldr	r3, [r2, #20]
 8000f5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f62:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f66:	b1e3      	cbz	r3, 8000fa2 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f68:	6822      	ldr	r2, [r4, #0]
 8000f6a:	6813      	ldr	r3, [r2, #0]
 8000f6c:	f023 0308 	bic.w	r3, r3, #8
 8000f70:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000f72:	6822      	ldr	r2, [r4, #0]
 8000f74:	6813      	ldr	r3, [r2, #0]
 8000f76:	f023 0301 	bic.w	r3, r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f013 0f01 	tst.w	r3, #1
 8000f84:	d011      	beq.n	8000faa <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f86:	f7ff ff63 	bl	8000e50 <HAL_GetTick>
 8000f8a:	1b43      	subs	r3, r0, r5
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d9f5      	bls.n	8000f7c <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f90:	2320      	movs	r3, #32
 8000f92:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f94:	2003      	movs	r0, #3
 8000f96:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8000fa0:	e7d4      	b.n	8000f4c <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fa2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1df      	bne.n	8000f68 <HAL_DMA_Abort+0x3c>
 8000fa8:	e7e3      	b.n	8000f72 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000faa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000fac:	233f      	movs	r3, #63	@ 0x3f
 8000fae:	4093      	lsls	r3, r2
 8000fb0:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8000fbe:	e7c5      	b.n	8000f4c <HAL_DMA_Abort+0x20>

08000fc0 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc0:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d003      	beq.n	8000fd2 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fca:	2380      	movs	r3, #128	@ 0x80
 8000fcc:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8000fce:	2001      	movs	r0, #1
 8000fd0:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fd8:	6802      	ldr	r2, [r0, #0]
 8000fda:	6813      	ldr	r3, [r2, #0]
 8000fdc:	f023 0301 	bic.w	r3, r3, #1
 8000fe0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000fe2:	2000      	movs	r0, #0
}
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	f200 80d7 	bhi.w	800119e <HAL_GPIO_Init+0x1b6>
{
 8000ff0:	b570      	push	{r4, r5, r6, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	e065      	b.n	80010c2 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ffc:	2403      	movs	r4, #3
 8000ffe:	fa04 f40e 	lsl.w	r4, r4, lr
 8001002:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001006:	68cc      	ldr	r4, [r1, #12]
 8001008:	fa04 f40e 	lsl.w	r4, r4, lr
 800100c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800100e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001010:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001012:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001016:	684a      	ldr	r2, [r1, #4]
 8001018:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800101c:	409a      	lsls	r2, r3
 800101e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001020:	6042      	str	r2, [r0, #4]
 8001022:	e05c      	b.n	80010de <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001024:	08dc      	lsrs	r4, r3, #3
 8001026:	3408      	adds	r4, #8
 8001028:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800102c:	f003 0507 	and.w	r5, r3, #7
 8001030:	00ad      	lsls	r5, r5, #2
 8001032:	f04f 0e0f 	mov.w	lr, #15
 8001036:	fa0e fe05 	lsl.w	lr, lr, r5
 800103a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103e:	690a      	ldr	r2, [r1, #16]
 8001040:	40aa      	lsls	r2, r5
 8001042:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800104a:	e05c      	b.n	8001106 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104c:	2204      	movs	r2, #4
 800104e:	e000      	b.n	8001052 <HAL_GPIO_Init+0x6a>
 8001050:	2200      	movs	r2, #0
 8001052:	fa02 f20e 	lsl.w	r2, r2, lr
 8001056:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001058:	3402      	adds	r4, #2
 800105a:	4d51      	ldr	r5, [pc, #324]	@ (80011a0 <HAL_GPIO_Init+0x1b8>)
 800105c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001060:	4a50      	ldr	r2, [pc, #320]	@ (80011a4 <HAL_GPIO_Init+0x1bc>)
 8001062:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001064:	ea6f 020c 	mvn.w	r2, ip
 8001068:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106c:	684e      	ldr	r6, [r1, #4]
 800106e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001072:	d001      	beq.n	8001078 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001074:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001078:	4c4a      	ldr	r4, [pc, #296]	@ (80011a4 <HAL_GPIO_Init+0x1bc>)
 800107a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800107c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800107e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001082:	684e      	ldr	r6, [r1, #4]
 8001084:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001088:	d001      	beq.n	800108e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800108a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800108e:	4c45      	ldr	r4, [pc, #276]	@ (80011a4 <HAL_GPIO_Init+0x1bc>)
 8001090:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001092:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001094:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001098:	684e      	ldr	r6, [r1, #4]
 800109a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800109e:	d001      	beq.n	80010a4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80010a0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80010a4:	4c3f      	ldr	r4, [pc, #252]	@ (80011a4 <HAL_GPIO_Init+0x1bc>)
 80010a6:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a8:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80010aa:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ac:	684d      	ldr	r5, [r1, #4]
 80010ae:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80010b2:	d001      	beq.n	80010b8 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80010b4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80010b8:	4c3a      	ldr	r4, [pc, #232]	@ (80011a4 <HAL_GPIO_Init+0x1bc>)
 80010ba:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010bc:	3301      	adds	r3, #1
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	d86b      	bhi.n	800119a <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80010c2:	2201      	movs	r2, #1
 80010c4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c6:	680c      	ldr	r4, [r1, #0]
 80010c8:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80010cc:	ea32 0404 	bics.w	r4, r2, r4
 80010d0:	d1f4      	bne.n	80010bc <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d2:	684c      	ldr	r4, [r1, #4]
 80010d4:	f004 0403 	and.w	r4, r4, #3
 80010d8:	3c01      	subs	r4, #1
 80010da:	2c01      	cmp	r4, #1
 80010dc:	d98b      	bls.n	8000ff6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010de:	684a      	ldr	r2, [r1, #4]
 80010e0:	f002 0203 	and.w	r2, r2, #3
 80010e4:	2a03      	cmp	r2, #3
 80010e6:	d009      	beq.n	80010fc <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80010e8:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ea:	005d      	lsls	r5, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	40aa      	lsls	r2, r5
 80010f0:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f4:	688a      	ldr	r2, [r1, #8]
 80010f6:	40aa      	lsls	r2, r5
 80010f8:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80010fa:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fc:	684a      	ldr	r2, [r1, #4]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	2a02      	cmp	r2, #2
 8001104:	d08e      	beq.n	8001024 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001106:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001108:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001112:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001116:	684a      	ldr	r2, [r1, #4]
 8001118:	f002 0203 	and.w	r2, r2, #3
 800111c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001120:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001122:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001124:	684a      	ldr	r2, [r1, #4]
 8001126:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800112a:	d0c7      	beq.n	80010bc <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112c:	2200      	movs	r2, #0
 800112e:	9201      	str	r2, [sp, #4]
 8001130:	4a1d      	ldr	r2, [pc, #116]	@ (80011a8 <HAL_GPIO_Init+0x1c0>)
 8001132:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001134:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001138:	6454      	str	r4, [r2, #68]	@ 0x44
 800113a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800113c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001140:	9201      	str	r2, [sp, #4]
 8001142:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001144:	089c      	lsrs	r4, r3, #2
 8001146:	1ca5      	adds	r5, r4, #2
 8001148:	4a15      	ldr	r2, [pc, #84]	@ (80011a0 <HAL_GPIO_Init+0x1b8>)
 800114a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800114e:	f003 0e03 	and.w	lr, r3, #3
 8001152:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f20e 	lsl.w	r2, r2, lr
 800115c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001160:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <HAL_GPIO_Init+0x1c4>)
 8001162:	4290      	cmp	r0, r2
 8001164:	f43f af74 	beq.w	8001050 <HAL_GPIO_Init+0x68>
 8001168:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800116c:	4290      	cmp	r0, r2
 800116e:	d00e      	beq.n	800118e <HAL_GPIO_Init+0x1a6>
 8001170:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001174:	4290      	cmp	r0, r2
 8001176:	d00c      	beq.n	8001192 <HAL_GPIO_Init+0x1aa>
 8001178:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800117c:	4290      	cmp	r0, r2
 800117e:	d00a      	beq.n	8001196 <HAL_GPIO_Init+0x1ae>
 8001180:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001184:	4290      	cmp	r0, r2
 8001186:	f43f af61 	beq.w	800104c <HAL_GPIO_Init+0x64>
 800118a:	2207      	movs	r2, #7
 800118c:	e761      	b.n	8001052 <HAL_GPIO_Init+0x6a>
 800118e:	2201      	movs	r2, #1
 8001190:	e75f      	b.n	8001052 <HAL_GPIO_Init+0x6a>
 8001192:	2202      	movs	r2, #2
 8001194:	e75d      	b.n	8001052 <HAL_GPIO_Init+0x6a>
 8001196:	2203      	movs	r2, #3
 8001198:	e75b      	b.n	8001052 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800119a:	b002      	add	sp, #8
 800119c:	bd70      	pop	{r4, r5, r6, pc}
 800119e:	4770      	bx	lr
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40013c00 	.word	0x40013c00
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020000 	.word	0x40020000

080011b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	b10a      	cbz	r2, 80011b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	6181      	str	r1, [r0, #24]
 80011b4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b6:	0409      	lsls	r1, r1, #16
 80011b8:	6181      	str	r1, [r0, #24]
  }
}
 80011ba:	4770      	bx	lr

080011bc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011bc:	2800      	cmp	r0, #0
 80011be:	f000 81e0 	beq.w	8001582 <HAL_RCC_OscConfig+0x3c6>
{
 80011c2:	b570      	push	{r4, r5, r6, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c8:	6803      	ldr	r3, [r0, #0]
 80011ca:	f013 0f01 	tst.w	r3, #1
 80011ce:	d03b      	beq.n	8001248 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d0:	4b9f      	ldr	r3, [pc, #636]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d02c      	beq.n	8001236 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011dc:	4b9c      	ldr	r3, [pc, #624]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d021      	beq.n	800122c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e8:	6863      	ldr	r3, [r4, #4]
 80011ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ee:	d04f      	beq.n	8001290 <HAL_RCC_OscConfig+0xd4>
 80011f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011f4:	d052      	beq.n	800129c <HAL_RCC_OscConfig+0xe0>
 80011f6:	4b96      	ldr	r3, [pc, #600]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001206:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001208:	6863      	ldr	r3, [r4, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d050      	beq.n	80012b0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120e:	f7ff fe1f 	bl	8000e50 <HAL_GetTick>
 8001212:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001214:	4b8e      	ldr	r3, [pc, #568]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800121c:	d114      	bne.n	8001248 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121e:	f7ff fe17 	bl	8000e50 <HAL_GetTick>
 8001222:	1b40      	subs	r0, r0, r5
 8001224:	2864      	cmp	r0, #100	@ 0x64
 8001226:	d9f5      	bls.n	8001214 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001228:	2003      	movs	r0, #3
 800122a:	e1b1      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122c:	4b88      	ldr	r3, [pc, #544]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001234:	d0d8      	beq.n	80011e8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001236:	4b86      	ldr	r3, [pc, #536]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800123e:	d003      	beq.n	8001248 <HAL_RCC_OscConfig+0x8c>
 8001240:	6863      	ldr	r3, [r4, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 819f 	beq.w	8001586 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	f013 0f02 	tst.w	r3, #2
 800124e:	d054      	beq.n	80012fa <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001250:	4b7f      	ldr	r3, [pc, #508]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f013 0f0c 	tst.w	r3, #12
 8001258:	d03e      	beq.n	80012d8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800125a:	4b7d      	ldr	r3, [pc, #500]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001262:	2b08      	cmp	r3, #8
 8001264:	d033      	beq.n	80012ce <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001266:	68e3      	ldr	r3, [r4, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d068      	beq.n	800133e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b79      	ldr	r3, [pc, #484]	@ (8001454 <HAL_RCC_OscConfig+0x298>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff fded 	bl	8000e50 <HAL_GetTick>
 8001276:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	4b75      	ldr	r3, [pc, #468]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f013 0f02 	tst.w	r3, #2
 8001280:	d154      	bne.n	800132c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001282:	f7ff fde5 	bl	8000e50 <HAL_GetTick>
 8001286:	1b40      	subs	r0, r0, r5
 8001288:	2802      	cmp	r0, #2
 800128a:	d9f5      	bls.n	8001278 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800128c:	2003      	movs	r0, #3
 800128e:	e17f      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	4a6f      	ldr	r2, [pc, #444]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e7b5      	b.n	8001208 <HAL_RCC_OscConfig+0x4c>
 800129c:	4b6c      	ldr	r3, [pc, #432]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	e7ab      	b.n	8001208 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80012b0:	f7ff fdce 	bl	8000e50 <HAL_GetTick>
 80012b4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	4b66      	ldr	r3, [pc, #408]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80012be:	d0c3      	beq.n	8001248 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fdc6 	bl	8000e50 <HAL_GetTick>
 80012c4:	1b40      	subs	r0, r0, r5
 80012c6:	2864      	cmp	r0, #100	@ 0x64
 80012c8:	d9f5      	bls.n	80012b6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80012ca:	2003      	movs	r0, #3
 80012cc:	e160      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ce:	4b60      	ldr	r3, [pc, #384]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80012d6:	d1c6      	bne.n	8001266 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d8:	4b5d      	ldr	r3, [pc, #372]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f013 0f02 	tst.w	r3, #2
 80012e0:	d003      	beq.n	80012ea <HAL_RCC_OscConfig+0x12e>
 80012e2:	68e3      	ldr	r3, [r4, #12]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	f040 8150 	bne.w	800158a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	4a59      	ldr	r2, [pc, #356]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 80012ec:	6813      	ldr	r3, [r2, #0]
 80012ee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80012f2:	6921      	ldr	r1, [r4, #16]
 80012f4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012f8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	f013 0f08 	tst.w	r3, #8
 8001300:	d042      	beq.n	8001388 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001302:	6963      	ldr	r3, [r4, #20]
 8001304:	b36b      	cbz	r3, 8001362 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001306:	4b53      	ldr	r3, [pc, #332]	@ (8001454 <HAL_RCC_OscConfig+0x298>)
 8001308:	2201      	movs	r2, #1
 800130a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130e:	f7ff fd9f 	bl	8000e50 <HAL_GetTick>
 8001312:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001314:	4b4e      	ldr	r3, [pc, #312]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 8001316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001318:	f013 0f02 	tst.w	r3, #2
 800131c:	d134      	bne.n	8001388 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fd97 	bl	8000e50 <HAL_GetTick>
 8001322:	1b40      	subs	r0, r0, r5
 8001324:	2802      	cmp	r0, #2
 8001326:	d9f5      	bls.n	8001314 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001328:	2003      	movs	r0, #3
 800132a:	e131      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132c:	4a48      	ldr	r2, [pc, #288]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 800132e:	6813      	ldr	r3, [r2, #0]
 8001330:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001334:	6921      	ldr	r1, [r4, #16]
 8001336:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	e7dd      	b.n	80012fa <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800133e:	4b45      	ldr	r3, [pc, #276]	@ (8001454 <HAL_RCC_OscConfig+0x298>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001344:	f7ff fd84 	bl	8000e50 <HAL_GetTick>
 8001348:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	4b41      	ldr	r3, [pc, #260]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f013 0f02 	tst.w	r3, #2
 8001352:	d0d2      	beq.n	80012fa <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff fd7c 	bl	8000e50 <HAL_GetTick>
 8001358:	1b40      	subs	r0, r0, r5
 800135a:	2802      	cmp	r0, #2
 800135c:	d9f5      	bls.n	800134a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800135e:	2003      	movs	r0, #3
 8001360:	e116      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001362:	4b3c      	ldr	r3, [pc, #240]	@ (8001454 <HAL_RCC_OscConfig+0x298>)
 8001364:	2200      	movs	r2, #0
 8001366:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff fd71 	bl	8000e50 <HAL_GetTick>
 800136e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001370:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 8001372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001374:	f013 0f02 	tst.w	r3, #2
 8001378:	d006      	beq.n	8001388 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800137a:	f7ff fd69 	bl	8000e50 <HAL_GetTick>
 800137e:	1b40      	subs	r0, r0, r5
 8001380:	2802      	cmp	r0, #2
 8001382:	d9f5      	bls.n	8001370 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001384:	2003      	movs	r0, #3
 8001386:	e103      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	f013 0f04 	tst.w	r3, #4
 800138e:	d077      	beq.n	8001480 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001390:	4b2f      	ldr	r3, [pc, #188]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001398:	d133      	bne.n	8001402 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	4b2c      	ldr	r3, [pc, #176]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 80013a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013a2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80013a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013b2:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	4b28      	ldr	r3, [pc, #160]	@ (8001458 <HAL_RCC_OscConfig+0x29c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80013bc:	d023      	beq.n	8001406 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013be:	68a3      	ldr	r3, [r4, #8]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d034      	beq.n	800142e <HAL_RCC_OscConfig+0x272>
 80013c4:	2b05      	cmp	r3, #5
 80013c6:	d038      	beq.n	800143a <HAL_RCC_OscConfig+0x27e>
 80013c8:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 80013ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80013cc:	f022 0201 	bic.w	r2, r2, #1
 80013d0:	671a      	str	r2, [r3, #112]	@ 0x70
 80013d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80013d4:	f022 0204 	bic.w	r2, r2, #4
 80013d8:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013da:	68a3      	ldr	r3, [r4, #8]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d03d      	beq.n	800145c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e0:	f7ff fd36 	bl	8000e50 <HAL_GetTick>
 80013e4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ea:	f013 0f02 	tst.w	r3, #2
 80013ee:	d146      	bne.n	800147e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f0:	f7ff fd2e 	bl	8000e50 <HAL_GetTick>
 80013f4:	1b80      	subs	r0, r0, r6
 80013f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80013fa:	4298      	cmp	r0, r3
 80013fc:	d9f3      	bls.n	80013e6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80013fe:	2003      	movs	r0, #3
 8001400:	e0c6      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001402:	2500      	movs	r5, #0
 8001404:	e7d6      	b.n	80013b4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001406:	4a14      	ldr	r2, [pc, #80]	@ (8001458 <HAL_RCC_OscConfig+0x29c>)
 8001408:	6813      	ldr	r3, [r2, #0]
 800140a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001410:	f7ff fd1e 	bl	8000e50 <HAL_GetTick>
 8001414:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <HAL_RCC_OscConfig+0x29c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800141e:	d1ce      	bne.n	80013be <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001420:	f7ff fd16 	bl	8000e50 <HAL_GetTick>
 8001424:	1b80      	subs	r0, r0, r6
 8001426:	2802      	cmp	r0, #2
 8001428:	d9f5      	bls.n	8001416 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800142a:	2003      	movs	r0, #3
 800142c:	e0b0      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142e:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 8001430:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6713      	str	r3, [r2, #112]	@ 0x70
 8001438:	e7cf      	b.n	80013da <HAL_RCC_OscConfig+0x21e>
 800143a:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <HAL_RCC_OscConfig+0x294>)
 800143c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800143e:	f042 0204 	orr.w	r2, r2, #4
 8001442:	671a      	str	r2, [r3, #112]	@ 0x70
 8001444:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001446:	f042 0201 	orr.w	r2, r2, #1
 800144a:	671a      	str	r2, [r3, #112]	@ 0x70
 800144c:	e7c5      	b.n	80013da <HAL_RCC_OscConfig+0x21e>
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	42470000 	.word	0x42470000
 8001458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145c:	f7ff fcf8 	bl	8000e50 <HAL_GetTick>
 8001460:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001462:	4b52      	ldr	r3, [pc, #328]	@ (80015ac <HAL_RCC_OscConfig+0x3f0>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001466:	f013 0f02 	tst.w	r3, #2
 800146a:	d008      	beq.n	800147e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f7ff fcf0 	bl	8000e50 <HAL_GetTick>
 8001470:	1b80      	subs	r0, r0, r6
 8001472:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001476:	4298      	cmp	r0, r3
 8001478:	d9f3      	bls.n	8001462 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800147a:	2003      	movs	r0, #3
 800147c:	e088      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800147e:	b9ed      	cbnz	r5, 80014bc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001480:	69a3      	ldr	r3, [r4, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8083 	beq.w	800158e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001488:	4a48      	ldr	r2, [pc, #288]	@ (80015ac <HAL_RCC_OscConfig+0x3f0>)
 800148a:	6892      	ldr	r2, [r2, #8]
 800148c:	f002 020c 	and.w	r2, r2, #12
 8001490:	2a08      	cmp	r2, #8
 8001492:	d051      	beq.n	8001538 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001494:	2b02      	cmp	r3, #2
 8001496:	d017      	beq.n	80014c8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001498:	4b45      	ldr	r3, [pc, #276]	@ (80015b0 <HAL_RCC_OscConfig+0x3f4>)
 800149a:	2200      	movs	r2, #0
 800149c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fcd7 	bl	8000e50 <HAL_GetTick>
 80014a2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a4:	4b41      	ldr	r3, [pc, #260]	@ (80015ac <HAL_RCC_OscConfig+0x3f0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80014ac:	d042      	beq.n	8001534 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fccf 	bl	8000e50 <HAL_GetTick>
 80014b2:	1b00      	subs	r0, r0, r4
 80014b4:	2802      	cmp	r0, #2
 80014b6:	d9f5      	bls.n	80014a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80014b8:	2003      	movs	r0, #3
 80014ba:	e069      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014bc:	4a3b      	ldr	r2, [pc, #236]	@ (80015ac <HAL_RCC_OscConfig+0x3f0>)
 80014be:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80014c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c6:	e7db      	b.n	8001480 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80014c8:	4b39      	ldr	r3, [pc, #228]	@ (80015b0 <HAL_RCC_OscConfig+0x3f4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80014ce:	f7ff fcbf 	bl	8000e50 <HAL_GetTick>
 80014d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d4:	4b35      	ldr	r3, [pc, #212]	@ (80015ac <HAL_RCC_OscConfig+0x3f0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80014dc:	d006      	beq.n	80014ec <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014de:	f7ff fcb7 	bl	8000e50 <HAL_GetTick>
 80014e2:	1b40      	subs	r0, r0, r5
 80014e4:	2802      	cmp	r0, #2
 80014e6:	d9f5      	bls.n	80014d4 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80014e8:	2003      	movs	r0, #3
 80014ea:	e051      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ec:	69e3      	ldr	r3, [r4, #28]
 80014ee:	6a22      	ldr	r2, [r4, #32]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80014f4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014f8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80014fa:	0852      	lsrs	r2, r2, #1
 80014fc:	3a01      	subs	r2, #1
 80014fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001502:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001504:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001508:	4a28      	ldr	r2, [pc, #160]	@ (80015ac <HAL_RCC_OscConfig+0x3f0>)
 800150a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800150c:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <HAL_RCC_OscConfig+0x3f4>)
 800150e:	2201      	movs	r2, #1
 8001510:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001512:	f7ff fc9d 	bl	8000e50 <HAL_GetTick>
 8001516:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001518:	4b24      	ldr	r3, [pc, #144]	@ (80015ac <HAL_RCC_OscConfig+0x3f0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001520:	d106      	bne.n	8001530 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001522:	f7ff fc95 	bl	8000e50 <HAL_GetTick>
 8001526:	1b00      	subs	r0, r0, r4
 8001528:	2802      	cmp	r0, #2
 800152a:	d9f5      	bls.n	8001518 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 800152c:	2003      	movs	r0, #3
 800152e:	e02f      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001530:	2000      	movs	r0, #0
 8001532:	e02d      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
 8001534:	2000      	movs	r0, #0
 8001536:	e02b      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001538:	2b01      	cmp	r3, #1
 800153a:	d02b      	beq.n	8001594 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <HAL_RCC_OscConfig+0x3f0>)
 800153e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001540:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001544:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001546:	4291      	cmp	r1, r2
 8001548:	d126      	bne.n	8001598 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800154a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800154e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001550:	428a      	cmp	r2, r1
 8001552:	d123      	bne.n	800159c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001554:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001556:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800155a:	401a      	ands	r2, r3
 800155c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001560:	d11e      	bne.n	80015a0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001562:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001566:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001568:	0852      	lsrs	r2, r2, #1
 800156a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800156c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001570:	d118      	bne.n	80015a4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001572:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001576:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001578:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800157c:	d114      	bne.n	80015a8 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800157e:	2000      	movs	r0, #0
 8001580:	e006      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001582:	2001      	movs	r0, #1
}
 8001584:	4770      	bx	lr
        return HAL_ERROR;
 8001586:	2001      	movs	r0, #1
 8001588:	e002      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800158a:	2001      	movs	r0, #1
 800158c:	e000      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800158e:	2000      	movs	r0, #0
}
 8001590:	b002      	add	sp, #8
 8001592:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001594:	2001      	movs	r0, #1
 8001596:	e7fb      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001598:	2001      	movs	r0, #1
 800159a:	e7f9      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
 800159c:	2001      	movs	r0, #1
 800159e:	e7f7      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
 80015a0:	2001      	movs	r0, #1
 80015a2:	e7f5      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
 80015a4:	2001      	movs	r0, #1
 80015a6:	e7f3      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
 80015a8:	2001      	movs	r0, #1
 80015aa:	e7f1      	b.n	8001590 <HAL_RCC_OscConfig+0x3d4>
 80015ac:	40023800 	.word	0x40023800
 80015b0:	42470000 	.word	0x42470000

080015b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b4:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b6:	4b33      	ldr	r3, [pc, #204]	@ (8001684 <HAL_RCC_GetSysClockFreq+0xd0>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b04      	cmp	r3, #4
 80015c0:	d05b      	beq.n	800167a <HAL_RCC_GetSysClockFreq+0xc6>
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d15b      	bne.n	800167e <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001684 <HAL_RCC_GetSysClockFreq+0xd0>)
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80015d4:	d02c      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <HAL_RCC_GetSysClockFreq+0xd0>)
 80015d8:	6858      	ldr	r0, [r3, #4]
 80015da:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80015de:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80015e2:	ebbc 0c00 	subs.w	ip, ip, r0
 80015e6:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80015ea:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80015ee:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80015f2:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80015f6:	ebb1 010c 	subs.w	r1, r1, ip
 80015fa:	eb63 030e 	sbc.w	r3, r3, lr
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001604:	00c9      	lsls	r1, r1, #3
 8001606:	eb11 0c00 	adds.w	ip, r1, r0
 800160a:	f143 0300 	adc.w	r3, r3, #0
 800160e:	0259      	lsls	r1, r3, #9
 8001610:	2300      	movs	r3, #0
 8001612:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8001616:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800161a:	f7fe fde1 	bl	80001e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800161e:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001626:	3301      	adds	r3, #1
 8001628:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800162a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800162e:	e027      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001630:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001632:	6858      	ldr	r0, [r3, #4]
 8001634:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001638:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800163c:	ebbc 0c00 	subs.w	ip, ip, r0
 8001640:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001644:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001648:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800164c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001650:	ebb1 010c 	subs.w	r1, r1, ip
 8001654:	eb63 030e 	sbc.w	r3, r3, lr
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800165e:	00c9      	lsls	r1, r1, #3
 8001660:	eb11 0c00 	adds.w	ip, r1, r0
 8001664:	f143 0300 	adc.w	r3, r3, #0
 8001668:	0299      	lsls	r1, r3, #10
 800166a:	2300      	movs	r3, #0
 800166c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001670:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001674:	f7fe fdb4 	bl	80001e0 <__aeabi_uldivmod>
 8001678:	e7d1      	b.n	800161e <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800167a:	4803      	ldr	r0, [pc, #12]	@ (8001688 <HAL_RCC_GetSysClockFreq+0xd4>)
 800167c:	e000      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800167e:	4803      	ldr	r0, [pc, #12]	@ (800168c <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001680:	bd08      	pop	{r3, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	007a1200 	.word	0x007a1200
 800168c:	00f42400 	.word	0x00f42400

08001690 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001690:	2800      	cmp	r0, #0
 8001692:	f000 809b 	beq.w	80017cc <HAL_RCC_ClockConfig+0x13c>
{
 8001696:	b570      	push	{r4, r5, r6, lr}
 8001698:	460d      	mov	r5, r1
 800169a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800169c:	4b4f      	ldr	r3, [pc, #316]	@ (80017dc <HAL_RCC_ClockConfig+0x14c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	428b      	cmp	r3, r1
 80016a6:	d208      	bcs.n	80016ba <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a8:	b2cb      	uxtb	r3, r1
 80016aa:	4a4c      	ldr	r2, [pc, #304]	@ (80017dc <HAL_RCC_ClockConfig+0x14c>)
 80016ac:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	6813      	ldr	r3, [r2, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	428b      	cmp	r3, r1
 80016b6:	f040 808b 	bne.w	80017d0 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	f013 0f02 	tst.w	r3, #2
 80016c0:	d017      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c2:	f013 0f04 	tst.w	r3, #4
 80016c6:	d004      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c8:	4a45      	ldr	r2, [pc, #276]	@ (80017e0 <HAL_RCC_ClockConfig+0x150>)
 80016ca:	6893      	ldr	r3, [r2, #8]
 80016cc:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016d0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	f013 0f08 	tst.w	r3, #8
 80016d8:	d004      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016da:	4a41      	ldr	r2, [pc, #260]	@ (80017e0 <HAL_RCC_ClockConfig+0x150>)
 80016dc:	6893      	ldr	r3, [r2, #8]
 80016de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016e2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4a3e      	ldr	r2, [pc, #248]	@ (80017e0 <HAL_RCC_ClockConfig+0x150>)
 80016e6:	6893      	ldr	r3, [r2, #8]
 80016e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80016ec:	68a1      	ldr	r1, [r4, #8]
 80016ee:	430b      	orrs	r3, r1
 80016f0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	f013 0f01 	tst.w	r3, #1
 80016f8:	d032      	beq.n	8001760 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fa:	6863      	ldr	r3, [r4, #4]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d021      	beq.n	8001744 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001700:	1e9a      	subs	r2, r3, #2
 8001702:	2a01      	cmp	r2, #1
 8001704:	d925      	bls.n	8001752 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	4a36      	ldr	r2, [pc, #216]	@ (80017e0 <HAL_RCC_ClockConfig+0x150>)
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	f012 0f02 	tst.w	r2, #2
 800170e:	d061      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001710:	4933      	ldr	r1, [pc, #204]	@ (80017e0 <HAL_RCC_ClockConfig+0x150>)
 8001712:	688a      	ldr	r2, [r1, #8]
 8001714:	f022 0203 	bic.w	r2, r2, #3
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800171c:	f7ff fb98 	bl	8000e50 <HAL_GetTick>
 8001720:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <HAL_RCC_ClockConfig+0x150>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	6862      	ldr	r2, [r4, #4]
 800172c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001730:	d016      	beq.n	8001760 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001732:	f7ff fb8d 	bl	8000e50 <HAL_GetTick>
 8001736:	1b80      	subs	r0, r0, r6
 8001738:	f241 3388 	movw	r3, #5000	@ 0x1388
 800173c:	4298      	cmp	r0, r3
 800173e:	d9f0      	bls.n	8001722 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001740:	2003      	movs	r0, #3
 8001742:	e042      	b.n	80017ca <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001744:	4a26      	ldr	r2, [pc, #152]	@ (80017e0 <HAL_RCC_ClockConfig+0x150>)
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800174c:	d1e0      	bne.n	8001710 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800174e:	2001      	movs	r0, #1
 8001750:	e03b      	b.n	80017ca <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001752:	4a23      	ldr	r2, [pc, #140]	@ (80017e0 <HAL_RCC_ClockConfig+0x150>)
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800175a:	d1d9      	bne.n	8001710 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800175c:	2001      	movs	r0, #1
 800175e:	e034      	b.n	80017ca <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001760:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <HAL_RCC_ClockConfig+0x14c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	42ab      	cmp	r3, r5
 800176a:	d907      	bls.n	800177c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176c:	b2ea      	uxtb	r2, r5
 800176e:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <HAL_RCC_ClockConfig+0x14c>)
 8001770:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	42ab      	cmp	r3, r5
 800177a:	d12d      	bne.n	80017d8 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	f013 0f04 	tst.w	r3, #4
 8001782:	d006      	beq.n	8001792 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001784:	4a16      	ldr	r2, [pc, #88]	@ (80017e0 <HAL_RCC_ClockConfig+0x150>)
 8001786:	6893      	ldr	r3, [r2, #8]
 8001788:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800178c:	68e1      	ldr	r1, [r4, #12]
 800178e:	430b      	orrs	r3, r1
 8001790:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	f013 0f08 	tst.w	r3, #8
 8001798:	d007      	beq.n	80017aa <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800179a:	4a11      	ldr	r2, [pc, #68]	@ (80017e0 <HAL_RCC_ClockConfig+0x150>)
 800179c:	6893      	ldr	r3, [r2, #8]
 800179e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80017a2:	6921      	ldr	r1, [r4, #16]
 80017a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017a8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017aa:	f7ff ff03 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 80017ae:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <HAL_RCC_ClockConfig+0x150>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017b6:	4a0b      	ldr	r2, [pc, #44]	@ (80017e4 <HAL_RCC_ClockConfig+0x154>)
 80017b8:	5cd3      	ldrb	r3, [r2, r3]
 80017ba:	40d8      	lsrs	r0, r3
 80017bc:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <HAL_RCC_ClockConfig+0x158>)
 80017be:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80017c0:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <HAL_RCC_ClockConfig+0x15c>)
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	f7ff f908 	bl	80009d8 <HAL_InitTick>
  return HAL_OK;
 80017c8:	2000      	movs	r0, #0
}
 80017ca:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80017cc:	2001      	movs	r0, #1
}
 80017ce:	4770      	bx	lr
      return HAL_ERROR;
 80017d0:	2001      	movs	r0, #1
 80017d2:	e7fa      	b.n	80017ca <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80017d4:	2001      	movs	r0, #1
 80017d6:	e7f8      	b.n	80017ca <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80017d8:	2001      	movs	r0, #1
 80017da:	e7f6      	b.n	80017ca <HAL_RCC_ClockConfig+0x13a>
 80017dc:	40023c00 	.word	0x40023c00
 80017e0:	40023800 	.word	0x40023800
 80017e4:	08004740 	.word	0x08004740
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000008 	.word	0x20000008

080017f0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80017f0:	4b01      	ldr	r3, [pc, #4]	@ (80017f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000000 	.word	0x20000000

080017fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017fc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017fe:	f7ff fff7 	bl	80017f0 <HAL_RCC_GetHCLKFreq>
 8001802:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800180a:	4a03      	ldr	r2, [pc, #12]	@ (8001818 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800180c:	5cd3      	ldrb	r3, [r2, r3]
}
 800180e:	40d8      	lsrs	r0, r3
 8001810:	bd08      	pop	{r3, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	08004738 	.word	0x08004738

0800181c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800181c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800181e:	f7ff ffe7 	bl	80017f0 <HAL_RCC_GetHCLKFreq>
 8001822:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800182a:	4a03      	ldr	r2, [pc, #12]	@ (8001838 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800182c:	5cd3      	ldrb	r3, [r2, r3]
}
 800182e:	40d8      	lsrs	r0, r3
 8001830:	bd08      	pop	{r3, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	08004738 	.word	0x08004738

0800183c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800183c:	230f      	movs	r3, #15
 800183e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_RCC_GetClockConfig+0x34>)
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	f002 0203 	and.w	r2, r2, #3
 8001848:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8001850:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8001858:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	08db      	lsrs	r3, r3, #3
 800185e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001862:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <HAL_RCC_GetClockConfig+0x38>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	600b      	str	r3, [r1, #0]
}
 800186e:	4770      	bx	lr
 8001870:	40023800 	.word	0x40023800
 8001874:	40023c00 	.word	0x40023c00

08001878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001878:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800187a:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800187c:	6a03      	ldr	r3, [r0, #32]
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001884:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001886:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001888:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800188c:	680c      	ldr	r4, [r1, #0]
 800188e:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001890:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001894:	688b      	ldr	r3, [r1, #8]
 8001896:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001898:	4a0b      	ldr	r2, [pc, #44]	@ (80018c8 <TIM_OC1_SetConfig+0x50>)
 800189a:	4290      	cmp	r0, r2
 800189c:	d006      	beq.n	80018ac <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800189e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80018a0:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80018a2:	684a      	ldr	r2, [r1, #4]
 80018a4:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018a6:	6203      	str	r3, [r0, #32]
}
 80018a8:	bc30      	pop	{r4, r5}
 80018aa:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80018ac:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80018b0:	68ca      	ldr	r2, [r1, #12]
 80018b2:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 80018b4:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80018b8:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80018bc:	694a      	ldr	r2, [r1, #20]
 80018be:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80018c0:	698d      	ldr	r5, [r1, #24]
 80018c2:	4315      	orrs	r5, r2
 80018c4:	e7eb      	b.n	800189e <TIM_OC1_SetConfig+0x26>
 80018c6:	bf00      	nop
 80018c8:	40010000 	.word	0x40010000

080018cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80018cc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018ce:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80018d0:	6a02      	ldr	r2, [r0, #32]
 80018d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018d6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018d8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80018da:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80018dc:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80018e0:	680d      	ldr	r5, [r1, #0]
 80018e2:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80018e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80018e8:	688a      	ldr	r2, [r1, #8]
 80018ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80018ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001924 <TIM_OC3_SetConfig+0x58>)
 80018f0:	4290      	cmp	r0, r2
 80018f2:	d006      	beq.n	8001902 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018f4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80018f6:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80018f8:	684a      	ldr	r2, [r1, #4]
 80018fa:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018fc:	6203      	str	r3, [r0, #32]
}
 80018fe:	bc30      	pop	{r4, r5}
 8001900:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001902:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001906:	68ca      	ldr	r2, [r1, #12]
 8001908:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800190c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001910:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001914:	694a      	ldr	r2, [r1, #20]
 8001916:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800191a:	698a      	ldr	r2, [r1, #24]
 800191c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8001920:	e7e8      	b.n	80018f4 <TIM_OC3_SetConfig+0x28>
 8001922:	bf00      	nop
 8001924:	40010000 	.word	0x40010000

08001928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001928:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800192a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800192c:	6a02      	ldr	r2, [r0, #32]
 800192e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001932:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001934:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001936:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001938:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800193c:	680d      	ldr	r5, [r1, #0]
 800193e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001942:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001946:	688d      	ldr	r5, [r1, #8]
 8001948:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800194c:	4d07      	ldr	r5, [pc, #28]	@ (800196c <TIM_OC4_SetConfig+0x44>)
 800194e:	42a8      	cmp	r0, r5
 8001950:	d006      	beq.n	8001960 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001952:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001954:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001956:	684a      	ldr	r2, [r1, #4]
 8001958:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800195a:	6203      	str	r3, [r0, #32]
}
 800195c:	bc30      	pop	{r4, r5}
 800195e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001960:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001964:	694d      	ldr	r5, [r1, #20]
 8001966:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800196a:	e7f2      	b.n	8001952 <TIM_OC4_SetConfig+0x2a>
 800196c:	40010000 	.word	0x40010000

08001970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001970:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001972:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001974:	6a04      	ldr	r4, [r0, #32]
 8001976:	f024 0401 	bic.w	r4, r4, #1
 800197a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800197c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800197e:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001982:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001986:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800198a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800198c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800198e:	6203      	str	r3, [r0, #32]
}
 8001990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001994:	4770      	bx	lr

08001996 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001996:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001998:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800199a:	6a04      	ldr	r4, [r0, #32]
 800199c:	f024 0410 	bic.w	r4, r4, #16
 80019a0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019a2:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019a4:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019a8:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80019b0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80019b4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80019b6:	6203      	str	r3, [r0, #32]
}
 80019b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019bc:	4770      	bx	lr

080019be <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80019be:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80019c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019c4:	430b      	orrs	r3, r1
 80019c6:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019ca:	6083      	str	r3, [r0, #8]
}
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80019d0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d12f      	bne.n	8001a3a <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 80019da:	2302      	movs	r3, #2
 80019dc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019e0:	6802      	ldr	r2, [r0, #0]
 80019e2:	68d3      	ldr	r3, [r2, #12]
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019ea:	6803      	ldr	r3, [r0, #0]
 80019ec:	4a15      	ldr	r2, [pc, #84]	@ (8001a44 <HAL_TIM_Base_Start_IT+0x74>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d018      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x54>
 80019f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f6:	d015      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x54>
 80019f8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d011      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x54>
 8001a00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x54>
 8001a08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d009      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x54>
 8001a10:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d005      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001a20:	2000      	movs	r0, #0
 8001a22:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a2a:	2a06      	cmp	r2, #6
 8001a2c:	d007      	beq.n	8001a3e <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001a36:	2000      	movs	r0, #0
 8001a38:	4770      	bx	lr
    return HAL_ERROR;
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	4770      	bx	lr
  return HAL_OK;
 8001a3e:	2000      	movs	r0, #0
}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40010000 	.word	0x40010000

08001a48 <HAL_TIM_PWM_MspInit>:
}
 8001a48:	4770      	bx	lr

08001a4a <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001a4a:	4770      	bx	lr

08001a4c <HAL_TIM_IC_CaptureCallback>:
}
 8001a4c:	4770      	bx	lr

08001a4e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001a4e:	4770      	bx	lr

08001a50 <HAL_TIM_TriggerCallback>:
}
 8001a50:	4770      	bx	lr

08001a52 <HAL_TIM_IRQHandler>:
{
 8001a52:	b570      	push	{r4, r5, r6, lr}
 8001a54:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8001a56:	6803      	ldr	r3, [r0, #0]
 8001a58:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a5a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a5c:	f015 0f02 	tst.w	r5, #2
 8001a60:	d010      	beq.n	8001a84 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a62:	f016 0f02 	tst.w	r6, #2
 8001a66:	d00d      	beq.n	8001a84 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a68:	f06f 0202 	mvn.w	r2, #2
 8001a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a72:	6803      	ldr	r3, [r0, #0]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f013 0f03 	tst.w	r3, #3
 8001a7a:	d05e      	beq.n	8001b3a <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8001a7c:	f7ff ffe6 	bl	8001a4c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a80:	2300      	movs	r3, #0
 8001a82:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a84:	f015 0f04 	tst.w	r5, #4
 8001a88:	d012      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a8a:	f016 0f04 	tst.w	r6, #4
 8001a8e:	d00f      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	f06f 0204 	mvn.w	r2, #4
 8001a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001aa4:	d04f      	beq.n	8001b46 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff ffd0 	bl	8001a4c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aac:	2300      	movs	r3, #0
 8001aae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ab0:	f015 0f08 	tst.w	r5, #8
 8001ab4:	d012      	beq.n	8001adc <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ab6:	f016 0f08 	tst.w	r6, #8
 8001aba:	d00f      	beq.n	8001adc <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	f06f 0208 	mvn.w	r2, #8
 8001ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	f013 0f03 	tst.w	r3, #3
 8001ad0:	d040      	beq.n	8001b54 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f7ff ffba 	bl	8001a4c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001adc:	f015 0f10 	tst.w	r5, #16
 8001ae0:	d012      	beq.n	8001b08 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ae2:	f016 0f10 	tst.w	r6, #16
 8001ae6:	d00f      	beq.n	8001b08 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	f06f 0210 	mvn.w	r2, #16
 8001aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001af0:	2308      	movs	r3, #8
 8001af2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001afc:	d031      	beq.n	8001b62 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8001afe:	4620      	mov	r0, r4
 8001b00:	f7ff ffa4 	bl	8001a4c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b04:	2300      	movs	r3, #0
 8001b06:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b08:	f015 0f01 	tst.w	r5, #1
 8001b0c:	d002      	beq.n	8001b14 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b0e:	f016 0f01 	tst.w	r6, #1
 8001b12:	d12d      	bne.n	8001b70 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b14:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8001b18:	d002      	beq.n	8001b20 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b1a:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8001b1e:	d12f      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b20:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8001b24:	d002      	beq.n	8001b2c <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b26:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8001b2a:	d131      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b2c:	f015 0f20 	tst.w	r5, #32
 8001b30:	d002      	beq.n	8001b38 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b32:	f016 0f20 	tst.w	r6, #32
 8001b36:	d133      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x14e>
}
 8001b38:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	f7ff ff86 	bl	8001a4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f7ff ff85 	bl	8001a4e <HAL_TIM_PWM_PulseFinishedCallback>
 8001b44:	e79c      	b.n	8001a80 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff ff7f 	bl	8001a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f7ff ff7e 	bl	8001a4e <HAL_TIM_PWM_PulseFinishedCallback>
 8001b52:	e7ab      	b.n	8001aac <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7ff ff78 	bl	8001a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f7ff ff77 	bl	8001a4e <HAL_TIM_PWM_PulseFinishedCallback>
 8001b60:	e7ba      	b.n	8001ad8 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	4620      	mov	r0, r4
 8001b64:	f7ff ff71 	bl	8001a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f7ff ff70 	bl	8001a4e <HAL_TIM_PWM_PulseFinishedCallback>
 8001b6e:	e7c9      	b.n	8001b04 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	f06f 0201 	mvn.w	r2, #1
 8001b76:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f7fe fe7f 	bl	800087c <HAL_TIM_PeriodElapsedCallback>
 8001b7e:	e7c9      	b.n	8001b14 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b86:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001b88:	4620      	mov	r0, r4
 8001b8a:	f000 faae 	bl	80020ea <HAL_TIMEx_BreakCallback>
 8001b8e:	e7c7      	b.n	8001b20 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b96:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f7ff ff59 	bl	8001a50 <HAL_TIM_TriggerCallback>
 8001b9e:	e7c5      	b.n	8001b2c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	f06f 0220 	mvn.w	r2, #32
 8001ba6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f000 fa9d 	bl	80020e8 <HAL_TIMEx_CommutCallback>
}
 8001bae:	e7c3      	b.n	8001b38 <HAL_TIM_IRQHandler+0xe6>

08001bb0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001bb0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bb2:	4a29      	ldr	r2, [pc, #164]	@ (8001c58 <TIM_Base_SetConfig+0xa8>)
 8001bb4:	4290      	cmp	r0, r2
 8001bb6:	d00e      	beq.n	8001bd6 <TIM_Base_SetConfig+0x26>
 8001bb8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001bbc:	d00b      	beq.n	8001bd6 <TIM_Base_SetConfig+0x26>
 8001bbe:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001bc2:	4290      	cmp	r0, r2
 8001bc4:	d007      	beq.n	8001bd6 <TIM_Base_SetConfig+0x26>
 8001bc6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bca:	4290      	cmp	r0, r2
 8001bcc:	d003      	beq.n	8001bd6 <TIM_Base_SetConfig+0x26>
 8001bce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bd2:	4290      	cmp	r0, r2
 8001bd4:	d103      	bne.n	8001bde <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001bda:	684a      	ldr	r2, [r1, #4]
 8001bdc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bde:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <TIM_Base_SetConfig+0xa8>)
 8001be0:	4290      	cmp	r0, r2
 8001be2:	d01a      	beq.n	8001c1a <TIM_Base_SetConfig+0x6a>
 8001be4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001be8:	d017      	beq.n	8001c1a <TIM_Base_SetConfig+0x6a>
 8001bea:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001bee:	4290      	cmp	r0, r2
 8001bf0:	d013      	beq.n	8001c1a <TIM_Base_SetConfig+0x6a>
 8001bf2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bf6:	4290      	cmp	r0, r2
 8001bf8:	d00f      	beq.n	8001c1a <TIM_Base_SetConfig+0x6a>
 8001bfa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bfe:	4290      	cmp	r0, r2
 8001c00:	d00b      	beq.n	8001c1a <TIM_Base_SetConfig+0x6a>
 8001c02:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001c06:	4290      	cmp	r0, r2
 8001c08:	d007      	beq.n	8001c1a <TIM_Base_SetConfig+0x6a>
 8001c0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c0e:	4290      	cmp	r0, r2
 8001c10:	d003      	beq.n	8001c1a <TIM_Base_SetConfig+0x6a>
 8001c12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c16:	4290      	cmp	r0, r2
 8001c18:	d103      	bne.n	8001c22 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c1e:	68ca      	ldr	r2, [r1, #12]
 8001c20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c26:	694a      	ldr	r2, [r1, #20]
 8001c28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001c2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c2c:	688b      	ldr	r3, [r1, #8]
 8001c2e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001c30:	680b      	ldr	r3, [r1, #0]
 8001c32:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <TIM_Base_SetConfig+0xa8>)
 8001c36:	4298      	cmp	r0, r3
 8001c38:	d00a      	beq.n	8001c50 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c3e:	6903      	ldr	r3, [r0, #16]
 8001c40:	f013 0f01 	tst.w	r3, #1
 8001c44:	d003      	beq.n	8001c4e <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c46:	6903      	ldr	r3, [r0, #16]
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6103      	str	r3, [r0, #16]
}
 8001c4e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001c50:	690b      	ldr	r3, [r1, #16]
 8001c52:	6303      	str	r3, [r0, #48]	@ 0x30
 8001c54:	e7f1      	b.n	8001c3a <TIM_Base_SetConfig+0x8a>
 8001c56:	bf00      	nop
 8001c58:	40010000 	.word	0x40010000

08001c5c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001c5c:	b340      	cbz	r0, 8001cb0 <HAL_TIM_Base_Init+0x54>
{
 8001c5e:	b510      	push	{r4, lr}
 8001c60:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001c62:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001c66:	b1f3      	cbz	r3, 8001ca6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c6e:	4621      	mov	r1, r4
 8001c70:	f851 0b04 	ldr.w	r0, [r1], #4
 8001c74:	f7ff ff9c 	bl	8001bb0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001c82:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001c86:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001c8a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001c92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c96:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001c9a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001c9e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001ca2:	2000      	movs	r0, #0
}
 8001ca4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001ca6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001caa:	f7fe ff43 	bl	8000b34 <HAL_TIM_Base_MspInit>
 8001cae:	e7db      	b.n	8001c68 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001cb0:	2001      	movs	r0, #1
}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001cb4:	b340      	cbz	r0, 8001d08 <HAL_TIM_PWM_Init+0x54>
{
 8001cb6:	b510      	push	{r4, lr}
 8001cb8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001cba:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001cbe:	b1f3      	cbz	r3, 8001cfe <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	f851 0b04 	ldr.w	r0, [r1], #4
 8001ccc:	f7ff ff70 	bl	8001bb0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001cda:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001cde:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001ce2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001cea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001cf2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001cf6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001cfa:	2000      	movs	r0, #0
}
 8001cfc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001cfe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001d02:	f7ff fea1 	bl	8001a48 <HAL_TIM_PWM_MspInit>
 8001d06:	e7db      	b.n	8001cc0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001d08:	2001      	movs	r0, #1
}
 8001d0a:	4770      	bx	lr

08001d0c <TIM_OC2_SetConfig>:
{
 8001d0c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8001d0e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d10:	6a02      	ldr	r2, [r0, #32]
 8001d12:	f022 0210 	bic.w	r2, r2, #16
 8001d16:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001d18:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001d1a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d1c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d20:	680d      	ldr	r5, [r1, #0]
 8001d22:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001d26:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d2a:	688d      	ldr	r5, [r1, #8]
 8001d2c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d30:	4d0c      	ldr	r5, [pc, #48]	@ (8001d64 <TIM_OC2_SetConfig+0x58>)
 8001d32:	42a8      	cmp	r0, r5
 8001d34:	d006      	beq.n	8001d44 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8001d36:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001d38:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001d3a:	684a      	ldr	r2, [r1, #4]
 8001d3c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8001d3e:	6203      	str	r3, [r0, #32]
}
 8001d40:	bc30      	pop	{r4, r5}
 8001d42:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d48:	68cd      	ldr	r5, [r1, #12]
 8001d4a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d52:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d56:	694d      	ldr	r5, [r1, #20]
 8001d58:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d5c:	698d      	ldr	r5, [r1, #24]
 8001d5e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8001d62:	e7e8      	b.n	8001d36 <TIM_OC2_SetConfig+0x2a>
 8001d64:	40010000 	.word	0x40010000

08001d68 <HAL_TIM_PWM_ConfigChannel>:
{
 8001d68:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001d6a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d066      	beq.n	8001e40 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8001d72:	4604      	mov	r4, r0
 8001d74:	460d      	mov	r5, r1
 8001d76:	2301      	movs	r3, #1
 8001d78:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8001d7c:	2a0c      	cmp	r2, #12
 8001d7e:	d85a      	bhi.n	8001e36 <HAL_TIM_PWM_ConfigChannel+0xce>
 8001d80:	e8df f002 	tbb	[pc, r2]
 8001d84:	59595907 	.word	0x59595907
 8001d88:	5959591b 	.word	0x5959591b
 8001d8c:	59595930 	.word	0x59595930
 8001d90:	44          	.byte	0x44
 8001d91:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d92:	6800      	ldr	r0, [r0, #0]
 8001d94:	f7ff fd70 	bl	8001878 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d98:	6822      	ldr	r2, [r4, #0]
 8001d9a:	6993      	ldr	r3, [r2, #24]
 8001d9c:	f043 0308 	orr.w	r3, r3, #8
 8001da0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001da2:	6822      	ldr	r2, [r4, #0]
 8001da4:	6993      	ldr	r3, [r2, #24]
 8001da6:	f023 0304 	bic.w	r3, r3, #4
 8001daa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001dac:	6822      	ldr	r2, [r4, #0]
 8001dae:	6993      	ldr	r3, [r2, #24]
 8001db0:	6929      	ldr	r1, [r5, #16]
 8001db2:	430b      	orrs	r3, r1
 8001db4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001db6:	2000      	movs	r0, #0
      break;
 8001db8:	e03e      	b.n	8001e38 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dba:	6800      	ldr	r0, [r0, #0]
 8001dbc:	f7ff ffa6 	bl	8001d0c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001dc0:	6822      	ldr	r2, [r4, #0]
 8001dc2:	6993      	ldr	r3, [r2, #24]
 8001dc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dc8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001dca:	6822      	ldr	r2, [r4, #0]
 8001dcc:	6993      	ldr	r3, [r2, #24]
 8001dce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001dd2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001dd4:	6822      	ldr	r2, [r4, #0]
 8001dd6:	6993      	ldr	r3, [r2, #24]
 8001dd8:	6929      	ldr	r1, [r5, #16]
 8001dda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001dde:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2000      	movs	r0, #0
      break;
 8001de2:	e029      	b.n	8001e38 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001de4:	6800      	ldr	r0, [r0, #0]
 8001de6:	f7ff fd71 	bl	80018cc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dea:	6822      	ldr	r2, [r4, #0]
 8001dec:	69d3      	ldr	r3, [r2, #28]
 8001dee:	f043 0308 	orr.w	r3, r3, #8
 8001df2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	69d3      	ldr	r3, [r2, #28]
 8001df8:	f023 0304 	bic.w	r3, r3, #4
 8001dfc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dfe:	6822      	ldr	r2, [r4, #0]
 8001e00:	69d3      	ldr	r3, [r2, #28]
 8001e02:	6929      	ldr	r1, [r5, #16]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001e08:	2000      	movs	r0, #0
      break;
 8001e0a:	e015      	b.n	8001e38 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e0c:	6800      	ldr	r0, [r0, #0]
 8001e0e:	f7ff fd8b 	bl	8001928 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e12:	6822      	ldr	r2, [r4, #0]
 8001e14:	69d3      	ldr	r3, [r2, #28]
 8001e16:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e1a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e1c:	6822      	ldr	r2, [r4, #0]
 8001e1e:	69d3      	ldr	r3, [r2, #28]
 8001e20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e24:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e26:	6822      	ldr	r2, [r4, #0]
 8001e28:	69d3      	ldr	r3, [r2, #28]
 8001e2a:	6929      	ldr	r1, [r5, #16]
 8001e2c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e30:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001e32:	2000      	movs	r0, #0
      break;
 8001e34:	e000      	b.n	8001e38 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8001e36:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001e3e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001e40:	2002      	movs	r0, #2
 8001e42:	e7fc      	b.n	8001e3e <HAL_TIM_PWM_ConfigChannel+0xd6>

08001e44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e44:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e46:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e48:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e4c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001e50:	430a      	orrs	r2, r1
 8001e52:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e56:	6082      	str	r2, [r0, #8]
}
 8001e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001e5e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d078      	beq.n	8001f58 <HAL_TIM_ConfigClockSource+0xfa>
{
 8001e66:	b510      	push	{r4, lr}
 8001e68:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	2302      	movs	r3, #2
 8001e72:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001e76:	6802      	ldr	r2, [r0, #0]
 8001e78:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001e82:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001e84:	680b      	ldr	r3, [r1, #0]
 8001e86:	2b60      	cmp	r3, #96	@ 0x60
 8001e88:	d04c      	beq.n	8001f24 <HAL_TIM_ConfigClockSource+0xc6>
 8001e8a:	d829      	bhi.n	8001ee0 <HAL_TIM_ConfigClockSource+0x82>
 8001e8c:	2b40      	cmp	r3, #64	@ 0x40
 8001e8e:	d054      	beq.n	8001f3a <HAL_TIM_ConfigClockSource+0xdc>
 8001e90:	d90c      	bls.n	8001eac <HAL_TIM_ConfigClockSource+0x4e>
 8001e92:	2b50      	cmp	r3, #80	@ 0x50
 8001e94:	d122      	bne.n	8001edc <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e96:	68ca      	ldr	r2, [r1, #12]
 8001e98:	6849      	ldr	r1, [r1, #4]
 8001e9a:	6800      	ldr	r0, [r0, #0]
 8001e9c:	f7ff fd68 	bl	8001970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ea0:	2150      	movs	r1, #80	@ 0x50
 8001ea2:	6820      	ldr	r0, [r4, #0]
 8001ea4:	f7ff fd8b 	bl	80019be <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001ea8:	2000      	movs	r0, #0
      break;
 8001eaa:	e005      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d00d      	beq.n	8001ecc <HAL_TIM_ConfigClockSource+0x6e>
 8001eb0:	d909      	bls.n	8001ec6 <HAL_TIM_ConfigClockSource+0x68>
 8001eb2:	2b30      	cmp	r3, #48	@ 0x30
 8001eb4:	d00a      	beq.n	8001ecc <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8001eb6:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001ec4:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001ec6:	b10b      	cbz	r3, 8001ecc <HAL_TIM_ConfigClockSource+0x6e>
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d105      	bne.n	8001ed8 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6820      	ldr	r0, [r4, #0]
 8001ed0:	f7ff fd75 	bl	80019be <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001ed4:	2000      	movs	r0, #0
      break;
 8001ed6:	e7ef      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8001ed8:	2001      	movs	r0, #1
 8001eda:	e7ed      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x5a>
 8001edc:	2001      	movs	r0, #1
 8001ede:	e7eb      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ee4:	d034      	beq.n	8001f50 <HAL_TIM_ConfigClockSource+0xf2>
 8001ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eea:	d10c      	bne.n	8001f06 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8001eec:	68cb      	ldr	r3, [r1, #12]
 8001eee:	684a      	ldr	r2, [r1, #4]
 8001ef0:	6889      	ldr	r1, [r1, #8]
 8001ef2:	6800      	ldr	r0, [r0, #0]
 8001ef4:	f7ff ffa6 	bl	8001e44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ef8:	6822      	ldr	r2, [r4, #0]
 8001efa:	6893      	ldr	r3, [r2, #8]
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f00:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f02:	2000      	movs	r0, #0
      break;
 8001f04:	e7d8      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001f06:	2b70      	cmp	r3, #112	@ 0x70
 8001f08:	d124      	bne.n	8001f54 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8001f0a:	68cb      	ldr	r3, [r1, #12]
 8001f0c:	684a      	ldr	r2, [r1, #4]
 8001f0e:	6889      	ldr	r1, [r1, #8]
 8001f10:	6800      	ldr	r0, [r0, #0]
 8001f12:	f7ff ff97 	bl	8001e44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f16:	6822      	ldr	r2, [r4, #0]
 8001f18:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f1a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001f1e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f20:	2000      	movs	r0, #0
      break;
 8001f22:	e7c9      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f24:	68ca      	ldr	r2, [r1, #12]
 8001f26:	6849      	ldr	r1, [r1, #4]
 8001f28:	6800      	ldr	r0, [r0, #0]
 8001f2a:	f7ff fd34 	bl	8001996 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f2e:	2160      	movs	r1, #96	@ 0x60
 8001f30:	6820      	ldr	r0, [r4, #0]
 8001f32:	f7ff fd44 	bl	80019be <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001f36:	2000      	movs	r0, #0
      break;
 8001f38:	e7be      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f3a:	68ca      	ldr	r2, [r1, #12]
 8001f3c:	6849      	ldr	r1, [r1, #4]
 8001f3e:	6800      	ldr	r0, [r0, #0]
 8001f40:	f7ff fd16 	bl	8001970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f44:	2140      	movs	r1, #64	@ 0x40
 8001f46:	6820      	ldr	r0, [r4, #0]
 8001f48:	f7ff fd39 	bl	80019be <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001f4c:	2000      	movs	r0, #0
      break;
 8001f4e:	e7b3      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001f50:	2000      	movs	r0, #0
 8001f52:	e7b1      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8001f54:	2001      	movs	r0, #1
 8001f56:	e7af      	b.n	8001eb8 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8001f58:	2002      	movs	r0, #2
}
 8001f5a:	4770      	bx	lr

08001f5c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001f5c:	f001 011f 	and.w	r1, r1, #31
 8001f60:	f04f 0c01 	mov.w	ip, #1
 8001f64:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f68:	6a03      	ldr	r3, [r0, #32]
 8001f6a:	ea23 030c 	bic.w	r3, r3, ip
 8001f6e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001f70:	6a03      	ldr	r3, [r0, #32]
 8001f72:	408a      	lsls	r2, r1
 8001f74:	4313      	orrs	r3, r2
 8001f76:	6203      	str	r3, [r0, #32]
}
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_TIM_PWM_Start>:
{
 8001f7c:	b510      	push	{r4, lr}
 8001f7e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f80:	4608      	mov	r0, r1
 8001f82:	2900      	cmp	r1, #0
 8001f84:	d132      	bne.n	8001fec <HAL_TIM_PWM_Start+0x70>
 8001f86:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	bf18      	it	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d163      	bne.n	800205e <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d141      	bne.n	800201e <HAL_TIM_PWM_Start+0xa2>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	6820      	ldr	r0, [r4, #0]
 8001fa6:	f7ff ffd9 	bl	8001f5c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	4a2e      	ldr	r2, [pc, #184]	@ (8002068 <HAL_TIM_PWM_Start+0xec>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d045      	beq.n	800203e <HAL_TIM_PWM_Start+0xc2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8002068 <HAL_TIM_PWM_Start+0xec>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d046      	beq.n	8002048 <HAL_TIM_PWM_Start+0xcc>
 8001fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fbe:	d043      	beq.n	8002048 <HAL_TIM_PWM_Start+0xcc>
 8001fc0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d03f      	beq.n	8002048 <HAL_TIM_PWM_Start+0xcc>
 8001fc8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d03b      	beq.n	8002048 <HAL_TIM_PWM_Start+0xcc>
 8001fd0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d037      	beq.n	8002048 <HAL_TIM_PWM_Start+0xcc>
 8001fd8:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d033      	beq.n	8002048 <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001fe8:	2000      	movs	r0, #0
 8001fea:	e037      	b.n	800205c <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fec:	2904      	cmp	r1, #4
 8001fee:	d008      	beq.n	8002002 <HAL_TIM_PWM_Start+0x86>
 8001ff0:	2908      	cmp	r1, #8
 8001ff2:	d00d      	beq.n	8002010 <HAL_TIM_PWM_Start+0x94>
 8001ff4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	bf18      	it	ne
 8001ffe:	2301      	movne	r3, #1
 8002000:	e7c7      	b.n	8001f92 <HAL_TIM_PWM_Start+0x16>
 8002002:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	bf18      	it	ne
 800200c:	2301      	movne	r3, #1
 800200e:	e7c0      	b.n	8001f92 <HAL_TIM_PWM_Start+0x16>
 8002010:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	bf18      	it	ne
 800201a:	2301      	movne	r3, #1
 800201c:	e7b9      	b.n	8001f92 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800201e:	2804      	cmp	r0, #4
 8002020:	d005      	beq.n	800202e <HAL_TIM_PWM_Start+0xb2>
 8002022:	2808      	cmp	r0, #8
 8002024:	d007      	beq.n	8002036 <HAL_TIM_PWM_Start+0xba>
 8002026:	2302      	movs	r3, #2
 8002028:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800202c:	e7b8      	b.n	8001fa0 <HAL_TIM_PWM_Start+0x24>
 800202e:	2302      	movs	r3, #2
 8002030:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002034:	e7b4      	b.n	8001fa0 <HAL_TIM_PWM_Start+0x24>
 8002036:	2302      	movs	r3, #2
 8002038:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800203c:	e7b0      	b.n	8001fa0 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 800203e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002040:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002044:	645a      	str	r2, [r3, #68]	@ 0x44
 8002046:	e7b4      	b.n	8001fb2 <HAL_TIM_PWM_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204e:	2a06      	cmp	r2, #6
 8002050:	d007      	beq.n	8002062 <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	f042 0201 	orr.w	r2, r2, #1
 8002058:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800205a:	2000      	movs	r0, #0
}
 800205c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800205e:	2001      	movs	r0, #1
 8002060:	e7fc      	b.n	800205c <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 8002062:	2000      	movs	r0, #0
 8002064:	e7fa      	b.n	800205c <HAL_TIM_PWM_Start+0xe0>
 8002066:	bf00      	nop
 8002068:	40010000 	.word	0x40010000

0800206c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800206c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002070:	2a01      	cmp	r2, #1
 8002072:	d035      	beq.n	80020e0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8002074:	b410      	push	{r4}
 8002076:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002078:	2201      	movs	r2, #1
 800207a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207e:	2202      	movs	r2, #2
 8002080:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002084:	6802      	ldr	r2, [r0, #0]
 8002086:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002088:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800208a:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800208e:	6808      	ldr	r0, [r1, #0]
 8002090:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002094:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4812      	ldr	r0, [pc, #72]	@ (80020e4 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 800209a:	4282      	cmp	r2, r0
 800209c:	d012      	beq.n	80020c4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800209e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80020a2:	d00f      	beq.n	80020c4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80020a4:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80020a8:	4282      	cmp	r2, r0
 80020aa:	d00b      	beq.n	80020c4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80020ac:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80020b0:	4282      	cmp	r2, r0
 80020b2:	d007      	beq.n	80020c4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80020b4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80020b8:	4282      	cmp	r2, r0
 80020ba:	d003      	beq.n	80020c4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80020bc:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 80020c0:	4282      	cmp	r2, r0
 80020c2:	d104      	bne.n	80020ce <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020c4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020c8:	6849      	ldr	r1, [r1, #4]
 80020ca:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020cc:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020d4:	2000      	movs	r0, #0
 80020d6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80020da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020de:	4770      	bx	lr
  __HAL_LOCK(htim);
 80020e0:	2002      	movs	r0, #2
}
 80020e2:	4770      	bx	lr
 80020e4:	40010000 	.word	0x40010000

080020e8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e8:	4770      	bx	lr

080020ea <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020ea:	4770      	bx	lr

080020ec <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020ec:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ee:	f102 030c 	add.w	r3, r2, #12
 80020f2:	e853 3f00 	ldrex	r3, [r3]
 80020f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fa:	320c      	adds	r2, #12
 80020fc:	e842 3100 	strex	r1, r3, [r2]
 8002100:	2900      	cmp	r1, #0
 8002102:	d1f3      	bne.n	80020ec <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002104:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002106:	f102 0314 	add.w	r3, r2, #20
 800210a:	e853 3f00 	ldrex	r3, [r3]
 800210e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002112:	3214      	adds	r2, #20
 8002114:	e842 3100 	strex	r1, r3, [r2]
 8002118:	2900      	cmp	r1, #0
 800211a:	d1f3      	bne.n	8002104 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800211c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800211e:	2b01      	cmp	r3, #1
 8002120:	d005      	beq.n	800212e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002122:	2320      	movs	r3, #32
 8002124:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002128:	2300      	movs	r3, #0
 800212a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800212c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800212e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002130:	f102 030c 	add.w	r3, r2, #12
 8002134:	e853 3f00 	ldrex	r3, [r3]
 8002138:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800213c:	320c      	adds	r2, #12
 800213e:	e842 3100 	strex	r1, r3, [r2]
 8002142:	2900      	cmp	r1, #0
 8002144:	d1f3      	bne.n	800212e <UART_EndRxTransfer+0x42>
 8002146:	e7ec      	b.n	8002122 <UART_EndRxTransfer+0x36>

08002148 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002148:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b21      	cmp	r3, #33	@ 0x21
 8002150:	d001      	beq.n	8002156 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002152:	2002      	movs	r0, #2
  }
}
 8002154:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002156:	6883      	ldr	r3, [r0, #8]
 8002158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800215c:	d017      	beq.n	800218e <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800215e:	6a03      	ldr	r3, [r0, #32]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	6202      	str	r2, [r0, #32]
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	6803      	ldr	r3, [r0, #0]
 8002168:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800216a:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b29b      	uxth	r3, r3
 8002172:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8002174:	b94b      	cbnz	r3, 800218a <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002176:	6802      	ldr	r2, [r0, #0]
 8002178:	68d3      	ldr	r3, [r2, #12]
 800217a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800217e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002180:	6802      	ldr	r2, [r0, #0]
 8002182:	68d3      	ldr	r3, [r2, #12]
 8002184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002188:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800218a:	2000      	movs	r0, #0
 800218c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800218e:	6903      	ldr	r3, [r0, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1e4      	bne.n	800215e <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002194:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	6802      	ldr	r2, [r0, #0]
 800219a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800219e:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80021a0:	6a03      	ldr	r3, [r0, #32]
 80021a2:	3302      	adds	r3, #2
 80021a4:	6203      	str	r3, [r0, #32]
 80021a6:	e7e0      	b.n	800216a <UART_Transmit_IT+0x22>

080021a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021a8:	b510      	push	{r4, lr}
 80021aa:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ac:	6802      	ldr	r2, [r0, #0]
 80021ae:	6913      	ldr	r3, [r2, #16]
 80021b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021b4:	68c1      	ldr	r1, [r0, #12]
 80021b6:	430b      	orrs	r3, r1
 80021b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021ba:	6883      	ldr	r3, [r0, #8]
 80021bc:	6902      	ldr	r2, [r0, #16]
 80021be:	431a      	orrs	r2, r3
 80021c0:	6943      	ldr	r3, [r0, #20]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	69c3      	ldr	r3, [r0, #28]
 80021c6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80021c8:	6801      	ldr	r1, [r0, #0]
 80021ca:	68cb      	ldr	r3, [r1, #12]
 80021cc:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80021d0:	f023 030c 	bic.w	r3, r3, #12
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021d8:	6802      	ldr	r2, [r0, #0]
 80021da:	6953      	ldr	r3, [r2, #20]
 80021dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021e0:	6981      	ldr	r1, [r0, #24]
 80021e2:	430b      	orrs	r3, r1
 80021e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021e6:	6803      	ldr	r3, [r0, #0]
 80021e8:	4a31      	ldr	r2, [pc, #196]	@ (80022b0 <UART_SetConfig+0x108>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d006      	beq.n	80021fc <UART_SetConfig+0x54>
 80021ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d002      	beq.n	80021fc <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021f6:	f7ff fb01 	bl	80017fc <HAL_RCC_GetPCLK1Freq>
 80021fa:	e001      	b.n	8002200 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80021fc:	f7ff fb0e 	bl	800181c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002200:	69e3      	ldr	r3, [r4, #28]
 8002202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002206:	d029      	beq.n	800225c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002208:	2100      	movs	r1, #0
 800220a:	1803      	adds	r3, r0, r0
 800220c:	4149      	adcs	r1, r1
 800220e:	181b      	adds	r3, r3, r0
 8002210:	f141 0100 	adc.w	r1, r1, #0
 8002214:	00c9      	lsls	r1, r1, #3
 8002216:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	1818      	adds	r0, r3, r0
 800221e:	6863      	ldr	r3, [r4, #4]
 8002220:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002224:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002228:	f141 0100 	adc.w	r1, r1, #0
 800222c:	f7fd ffd8 	bl	80001e0 <__aeabi_uldivmod>
 8002230:	4a20      	ldr	r2, [pc, #128]	@ (80022b4 <UART_SetConfig+0x10c>)
 8002232:	fba2 3100 	umull	r3, r1, r2, r0
 8002236:	0949      	lsrs	r1, r1, #5
 8002238:	2364      	movs	r3, #100	@ 0x64
 800223a:	fb03 0311 	mls	r3, r3, r1, r0
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	3332      	adds	r3, #50	@ 0x32
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800224c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	6821      	ldr	r1, [r4, #0]
 8002256:	4413      	add	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }
}
 800225a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800225c:	2300      	movs	r3, #0
 800225e:	1802      	adds	r2, r0, r0
 8002260:	eb43 0103 	adc.w	r1, r3, r3
 8002264:	1812      	adds	r2, r2, r0
 8002266:	f141 0100 	adc.w	r1, r1, #0
 800226a:	00c9      	lsls	r1, r1, #3
 800226c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002270:	00d2      	lsls	r2, r2, #3
 8002272:	1810      	adds	r0, r2, r0
 8002274:	f141 0100 	adc.w	r1, r1, #0
 8002278:	6862      	ldr	r2, [r4, #4]
 800227a:	1892      	adds	r2, r2, r2
 800227c:	415b      	adcs	r3, r3
 800227e:	f7fd ffaf 	bl	80001e0 <__aeabi_uldivmod>
 8002282:	4a0c      	ldr	r2, [pc, #48]	@ (80022b4 <UART_SetConfig+0x10c>)
 8002284:	fba2 3100 	umull	r3, r1, r2, r0
 8002288:	0949      	lsrs	r1, r1, #5
 800228a:	2364      	movs	r3, #100	@ 0x64
 800228c:	fb03 0311 	mls	r3, r3, r1, r0
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	3332      	adds	r3, #50	@ 0x32
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	005a      	lsls	r2, r3, #1
 800229c:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80022a0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	6821      	ldr	r1, [r4, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
 80022ae:	e7d4      	b.n	800225a <UART_SetConfig+0xb2>
 80022b0:	40011000 	.word	0x40011000
 80022b4:	51eb851f 	.word	0x51eb851f

080022b8 <UART_WaitOnFlagUntilTimeout>:
{
 80022b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022bc:	b083      	sub	sp, #12
 80022be:	4605      	mov	r5, r0
 80022c0:	460e      	mov	r6, r1
 80022c2:	4617      	mov	r7, r2
 80022c4:	4699      	mov	r9, r3
 80022c6:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ca:	682b      	ldr	r3, [r5, #0]
 80022cc:	681c      	ldr	r4, [r3, #0]
 80022ce:	ea36 0404 	bics.w	r4, r6, r4
 80022d2:	bf0c      	ite	eq
 80022d4:	2401      	moveq	r4, #1
 80022d6:	2400      	movne	r4, #0
 80022d8:	42bc      	cmp	r4, r7
 80022da:	d128      	bne.n	800232e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80022dc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80022e0:	d0f3      	beq.n	80022ca <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e2:	f7fe fdb5 	bl	8000e50 <HAL_GetTick>
 80022e6:	eba0 0009 	sub.w	r0, r0, r9
 80022ea:	4540      	cmp	r0, r8
 80022ec:	d823      	bhi.n	8002336 <UART_WaitOnFlagUntilTimeout+0x7e>
 80022ee:	f1b8 0f00 	cmp.w	r8, #0
 80022f2:	d022      	beq.n	800233a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	f012 0f04 	tst.w	r2, #4
 80022fc:	d0e5      	beq.n	80022ca <UART_WaitOnFlagUntilTimeout+0x12>
 80022fe:	2e80      	cmp	r6, #128	@ 0x80
 8002300:	d0e3      	beq.n	80022ca <UART_WaitOnFlagUntilTimeout+0x12>
 8002302:	2e40      	cmp	r6, #64	@ 0x40
 8002304:	d0e1      	beq.n	80022ca <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	f012 0f08 	tst.w	r2, #8
 800230c:	d0dd      	beq.n	80022ca <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800230e:	2400      	movs	r4, #0
 8002310:	9401      	str	r4, [sp, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	9201      	str	r2, [sp, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800231c:	4628      	mov	r0, r5
 800231e:	f7ff fee5 	bl	80020ec <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002322:	2308      	movs	r3, #8
 8002324:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002326:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800232a:	2001      	movs	r0, #1
 800232c:	e000      	b.n	8002330 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800232e:	2000      	movs	r0, #0
}
 8002330:	b003      	add	sp, #12
 8002332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002336:	2003      	movs	r0, #3
 8002338:	e7fa      	b.n	8002330 <UART_WaitOnFlagUntilTimeout+0x78>
 800233a:	2003      	movs	r0, #3
 800233c:	e7f8      	b.n	8002330 <UART_WaitOnFlagUntilTimeout+0x78>

0800233e <HAL_UART_Init>:
  if (huart == NULL)
 800233e:	b360      	cbz	r0, 800239a <HAL_UART_Init+0x5c>
{
 8002340:	b510      	push	{r4, lr}
 8002342:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002344:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002348:	b313      	cbz	r3, 8002390 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800234a:	2324      	movs	r3, #36	@ 0x24
 800234c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002350:	6822      	ldr	r2, [r4, #0]
 8002352:	68d3      	ldr	r3, [r2, #12]
 8002354:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002358:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800235a:	4620      	mov	r0, r4
 800235c:	f7ff ff24 	bl	80021a8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002360:	6822      	ldr	r2, [r4, #0]
 8002362:	6913      	ldr	r3, [r2, #16]
 8002364:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002368:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800236a:	6822      	ldr	r2, [r4, #0]
 800236c:	6953      	ldr	r3, [r2, #20]
 800236e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002372:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002374:	6822      	ldr	r2, [r4, #0]
 8002376:	68d3      	ldr	r3, [r2, #12]
 8002378:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800237c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237e:	2000      	movs	r0, #0
 8002380:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002382:	2320      	movs	r3, #32
 8002384:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800238c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800238e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002390:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002394:	f7fe fccc 	bl	8000d30 <HAL_UART_MspInit>
 8002398:	e7d7      	b.n	800234a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800239a:	2001      	movs	r0, #1
}
 800239c:	4770      	bx	lr

0800239e <HAL_UART_Receive>:
{
 800239e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80023a6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d159      	bne.n	8002464 <HAL_UART_Receive+0xc6>
 80023b0:	4604      	mov	r4, r0
 80023b2:	460d      	mov	r5, r1
 80023b4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80023b6:	2900      	cmp	r1, #0
 80023b8:	d058      	beq.n	800246c <HAL_UART_Receive+0xce>
 80023ba:	b90a      	cbnz	r2, 80023c0 <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 80023bc:	2001      	movs	r0, #1
 80023be:	e052      	b.n	8002466 <HAL_UART_Receive+0xc8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023c4:	2222      	movs	r2, #34	@ 0x22
 80023c6:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ca:	6303      	str	r3, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 80023cc:	f7fe fd40 	bl	8000e50 <HAL_GetTick>
 80023d0:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 80023d2:	f8a4 802c 	strh.w	r8, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80023d6:	f8a4 802e 	strh.w	r8, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023da:	68a3      	ldr	r3, [r4, #8]
 80023dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023e0:	d002      	beq.n	80023e8 <HAL_UART_Receive+0x4a>
      pdata16bits = NULL;
 80023e2:	f04f 0800 	mov.w	r8, #0
 80023e6:	e01c      	b.n	8002422 <HAL_UART_Receive+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e8:	6923      	ldr	r3, [r4, #16]
 80023ea:	b113      	cbz	r3, 80023f2 <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 80023ec:	f04f 0800 	mov.w	r8, #0
 80023f0:	e017      	b.n	8002422 <HAL_UART_Receive+0x84>
      pdata16bits = (uint16_t *) pData;
 80023f2:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80023f4:	2500      	movs	r5, #0
 80023f6:	e014      	b.n	8002422 <HAL_UART_Receive+0x84>
        huart->RxState = HAL_UART_STATE_READY;
 80023f8:	2320      	movs	r3, #32
 80023fa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        return HAL_TIMEOUT;
 80023fe:	2003      	movs	r0, #3
 8002400:	e031      	b.n	8002466 <HAL_UART_Receive+0xc8>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800240a:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 800240e:	e003      	b.n	8002418 <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8002416:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8002418:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 800241a:	b292      	uxth	r2, r2
 800241c:	3a01      	subs	r2, #1
 800241e:	b292      	uxth	r2, r2
 8002420:	85e2      	strh	r2, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002422:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002424:	b29b      	uxth	r3, r3
 8002426:	b1c3      	cbz	r3, 800245a <HAL_UART_Receive+0xbc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002428:	9600      	str	r6, [sp, #0]
 800242a:	463b      	mov	r3, r7
 800242c:	2200      	movs	r2, #0
 800242e:	2120      	movs	r1, #32
 8002430:	4620      	mov	r0, r4
 8002432:	f7ff ff41 	bl	80022b8 <UART_WaitOnFlagUntilTimeout>
 8002436:	2800      	cmp	r0, #0
 8002438:	d1de      	bne.n	80023f8 <HAL_UART_Receive+0x5a>
      if (pdata8bits == NULL)
 800243a:	2d00      	cmp	r5, #0
 800243c:	d0e1      	beq.n	8002402 <HAL_UART_Receive+0x64>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800243e:	68a3      	ldr	r3, [r4, #8]
 8002440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002444:	d0e4      	beq.n	8002410 <HAL_UART_Receive+0x72>
 8002446:	b913      	cbnz	r3, 800244e <HAL_UART_Receive+0xb0>
 8002448:	6923      	ldr	r3, [r4, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0e0      	beq.n	8002410 <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002456:	702b      	strb	r3, [r5, #0]
 8002458:	e7dd      	b.n	8002416 <HAL_UART_Receive+0x78>
    huart->RxState = HAL_UART_STATE_READY;
 800245a:	2320      	movs	r3, #32
 800245c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 8002460:	2000      	movs	r0, #0
 8002462:	e000      	b.n	8002466 <HAL_UART_Receive+0xc8>
    return HAL_BUSY;
 8002464:	2002      	movs	r0, #2
}
 8002466:	b002      	add	sp, #8
 8002468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800246c:	2001      	movs	r0, #1
 800246e:	e7fa      	b.n	8002466 <HAL_UART_Receive+0xc8>

08002470 <HAL_UART_TxCpltCallback>:
}
 8002470:	4770      	bx	lr

08002472 <UART_EndTransmit_IT>:
{
 8002472:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002474:	6801      	ldr	r1, [r0, #0]
 8002476:	68ca      	ldr	r2, [r1, #12]
 8002478:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800247c:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800247e:	2220      	movs	r2, #32
 8002480:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8002484:	f7ff fff4 	bl	8002470 <HAL_UART_TxCpltCallback>
}
 8002488:	2000      	movs	r0, #0
 800248a:	bd08      	pop	{r3, pc}

0800248c <HAL_UART_RxCpltCallback>:
}
 800248c:	4770      	bx	lr

0800248e <HAL_UART_ErrorCallback>:
}
 800248e:	4770      	bx	lr

08002490 <UART_DMAAbortOnError>:
{
 8002490:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002492:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8002494:	2300      	movs	r3, #0
 8002496:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002498:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800249a:	f7ff fff8 	bl	800248e <HAL_UART_ErrorCallback>
}
 800249e:	bd08      	pop	{r3, pc}

080024a0 <HAL_UARTEx_RxEventCallback>:
}
 80024a0:	4770      	bx	lr

080024a2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024a2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b22      	cmp	r3, #34	@ 0x22
 80024aa:	d169      	bne.n	8002580 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ac:	6883      	ldr	r3, [r0, #8]
 80024ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024b2:	d04f      	beq.n	8002554 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80024b4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024ba:	d004      	beq.n	80024c6 <UART_Receive_IT+0x24>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d156      	bne.n	800256e <UART_Receive_IT+0xcc>
 80024c0:	6903      	ldr	r3, [r0, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d153      	bne.n	800256e <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024c6:	6803      	ldr	r3, [r0, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80024cc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80024ce:	3301      	adds	r3, #1
 80024d0:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80024d2:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29b      	uxth	r3, r3
 80024da:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d151      	bne.n	8002584 <UART_Receive_IT+0xe2>
{
 80024e0:	b500      	push	{lr}
 80024e2:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024e4:	6802      	ldr	r2, [r0, #0]
 80024e6:	68d3      	ldr	r3, [r2, #12]
 80024e8:	f023 0320 	bic.w	r3, r3, #32
 80024ec:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024ee:	6802      	ldr	r2, [r0, #0]
 80024f0:	68d3      	ldr	r3, [r2, #12]
 80024f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024f6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024f8:	6802      	ldr	r2, [r0, #0]
 80024fa:	6953      	ldr	r3, [r2, #20]
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002502:	2320      	movs	r3, #32
 8002504:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002508:	2300      	movs	r3, #0
 800250a:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800250c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800250e:	2b01      	cmp	r3, #1
 8002510:	d133      	bne.n	800257a <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002512:	2300      	movs	r3, #0
 8002514:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002516:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002518:	f102 030c 	add.w	r3, r2, #12
 800251c:	e853 3f00 	ldrex	r3, [r3]
 8002520:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002524:	320c      	adds	r2, #12
 8002526:	e842 3100 	strex	r1, r3, [r2]
 800252a:	2900      	cmp	r1, #0
 800252c:	d1f3      	bne.n	8002516 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800252e:	6803      	ldr	r3, [r0, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	f012 0f10 	tst.w	r2, #16
 8002536:	d006      	beq.n	8002546 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002538:	2200      	movs	r2, #0
 800253a:	9201      	str	r2, [sp, #4]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	9201      	str	r2, [sp, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002546:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8002548:	f7ff ffaa 	bl	80024a0 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800254c:	2000      	movs	r0, #0
}
 800254e:	b003      	add	sp, #12
 8002550:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002554:	6902      	ldr	r2, [r0, #16]
 8002556:	2a00      	cmp	r2, #0
 8002558:	d1ac      	bne.n	80024b4 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800255a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800255c:	6803      	ldr	r3, [r0, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002564:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002566:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002568:	3302      	adds	r3, #2
 800256a:	6283      	str	r3, [r0, #40]	@ 0x28
 800256c:	e7b1      	b.n	80024d2 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800256e:	6803      	ldr	r3, [r0, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002576:	7013      	strb	r3, [r2, #0]
 8002578:	e7a8      	b.n	80024cc <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 800257a:	f7ff ff87 	bl	800248c <HAL_UART_RxCpltCallback>
 800257e:	e7e5      	b.n	800254c <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8002580:	2002      	movs	r0, #2
 8002582:	4770      	bx	lr
    return HAL_OK;
 8002584:	2000      	movs	r0, #0
}
 8002586:	4770      	bx	lr

08002588 <HAL_UART_IRQHandler>:
{
 8002588:	b510      	push	{r4, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800258e:	6802      	ldr	r2, [r0, #0]
 8002590:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002592:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002594:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8002596:	f013 0f0f 	tst.w	r3, #15
 800259a:	d109      	bne.n	80025b0 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800259c:	f013 0f20 	tst.w	r3, #32
 80025a0:	d00c      	beq.n	80025bc <HAL_UART_IRQHandler+0x34>
 80025a2:	f010 0f20 	tst.w	r0, #32
 80025a6:	d009      	beq.n	80025bc <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7ff ff7a 	bl	80024a2 <UART_Receive_IT>
      return;
 80025ae:	e016      	b.n	80025de <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025b0:	f011 0101 	ands.w	r1, r1, #1
 80025b4:	d115      	bne.n	80025e2 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025b6:	f410 7f90 	tst.w	r0, #288	@ 0x120
 80025ba:	d112      	bne.n	80025e2 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80025be:	2901      	cmp	r1, #1
 80025c0:	d079      	beq.n	80026b6 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80025c6:	d003      	beq.n	80025d0 <HAL_UART_IRQHandler+0x48>
 80025c8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80025cc:	f040 8114 	bne.w	80027f8 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025d0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80025d4:	d003      	beq.n	80025de <HAL_UART_IRQHandler+0x56>
 80025d6:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80025da:	f040 8111 	bne.w	8002800 <HAL_UART_IRQHandler+0x278>
}
 80025de:	b002      	add	sp, #8
 80025e0:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025e2:	f013 0f01 	tst.w	r3, #1
 80025e6:	d006      	beq.n	80025f6 <HAL_UART_IRQHandler+0x6e>
 80025e8:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80025ec:	d003      	beq.n	80025f6 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025ee:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80025f0:	f042 0201 	orr.w	r2, r2, #1
 80025f4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025f6:	f013 0f04 	tst.w	r3, #4
 80025fa:	d004      	beq.n	8002606 <HAL_UART_IRQHandler+0x7e>
 80025fc:	b119      	cbz	r1, 8002606 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025fe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002600:	f042 0202 	orr.w	r2, r2, #2
 8002604:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002606:	f013 0f02 	tst.w	r3, #2
 800260a:	d004      	beq.n	8002616 <HAL_UART_IRQHandler+0x8e>
 800260c:	b119      	cbz	r1, 8002616 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800260e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002610:	f042 0204 	orr.w	r2, r2, #4
 8002614:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002616:	f013 0f08 	tst.w	r3, #8
 800261a:	d007      	beq.n	800262c <HAL_UART_IRQHandler+0xa4>
 800261c:	f010 0f20 	tst.w	r0, #32
 8002620:	d100      	bne.n	8002624 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002622:	b119      	cbz	r1, 800262c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002624:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002626:	f042 0208 	orr.w	r2, r2, #8
 800262a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800262c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800262e:	2a00      	cmp	r2, #0
 8002630:	d0d5      	beq.n	80025de <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002632:	f013 0f20 	tst.w	r3, #32
 8002636:	d002      	beq.n	800263e <HAL_UART_IRQHandler+0xb6>
 8002638:	f010 0f20 	tst.w	r0, #32
 800263c:	d129      	bne.n	8002692 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002646:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002648:	f012 0f08 	tst.w	r2, #8
 800264c:	d100      	bne.n	8002650 <HAL_UART_IRQHandler+0xc8>
 800264e:	b363      	cbz	r3, 80026aa <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8002650:	4620      	mov	r0, r4
 8002652:	f7ff fd4b 	bl	80020ec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800265e:	d020      	beq.n	80026a2 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002660:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002662:	f102 0314 	add.w	r3, r2, #20
 8002666:	e853 3f00 	ldrex	r3, [r3]
 800266a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266e:	3214      	adds	r2, #20
 8002670:	e842 3100 	strex	r1, r3, [r2]
 8002674:	2900      	cmp	r1, #0
 8002676:	d1f3      	bne.n	8002660 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8002678:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800267a:	b173      	cbz	r3, 800269a <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800267c:	4a62      	ldr	r2, [pc, #392]	@ (8002808 <HAL_UART_IRQHandler+0x280>)
 800267e:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002680:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002682:	f7fe fc9d 	bl	8000fc0 <HAL_DMA_Abort_IT>
 8002686:	2800      	cmp	r0, #0
 8002688:	d0a9      	beq.n	80025de <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800268a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800268c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800268e:	4798      	blx	r3
 8002690:	e7a5      	b.n	80025de <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8002692:	4620      	mov	r0, r4
 8002694:	f7ff ff05 	bl	80024a2 <UART_Receive_IT>
 8002698:	e7d1      	b.n	800263e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 800269a:	4620      	mov	r0, r4
 800269c:	f7ff fef7 	bl	800248e <HAL_UART_ErrorCallback>
 80026a0:	e79d      	b.n	80025de <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80026a2:	4620      	mov	r0, r4
 80026a4:	f7ff fef3 	bl	800248e <HAL_UART_ErrorCallback>
 80026a8:	e799      	b.n	80025de <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 80026aa:	4620      	mov	r0, r4
 80026ac:	f7ff feef 	bl	800248e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 80026b4:	e793      	b.n	80025de <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026b6:	f013 0f10 	tst.w	r3, #16
 80026ba:	d082      	beq.n	80025c2 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80026bc:	f010 0f10 	tst.w	r0, #16
 80026c0:	f43f af7f 	beq.w	80025c2 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026c4:	2300      	movs	r3, #0
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	6813      	ldr	r3, [r2, #0]
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	6853      	ldr	r3, [r2, #4]
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d2:	6953      	ldr	r3, [r2, #20]
 80026d4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80026d8:	d052      	beq.n	8002780 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026da:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80026dc:	6813      	ldr	r3, [r2, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f43f af7b 	beq.w	80025de <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026e8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80026ea:	4299      	cmp	r1, r3
 80026ec:	f67f af77 	bls.w	80025de <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 80026f0:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026f2:	69d3      	ldr	r3, [r2, #28]
 80026f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026f8:	d037      	beq.n	800276a <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fc:	f102 030c 	add.w	r3, r2, #12
 8002700:	e853 3f00 	ldrex	r3, [r3]
 8002704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002708:	320c      	adds	r2, #12
 800270a:	e842 3100 	strex	r1, r3, [r2]
 800270e:	2900      	cmp	r1, #0
 8002710:	d1f3      	bne.n	80026fa <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002712:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002714:	f102 0314 	add.w	r3, r2, #20
 8002718:	e853 3f00 	ldrex	r3, [r3]
 800271c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002720:	3214      	adds	r2, #20
 8002722:	e842 3100 	strex	r1, r3, [r2]
 8002726:	2900      	cmp	r1, #0
 8002728:	d1f3      	bne.n	8002712 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800272a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272c:	f102 0314 	add.w	r3, r2, #20
 8002730:	e853 3f00 	ldrex	r3, [r3]
 8002734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002738:	3214      	adds	r2, #20
 800273a:	e842 3100 	strex	r1, r3, [r2]
 800273e:	2900      	cmp	r1, #0
 8002740:	d1f3      	bne.n	800272a <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8002742:	2320      	movs	r3, #32
 8002744:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002748:	2300      	movs	r3, #0
 800274a:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800274c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	f102 030c 	add.w	r3, r2, #12
 8002752:	e853 3f00 	ldrex	r3, [r3]
 8002756:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275a:	320c      	adds	r2, #12
 800275c:	e842 3100 	strex	r1, r3, [r2]
 8002760:	2900      	cmp	r1, #0
 8002762:	d1f3      	bne.n	800274c <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002764:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002766:	f7fe fbe1 	bl	8000f2c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800276a:	2302      	movs	r3, #2
 800276c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800276e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002770:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002772:	b29b      	uxth	r3, r3
 8002774:	1ac9      	subs	r1, r1, r3
 8002776:	b289      	uxth	r1, r1
 8002778:	4620      	mov	r0, r4
 800277a:	f7ff fe91 	bl	80024a0 <HAL_UARTEx_RxEventCallback>
      return;
 800277e:	e72e      	b.n	80025de <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002780:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002782:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002784:	b29b      	uxth	r3, r3
 8002786:	1ac9      	subs	r1, r1, r3
 8002788:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800278a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	f43f af25 	beq.w	80025de <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8002794:	2900      	cmp	r1, #0
 8002796:	f43f af22 	beq.w	80025de <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800279a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279c:	f102 030c 	add.w	r3, r2, #12
 80027a0:	e853 3f00 	ldrex	r3, [r3]
 80027a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a8:	320c      	adds	r2, #12
 80027aa:	e842 3000 	strex	r0, r3, [r2]
 80027ae:	2800      	cmp	r0, #0
 80027b0:	d1f3      	bne.n	800279a <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b4:	f102 0314 	add.w	r3, r2, #20
 80027b8:	e853 3f00 	ldrex	r3, [r3]
 80027bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c0:	3214      	adds	r2, #20
 80027c2:	e842 3000 	strex	r0, r3, [r2]
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d1f3      	bne.n	80027b2 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 80027ca:	2320      	movs	r3, #32
 80027cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d0:	2300      	movs	r3, #0
 80027d2:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d6:	f102 030c 	add.w	r3, r2, #12
 80027da:	e853 3f00 	ldrex	r3, [r3]
 80027de:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e2:	320c      	adds	r2, #12
 80027e4:	e842 3000 	strex	r0, r3, [r2]
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d1f3      	bne.n	80027d4 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027ec:	2302      	movs	r3, #2
 80027ee:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff fe55 	bl	80024a0 <HAL_UARTEx_RxEventCallback>
      return;
 80027f6:	e6f2      	b.n	80025de <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7ff fca5 	bl	8002148 <UART_Transmit_IT>
    return;
 80027fe:	e6ee      	b.n	80025de <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8002800:	4620      	mov	r0, r4
 8002802:	f7ff fe36 	bl	8002472 <UART_EndTransmit_IT>
    return;
 8002806:	e6ea      	b.n	80025de <HAL_UART_IRQHandler+0x56>
 8002808:	08002491 	.word	0x08002491

0800280c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800280c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800280e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002812:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002814:	f001 f90c 	bl	8003a30 <xTaskGetSchedulerState>
 8002818:	2801      	cmp	r0, #1
 800281a:	d100      	bne.n	800281e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800281c:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800281e:	f001 fc61 	bl	80040e4 <xPortSysTickHandler>
}
 8002822:	e7fb      	b.n	800281c <SysTick_Handler+0x10>

08002824 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002824:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8002828:	b92b      	cbnz	r3, 8002836 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <osKernelInitialize+0x20>)
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	b928      	cbnz	r0, 800283c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002834:	4770      	bx	lr
    stat = osErrorISR;
 8002836:	f06f 0005 	mvn.w	r0, #5
 800283a:	4770      	bx	lr
    } else {
      stat = osError;
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000914 	.word	0x20000914

08002848 <osKernelStart>:
 8002848:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800284c:	b973      	cbnz	r3, 800286c <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800284e:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <osKernelStart+0x30>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d10d      	bne.n	8002872 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8002856:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	2400      	movs	r4, #0
 800285a:	4b08      	ldr	r3, [pc, #32]	@ (800287c <osKernelStart+0x34>)
 800285c:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800285e:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <osKernelStart+0x30>)
 8002860:	2202      	movs	r2, #2
 8002862:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002864:	f000 fe32 	bl	80034cc <vTaskStartScheduler>
      stat = osOK;
 8002868:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800286a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800286c:	f06f 0005 	mvn.w	r0, #5
 8002870:	4770      	bx	lr
      stat = osError;
 8002872:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002876:	4770      	bx	lr
 8002878:	20000914 	.word	0x20000914
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002882:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002884:	2400      	movs	r4, #0
 8002886:	9405      	str	r4, [sp, #20]
 8002888:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800288c:	bb74      	cbnz	r4, 80028ec <osThreadNew+0x6c>
 800288e:	b368      	cbz	r0, 80028ec <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8002890:	b322      	cbz	r2, 80028dc <osThreadNew+0x5c>
      if (attr->name != NULL) {
 8002892:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8002894:	6993      	ldr	r3, [r2, #24]
 8002896:	b903      	cbnz	r3, 800289a <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8002898:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800289a:	1e5c      	subs	r4, r3, #1
 800289c:	2c37      	cmp	r4, #55	@ 0x37
 800289e:	d849      	bhi.n	8002934 <osThreadNew+0xb4>
 80028a0:	6854      	ldr	r4, [r2, #4]
 80028a2:	f014 0f01 	tst.w	r4, #1
 80028a6:	d147      	bne.n	8002938 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80028a8:	6956      	ldr	r6, [r2, #20]
 80028aa:	b16e      	cbz	r6, 80028c8 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80028ac:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028b0:	6894      	ldr	r4, [r2, #8]
 80028b2:	b12c      	cbz	r4, 80028c0 <osThreadNew+0x40>
 80028b4:	68d7      	ldr	r7, [r2, #12]
 80028b6:	2fa7      	cmp	r7, #167	@ 0xa7
 80028b8:	d902      	bls.n	80028c0 <osThreadNew+0x40>
 80028ba:	6917      	ldr	r7, [r2, #16]
 80028bc:	b107      	cbz	r7, 80028c0 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028be:	b9c6      	cbnz	r6, 80028f2 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80028c0:	b12c      	cbz	r4, 80028ce <osThreadNew+0x4e>
    mem  = -1;
 80028c2:	f04f 34ff 	mov.w	r4, #4294967295
 80028c6:	e00e      	b.n	80028e6 <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 80028c8:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 80028cc:	e7f0      	b.n	80028b0 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80028ce:	68d4      	ldr	r4, [r2, #12]
 80028d0:	b98c      	cbnz	r4, 80028f6 <osThreadNew+0x76>
 80028d2:	6914      	ldr	r4, [r2, #16]
 80028d4:	b194      	cbz	r4, 80028fc <osThreadNew+0x7c>
    mem  = -1;
 80028d6:	f04f 34ff 	mov.w	r4, #4294967295
 80028da:	e004      	b.n	80028e6 <osThreadNew+0x66>
    name = NULL;
 80028dc:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80028de:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80028e0:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 80028e2:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 80028e6:	2c01      	cmp	r4, #1
 80028e8:	d00a      	beq.n	8002900 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80028ea:	b1ac      	cbz	r4, 8002918 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028ec:	9805      	ldr	r0, [sp, #20]
}
 80028ee:	b007      	add	sp, #28
 80028f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 80028f2:	2401      	movs	r4, #1
 80028f4:	e7f7      	b.n	80028e6 <osThreadNew+0x66>
    mem  = -1;
 80028f6:	f04f 34ff 	mov.w	r4, #4294967295
 80028fa:	e7f4      	b.n	80028e6 <osThreadNew+0x66>
          mem = 0;
 80028fc:	2400      	movs	r4, #0
 80028fe:	e7f2      	b.n	80028e6 <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002900:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002902:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002904:	9202      	str	r2, [sp, #8]
 8002906:	9401      	str	r4, [sp, #4]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	460b      	mov	r3, r1
 800290c:	4662      	mov	r2, ip
 800290e:	4629      	mov	r1, r5
 8002910:	f000 fd6e 	bl	80033f0 <xTaskCreateStatic>
 8002914:	9005      	str	r0, [sp, #20]
 8002916:	e7e9      	b.n	80028ec <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002918:	aa05      	add	r2, sp, #20
 800291a:	9201      	str	r2, [sp, #4]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	460b      	mov	r3, r1
 8002920:	fa1f f28c 	uxth.w	r2, ip
 8002924:	4629      	mov	r1, r5
 8002926:	f000 fd9e 	bl	8003466 <xTaskCreate>
 800292a:	2801      	cmp	r0, #1
 800292c:	d0de      	beq.n	80028ec <osThreadNew+0x6c>
            hTask = NULL;
 800292e:	2300      	movs	r3, #0
 8002930:	9305      	str	r3, [sp, #20]
 8002932:	e7db      	b.n	80028ec <osThreadNew+0x6c>
        return (NULL);
 8002934:	2000      	movs	r0, #0
 8002936:	e7da      	b.n	80028ee <osThreadNew+0x6e>
 8002938:	2000      	movs	r0, #0
 800293a:	e7d8      	b.n	80028ee <osThreadNew+0x6e>

0800293c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800293c:	b508      	push	{r3, lr}
 800293e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8002942:	b933      	cbnz	r3, 8002952 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8002944:	b908      	cbnz	r0, 800294a <osDelay+0xe>
    stat = osOK;
 8002946:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8002948:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800294a:	f000 ff2b 	bl	80037a4 <vTaskDelay>
    stat = osOK;
 800294e:	2000      	movs	r0, #0
 8002950:	e7fa      	b.n	8002948 <osDelay+0xc>
    stat = osErrorISR;
 8002952:	f06f 0005 	mvn.w	r0, #5
 8002956:	e7f7      	b.n	8002948 <osDelay+0xc>

08002958 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002958:	4b03      	ldr	r3, [pc, #12]	@ (8002968 <vApplicationGetIdleTaskMemory+0x10>)
 800295a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800295c:	4b03      	ldr	r3, [pc, #12]	@ (800296c <vApplicationGetIdleTaskMemory+0x14>)
 800295e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	6013      	str	r3, [r2, #0]
}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	2000086c 	.word	0x2000086c
 800296c:	2000066c 	.word	0x2000066c

08002970 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002970:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <vApplicationGetTimerTaskMemory+0x10>)
 8002972:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002974:	4b03      	ldr	r3, [pc, #12]	@ (8002984 <vApplicationGetTimerTaskMemory+0x14>)
 8002976:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002978:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800297c:	6013      	str	r3, [r2, #0]
}
 800297e:	4770      	bx	lr
 8002980:	200005c4 	.word	0x200005c4
 8002984:	200001c4 	.word	0x200001c4

08002988 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002988:	f100 0308 	add.w	r3, r0, #8
 800298c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800298e:	f04f 32ff 	mov.w	r2, #4294967295
 8002992:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002994:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002996:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800299c:	4770      	bx	lr

0800299e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029a2:	4770      	bx	lr

080029a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80029a4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029a6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029ac:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029ae:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029b0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80029b2:	6803      	ldr	r3, [r0, #0]
 80029b4:	3301      	adds	r3, #1
 80029b6:	6003      	str	r3, [r0, #0]
}
 80029b8:	4770      	bx	lr

080029ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029ba:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029bc:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029be:	f1b5 3fff 	cmp.w	r5, #4294967295
 80029c2:	d011      	beq.n	80029e8 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029c4:	f100 0308 	add.w	r3, r0, #8
 80029c8:	461c      	mov	r4, r3
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	42aa      	cmp	r2, r5
 80029d0:	d9fa      	bls.n	80029c8 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029d2:	6863      	ldr	r3, [r4, #4]
 80029d4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029d6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029d8:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80029da:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029dc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80029de:	6803      	ldr	r3, [r0, #0]
 80029e0:	3301      	adds	r3, #1
 80029e2:	6003      	str	r3, [r0, #0]
}
 80029e4:	bc30      	pop	{r4, r5}
 80029e6:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80029e8:	6904      	ldr	r4, [r0, #16]
 80029ea:	e7f2      	b.n	80029d2 <vListInsert+0x18>

080029ec <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029ec:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029ee:	6841      	ldr	r1, [r0, #4]
 80029f0:	6882      	ldr	r2, [r0, #8]
 80029f2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029f4:	6841      	ldr	r1, [r0, #4]
 80029f6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	4282      	cmp	r2, r0
 80029fc:	d006      	beq.n	8002a0c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029fe:	2200      	movs	r2, #0
 8002a00:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	3a01      	subs	r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a08:	6818      	ldr	r0, [r3, #0]
}
 8002a0a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a0c:	6882      	ldr	r2, [r0, #8]
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	e7f5      	b.n	80029fe <uxListRemove+0x12>

08002a12 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a12:	b510      	push	{r4, lr}
 8002a14:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a16:	f001 faf5 	bl	8004004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a1a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002a1c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d004      	beq.n	8002a2c <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8002a22:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8002a24:	f001 fb10 	bl	8004048 <vPortExitCritical>

	return xReturn;
}
 8002a28:	4620      	mov	r0, r4
 8002a2a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8002a2c:	2401      	movs	r4, #1
 8002a2e:	e7f9      	b.n	8002a24 <prvIsQueueFull+0x12>

08002a30 <prvIsQueueEmpty>:
{
 8002a30:	b510      	push	{r4, lr}
 8002a32:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002a34:	f001 fae6 	bl	8004004 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a38:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002a3a:	b923      	cbnz	r3, 8002a46 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8002a3c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8002a3e:	f001 fb03 	bl	8004048 <vPortExitCritical>
}
 8002a42:	4620      	mov	r0, r4
 8002a44:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8002a46:	2400      	movs	r4, #0
 8002a48:	e7f9      	b.n	8002a3e <prvIsQueueEmpty+0xe>

08002a4a <prvCopyDataToQueue>:
{
 8002a4a:	b570      	push	{r4, r5, r6, lr}
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a50:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a52:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002a54:	b95a      	cbnz	r2, 8002a6e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a56:	6803      	ldr	r3, [r0, #0]
 8002a58:	b11b      	cbz	r3, 8002a62 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8002a5a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a5c:	3601      	adds	r6, #1
 8002a5e:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8002a60:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a62:	6880      	ldr	r0, [r0, #8]
 8002a64:	f000 fff4 	bl	8003a50 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60a3      	str	r3, [r4, #8]
 8002a6c:	e7f6      	b.n	8002a5c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8002a6e:	b96d      	cbnz	r5, 8002a8c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a70:	6840      	ldr	r0, [r0, #4]
 8002a72:	f001 fdc3 	bl	80045fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a76:	6863      	ldr	r3, [r4, #4]
 8002a78:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002a7a:	4413      	add	r3, r2
 8002a7c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a7e:	68a2      	ldr	r2, [r4, #8]
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d319      	bcc.n	8002ab8 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8002a88:	4628      	mov	r0, r5
 8002a8a:	e7e7      	b.n	8002a5c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a8c:	68c0      	ldr	r0, [r0, #12]
 8002a8e:	f001 fdb5 	bl	80045fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a92:	68e3      	ldr	r3, [r4, #12]
 8002a94:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002a96:	4251      	negs	r1, r2
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d202      	bcs.n	8002aa8 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002aa2:	68a3      	ldr	r3, [r4, #8]
 8002aa4:	440b      	add	r3, r1
 8002aa6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002aa8:	2d02      	cmp	r5, #2
 8002aaa:	d001      	beq.n	8002ab0 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8002aac:	2000      	movs	r0, #0
 8002aae:	e7d5      	b.n	8002a5c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ab0:	b126      	cbz	r6, 8002abc <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8002ab2:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	e7d1      	b.n	8002a5c <prvCopyDataToQueue+0x12>
 8002ab8:	4628      	mov	r0, r5
 8002aba:	e7cf      	b.n	8002a5c <prvCopyDataToQueue+0x12>
 8002abc:	2000      	movs	r0, #0
 8002abe:	e7cd      	b.n	8002a5c <prvCopyDataToQueue+0x12>

08002ac0 <prvCopyDataFromQueue>:
{
 8002ac0:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ac2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002ac4:	b16a      	cbz	r2, 8002ae2 <prvCopyDataFromQueue+0x22>
{
 8002ac6:	b510      	push	{r4, lr}
 8002ac8:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002aca:	68d9      	ldr	r1, [r3, #12]
 8002acc:	4411      	add	r1, r2
 8002ace:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ad0:	689c      	ldr	r4, [r3, #8]
 8002ad2:	42a1      	cmp	r1, r4
 8002ad4:	d301      	bcc.n	8002ada <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ad6:	6819      	ldr	r1, [r3, #0]
 8002ad8:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ada:	68d9      	ldr	r1, [r3, #12]
 8002adc:	f001 fd8e 	bl	80045fc <memcpy>
}
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	4770      	bx	lr

08002ae4 <prvUnlockQueue>:
{
 8002ae4:	b538      	push	{r3, r4, r5, lr}
 8002ae6:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8002ae8:	f001 fa8c 	bl	8004004 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002aec:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8002af0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002af2:	e001      	b.n	8002af8 <prvUnlockQueue+0x14>
			--cTxLock;
 8002af4:	3c01      	subs	r4, #1
 8002af6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002af8:	2c00      	cmp	r4, #0
 8002afa:	dd0a      	ble.n	8002b12 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002afc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002afe:	b143      	cbz	r3, 8002b12 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b00:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8002b04:	f000 fefa 	bl	80038fc <xTaskRemoveFromEventList>
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	d0f3      	beq.n	8002af4 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8002b0c:	f000 ff8a 	bl	8003a24 <vTaskMissedYield>
 8002b10:	e7f0      	b.n	8002af4 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8002b12:	23ff      	movs	r3, #255	@ 0xff
 8002b14:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8002b18:	f001 fa96 	bl	8004048 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002b1c:	f001 fa72 	bl	8004004 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002b20:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8002b24:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b26:	e001      	b.n	8002b2c <prvUnlockQueue+0x48>
				--cRxLock;
 8002b28:	3c01      	subs	r4, #1
 8002b2a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b2c:	2c00      	cmp	r4, #0
 8002b2e:	dd0a      	ble.n	8002b46 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b30:	692b      	ldr	r3, [r5, #16]
 8002b32:	b143      	cbz	r3, 8002b46 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b34:	f105 0010 	add.w	r0, r5, #16
 8002b38:	f000 fee0 	bl	80038fc <xTaskRemoveFromEventList>
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	d0f3      	beq.n	8002b28 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8002b40:	f000 ff70 	bl	8003a24 <vTaskMissedYield>
 8002b44:	e7f0      	b.n	8002b28 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8002b46:	23ff      	movs	r3, #255	@ 0xff
 8002b48:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8002b4c:	f001 fa7c 	bl	8004048 <vPortExitCritical>
}
 8002b50:	bd38      	pop	{r3, r4, r5, pc}

08002b52 <xQueueGenericReset>:
{
 8002b52:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8002b54:	b1e0      	cbz	r0, 8002b90 <xQueueGenericReset+0x3e>
 8002b56:	460d      	mov	r5, r1
 8002b58:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002b5a:	f001 fa53 	bl	8004004 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002b62:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002b64:	fb01 3002 	mla	r0, r1, r2, r3
 8002b68:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b6e:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b70:	3a01      	subs	r2, #1
 8002b72:	fb02 3301 	mla	r3, r2, r1, r3
 8002b76:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b78:	23ff      	movs	r3, #255	@ 0xff
 8002b7a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b7e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8002b82:	b9fd      	cbnz	r5, 8002bc4 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b84:	6923      	ldr	r3, [r4, #16]
 8002b86:	b963      	cbnz	r3, 8002ba2 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8002b88:	f001 fa5e 	bl	8004048 <vPortExitCritical>
}
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002ba0:	e7fe      	b.n	8002ba0 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ba2:	f104 0010 	add.w	r0, r4, #16
 8002ba6:	f000 fea9 	bl	80038fc <xTaskRemoveFromEventList>
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d0ec      	beq.n	8002b88 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8002bae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bb6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	e7e1      	b.n	8002b88 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bc4:	f104 0010 	add.w	r0, r4, #16
 8002bc8:	f7ff fede 	bl	8002988 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bcc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002bd0:	f7ff feda 	bl	8002988 <vListInitialise>
 8002bd4:	e7d8      	b.n	8002b88 <xQueueGenericReset+0x36>

08002bd6 <prvInitialiseNewQueue>:
{
 8002bd6:	b538      	push	{r3, r4, r5, lr}
 8002bd8:	461d      	mov	r5, r3
 8002bda:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bdc:	460b      	mov	r3, r1
 8002bde:	b949      	cbnz	r1, 8002bf4 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002be0:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002be2:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002be4:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002be6:	2101      	movs	r1, #1
 8002be8:	4620      	mov	r0, r4
 8002bea:	f7ff ffb2 	bl	8002b52 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002bee:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bf4:	6022      	str	r2, [r4, #0]
 8002bf6:	e7f4      	b.n	8002be2 <prvInitialiseNewQueue+0xc>

08002bf8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bf8:	b940      	cbnz	r0, 8002c0c <xQueueGenericCreateStatic+0x14>
 8002bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	e7fe      	b.n	8002c0a <xQueueGenericCreateStatic+0x12>
	{
 8002c0c:	b510      	push	{r4, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	461c      	mov	r4, r3
 8002c12:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8002c14:	b153      	cbz	r3, 8002c2c <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c16:	b192      	cbz	r2, 8002c3e <xQueueGenericCreateStatic+0x46>
 8002c18:	b989      	cbnz	r1, 8002c3e <xQueueGenericCreateStatic+0x46>
 8002c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1e:	f383 8811 	msr	BASEPRI, r3
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	f3bf 8f4f 	dsb	sy
 8002c2a:	e7fe      	b.n	8002c2a <xQueueGenericCreateStatic+0x32>
 8002c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8002c3c:	e7fe      	b.n	8002c3c <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c3e:	b16a      	cbz	r2, 8002c5c <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c40:	2350      	movs	r3, #80	@ 0x50
 8002c42:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c44:	9b03      	ldr	r3, [sp, #12]
 8002c46:	2b50      	cmp	r3, #80	@ 0x50
 8002c48:	d013      	beq.n	8002c72 <xQueueGenericCreateStatic+0x7a>
 8002c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c4e:	f383 8811 	msr	BASEPRI, r3
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	e7fe      	b.n	8002c5a <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c5c:	2900      	cmp	r1, #0
 8002c5e:	d0ef      	beq.n	8002c40 <xQueueGenericCreateStatic+0x48>
 8002c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	e7fe      	b.n	8002c70 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c72:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c7a:	9400      	str	r4, [sp, #0]
 8002c7c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002c80:	4660      	mov	r0, ip
 8002c82:	f7ff ffa8 	bl	8002bd6 <prvInitialiseNewQueue>
	}
 8002c86:	4620      	mov	r0, r4
 8002c88:	b004      	add	sp, #16
 8002c8a:	bd10      	pop	{r4, pc}

08002c8c <xQueueGenericSend>:
{
 8002c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002c92:	b188      	cbz	r0, 8002cb8 <xQueueGenericSend+0x2c>
 8002c94:	460f      	mov	r7, r1
 8002c96:	461d      	mov	r5, r3
 8002c98:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c9a:	b1b1      	cbz	r1, 8002cca <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c9c:	2d02      	cmp	r5, #2
 8002c9e:	d120      	bne.n	8002ce2 <xQueueGenericSend+0x56>
 8002ca0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d01d      	beq.n	8002ce2 <xQueueGenericSend+0x56>
 8002ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	e7fe      	b.n	8002cb6 <xQueueGenericSend+0x2a>
 8002cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002cc8:	e7fe      	b.n	8002cc8 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0e5      	beq.n	8002c9c <xQueueGenericSend+0x10>
 8002cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ce2:	f000 fea5 	bl	8003a30 <xTaskGetSchedulerState>
 8002ce6:	4606      	mov	r6, r0
 8002ce8:	b958      	cbnz	r0, 8002d02 <xQueueGenericSend+0x76>
 8002cea:	9b01      	ldr	r3, [sp, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d048      	beq.n	8002d82 <xQueueGenericSend+0xf6>
 8002cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	e7fe      	b.n	8002d00 <xQueueGenericSend+0x74>
 8002d02:	2600      	movs	r6, #0
 8002d04:	e03d      	b.n	8002d82 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d06:	462a      	mov	r2, r5
 8002d08:	4639      	mov	r1, r7
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f7ff fe9d 	bl	8002a4a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002d12:	b97b      	cbnz	r3, 8002d34 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8002d14:	b148      	cbz	r0, 8002d2a <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8002d16:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d1e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002d2a:	f001 f98d 	bl	8004048 <vPortExitCritical>
				return pdPASS;
 8002d2e:	2001      	movs	r0, #1
}
 8002d30:	b005      	add	sp, #20
 8002d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d34:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002d38:	f000 fde0 	bl	80038fc <xTaskRemoveFromEventList>
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d0f4      	beq.n	8002d2a <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8002d40:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d48:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	e7e9      	b.n	8002d2a <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8002d56:	f001 f977 	bl	8004048 <vPortExitCritical>
					return errQUEUE_FULL;
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	e7e8      	b.n	8002d30 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d5e:	a802      	add	r0, sp, #8
 8002d60:	f000 fe12 	bl	8003988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d64:	2601      	movs	r6, #1
 8002d66:	e019      	b.n	8002d9c <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002d6e:	e021      	b.n	8002db4 <xQueueGenericSend+0x128>
 8002d70:	2300      	movs	r3, #0
 8002d72:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002d76:	e023      	b.n	8002dc0 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7ff feb3 	bl	8002ae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d7e:	f000 fc95 	bl	80036ac <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002d82:	f001 f93f 	bl	8004004 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d86:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002d88:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d3bb      	bcc.n	8002d06 <xQueueGenericSend+0x7a>
 8002d8e:	2d02      	cmp	r5, #2
 8002d90:	d0b9      	beq.n	8002d06 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d92:	9b01      	ldr	r3, [sp, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0de      	beq.n	8002d56 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8002d98:	2e00      	cmp	r6, #0
 8002d9a:	d0e0      	beq.n	8002d5e <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8002d9c:	f001 f954 	bl	8004048 <vPortExitCritical>
		vTaskSuspendAll();
 8002da0:	f000 fbea 	bl	8003578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002da4:	f001 f92e 	bl	8004004 <vPortEnterCritical>
 8002da8:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8002dac:	b252      	sxtb	r2, r2
 8002dae:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002db2:	d0d9      	beq.n	8002d68 <xQueueGenericSend+0xdc>
 8002db4:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8002db8:	b252      	sxtb	r2, r2
 8002dba:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002dbe:	d0d7      	beq.n	8002d70 <xQueueGenericSend+0xe4>
 8002dc0:	f001 f942 	bl	8004048 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dc4:	a901      	add	r1, sp, #4
 8002dc6:	a802      	add	r0, sp, #8
 8002dc8:	f000 fdea 	bl	80039a0 <xTaskCheckForTimeOut>
 8002dcc:	b9d8      	cbnz	r0, 8002e06 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f7ff fe1f 	bl	8002a12 <prvIsQueueFull>
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	d0cf      	beq.n	8002d78 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dd8:	9901      	ldr	r1, [sp, #4]
 8002dda:	f104 0010 	add.w	r0, r4, #16
 8002dde:	f000 fd59 	bl	8003894 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002de2:	4620      	mov	r0, r4
 8002de4:	f7ff fe7e 	bl	8002ae4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002de8:	f000 fc60 	bl	80036ac <xTaskResumeAll>
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d1c8      	bne.n	8002d82 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8002df0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002df4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002df8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	e7bd      	b.n	8002d82 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8002e06:	4620      	mov	r0, r4
 8002e08:	f7ff fe6c 	bl	8002ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e0c:	f000 fc4e 	bl	80036ac <xTaskResumeAll>
			return errQUEUE_FULL;
 8002e10:	2000      	movs	r0, #0
 8002e12:	e78d      	b.n	8002d30 <xQueueGenericSend+0xa4>

08002e14 <xQueueGenericSendFromISR>:
{
 8002e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8002e18:	b190      	cbz	r0, 8002e40 <xQueueGenericSendFromISR+0x2c>
 8002e1a:	460f      	mov	r7, r1
 8002e1c:	4616      	mov	r6, r2
 8002e1e:	461c      	mov	r4, r3
 8002e20:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e22:	b1b1      	cbz	r1, 8002e52 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e24:	2c02      	cmp	r4, #2
 8002e26:	d120      	bne.n	8002e6a <xQueueGenericSendFromISR+0x56>
 8002e28:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d01d      	beq.n	8002e6a <xQueueGenericSendFromISR+0x56>
 8002e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	e7fe      	b.n	8002e3e <xQueueGenericSendFromISR+0x2a>
 8002e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002e50:	e7fe      	b.n	8002e50 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e52:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0e5      	beq.n	8002e24 <xQueueGenericSendFromISR+0x10>
 8002e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	e7fe      	b.n	8002e68 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e6a:	f001 f9f1 	bl	8004250 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e6e:	f3ef 8811 	mrs	r8, BASEPRI
 8002e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e82:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8002e84:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d306      	bcc.n	8002e98 <xQueueGenericSendFromISR+0x84>
 8002e8a:	2c02      	cmp	r4, #2
 8002e8c:	d004      	beq.n	8002e98 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8002e8e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e90:	f388 8811 	msr	BASEPRI, r8
}
 8002e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e98:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8002e9c:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ea0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	4639      	mov	r1, r7
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f7ff fdcf 	bl	8002a4a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002eac:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002eb0:	d006      	beq.n	8002ec0 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002eb2:	f109 0301 	add.w	r3, r9, #1
 8002eb6:	b25b      	sxtb	r3, r3
 8002eb8:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	e7e7      	b.n	8002e90 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ec0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002ec2:	b90b      	cbnz	r3, 8002ec8 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	e7e3      	b.n	8002e90 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec8:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8002ecc:	f000 fd16 	bl	80038fc <xTaskRemoveFromEventList>
 8002ed0:	b118      	cbz	r0, 8002eda <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8002ed2:	b126      	cbz	r6, 8002ede <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	6030      	str	r0, [r6, #0]
 8002ed8:	e7da      	b.n	8002e90 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8002eda:	2001      	movs	r0, #1
 8002edc:	e7d8      	b.n	8002e90 <xQueueGenericSendFromISR+0x7c>
 8002ede:	2001      	movs	r0, #1
 8002ee0:	e7d6      	b.n	8002e90 <xQueueGenericSendFromISR+0x7c>

08002ee2 <xQueueReceive>:
{
 8002ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002ee8:	b190      	cbz	r0, 8002f10 <xQueueReceive+0x2e>
 8002eea:	460f      	mov	r7, r1
 8002eec:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eee:	b1c1      	cbz	r1, 8002f22 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ef0:	f000 fd9e 	bl	8003a30 <xTaskGetSchedulerState>
 8002ef4:	4606      	mov	r6, r0
 8002ef6:	bb00      	cbnz	r0, 8002f3a <xQueueReceive+0x58>
 8002ef8:	9b01      	ldr	r3, [sp, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d05e      	beq.n	8002fbc <xQueueReceive+0xda>
	__asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	e7fe      	b.n	8002f0e <xQueueReceive+0x2c>
 8002f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8002f20:	e7fe      	b.n	8002f20 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f22:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0e3      	beq.n	8002ef0 <xQueueReceive+0xe>
 8002f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	e7fe      	b.n	8002f38 <xQueueReceive+0x56>
 8002f3a:	2600      	movs	r6, #0
 8002f3c:	e03e      	b.n	8002fbc <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f3e:	4639      	mov	r1, r7
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7ff fdbd 	bl	8002ac0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f46:	3d01      	subs	r5, #1
 8002f48:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f4a:	6923      	ldr	r3, [r4, #16]
 8002f4c:	b923      	cbnz	r3, 8002f58 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8002f4e:	f001 f87b 	bl	8004048 <vPortExitCritical>
				return pdPASS;
 8002f52:	2001      	movs	r0, #1
}
 8002f54:	b005      	add	sp, #20
 8002f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f58:	f104 0010 	add.w	r0, r4, #16
 8002f5c:	f000 fcce 	bl	80038fc <xTaskRemoveFromEventList>
 8002f60:	2800      	cmp	r0, #0
 8002f62:	d0f4      	beq.n	8002f4e <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8002f64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	e7e9      	b.n	8002f4e <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8002f7a:	f001 f865 	bl	8004048 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002f7e:	2000      	movs	r0, #0
 8002f80:	e7e8      	b.n	8002f54 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f82:	a802      	add	r0, sp, #8
 8002f84:	f000 fd00 	bl	8003988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f88:	2601      	movs	r6, #1
 8002f8a:	e021      	b.n	8002fd0 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002f92:	e029      	b.n	8002fe8 <xQueueReceive+0x106>
 8002f94:	2300      	movs	r3, #0
 8002f96:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002f9a:	e02b      	b.n	8002ff4 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f7ff fda1 	bl	8002ae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fa2:	f000 fb83 	bl	80036ac <xTaskResumeAll>
 8002fa6:	e009      	b.n	8002fbc <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f7ff fd9b 	bl	8002ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fae:	f000 fb7d 	bl	80036ac <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f7ff fd3c 	bl	8002a30 <prvIsQueueEmpty>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d13f      	bne.n	800303c <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8002fbc:	f001 f822 	bl	8004004 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fc0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fc2:	2d00      	cmp	r5, #0
 8002fc4:	d1bb      	bne.n	8002f3e <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fc6:	9b01      	ldr	r3, [sp, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0d6      	beq.n	8002f7a <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8002fcc:	2e00      	cmp	r6, #0
 8002fce:	d0d8      	beq.n	8002f82 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8002fd0:	f001 f83a 	bl	8004048 <vPortExitCritical>
		vTaskSuspendAll();
 8002fd4:	f000 fad0 	bl	8003578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fd8:	f001 f814 	bl	8004004 <vPortEnterCritical>
 8002fdc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002fe0:	b25b      	sxtb	r3, r3
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d0d1      	beq.n	8002f8c <xQueueReceive+0xaa>
 8002fe8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d0cf      	beq.n	8002f94 <xQueueReceive+0xb2>
 8002ff4:	f001 f828 	bl	8004048 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ff8:	a901      	add	r1, sp, #4
 8002ffa:	a802      	add	r0, sp, #8
 8002ffc:	f000 fcd0 	bl	80039a0 <xTaskCheckForTimeOut>
 8003000:	2800      	cmp	r0, #0
 8003002:	d1d1      	bne.n	8002fa8 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003004:	4620      	mov	r0, r4
 8003006:	f7ff fd13 	bl	8002a30 <prvIsQueueEmpty>
 800300a:	2800      	cmp	r0, #0
 800300c:	d0c6      	beq.n	8002f9c <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800300e:	9901      	ldr	r1, [sp, #4]
 8003010:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003014:	f000 fc3e 	bl	8003894 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003018:	4620      	mov	r0, r4
 800301a:	f7ff fd63 	bl	8002ae4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800301e:	f000 fb45 	bl	80036ac <xTaskResumeAll>
 8003022:	2800      	cmp	r0, #0
 8003024:	d1ca      	bne.n	8002fbc <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8003026:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800302a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800302e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	e7bf      	b.n	8002fbc <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800303c:	2000      	movs	r0, #0
 800303e:	e789      	b.n	8002f54 <xQueueReceive+0x72>

08003040 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003040:	2300      	movs	r3, #0
 8003042:	2b07      	cmp	r3, #7
 8003044:	d80c      	bhi.n	8003060 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003046:	4a07      	ldr	r2, [pc, #28]	@ (8003064 <vQueueAddToRegistry+0x24>)
 8003048:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800304c:	b10a      	cbz	r2, 8003052 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800304e:	3301      	adds	r3, #1
 8003050:	e7f7      	b.n	8003042 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003052:	4a04      	ldr	r2, [pc, #16]	@ (8003064 <vQueueAddToRegistry+0x24>)
 8003054:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003058:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800305c:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800305e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000918 	.word	0x20000918

08003068 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	4604      	mov	r4, r0
 800306c:	460d      	mov	r5, r1
 800306e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003070:	f000 ffc8 	bl	8004004 <vPortEnterCritical>
 8003074:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003078:	b25b      	sxtb	r3, r3
 800307a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307e:	d00d      	beq.n	800309c <vQueueWaitForMessageRestricted+0x34>
 8003080:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003084:	b25b      	sxtb	r3, r3
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308a:	d00b      	beq.n	80030a4 <vQueueWaitForMessageRestricted+0x3c>
 800308c:	f000 ffdc 	bl	8004048 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003090:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003092:	b15b      	cbz	r3, 80030ac <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003094:	4620      	mov	r0, r4
 8003096:	f7ff fd25 	bl	8002ae4 <prvUnlockQueue>
	}
 800309a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800309c:	2300      	movs	r3, #0
 800309e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80030a2:	e7ed      	b.n	8003080 <vQueueWaitForMessageRestricted+0x18>
 80030a4:	2300      	movs	r3, #0
 80030a6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80030aa:	e7ef      	b.n	800308c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030ac:	4632      	mov	r2, r6
 80030ae:	4629      	mov	r1, r5
 80030b0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80030b4:	f000 fc06 	bl	80038c4 <vTaskPlaceOnEventListRestricted>
 80030b8:	e7ec      	b.n	8003094 <vQueueWaitForMessageRestricted+0x2c>
	...

080030bc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030bc:	4b08      	ldr	r3, [pc, #32]	@ (80030e0 <prvResetNextTaskUnblockTime+0x24>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	b923      	cbnz	r3, 80030ce <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030c4:	4b07      	ldr	r3, [pc, #28]	@ (80030e4 <prvResetNextTaskUnblockTime+0x28>)
 80030c6:	f04f 32ff 	mov.w	r2, #4294967295
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ce:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <prvResetNextTaskUnblockTime+0x24>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	4b02      	ldr	r3, [pc, #8]	@ (80030e4 <prvResetNextTaskUnblockTime+0x28>)
 80030da:	601a      	str	r2, [r3, #0]
	}
}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	200009c8 	.word	0x200009c8
 80030e4:	20000960 	.word	0x20000960

080030e8 <prvInitialiseNewTask>:
{
 80030e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ec:	4680      	mov	r8, r0
 80030ee:	460d      	mov	r5, r1
 80030f0:	4617      	mov	r7, r2
 80030f2:	4699      	mov	r9, r3
 80030f4:	9e08      	ldr	r6, [sp, #32]
 80030f6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80030fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	21a5      	movs	r1, #165	@ 0xa5
 8003100:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003102:	f001 f9f7 	bl	80044f4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003106:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003108:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 800310c:	3a01      	subs	r2, #1
 800310e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003112:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8003116:	2d00      	cmp	r5, #0
 8003118:	d042      	beq.n	80031a0 <prvInitialiseNewTask+0xb8>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800311a:	f04f 0c00 	mov.w	ip, #0
 800311e:	f1bc 0f0f 	cmp.w	ip, #15
 8003122:	d809      	bhi.n	8003138 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003124:	f815 300c 	ldrb.w	r3, [r5, ip]
 8003128:	eb04 020c 	add.w	r2, r4, ip
 800312c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8003130:	b113      	cbz	r3, 8003138 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003132:	f10c 0c01 	add.w	ip, ip, #1
 8003136:	e7f2      	b.n	800311e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003138:	2300      	movs	r3, #0
 800313a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800313e:	2e37      	cmp	r6, #55	@ 0x37
 8003140:	d900      	bls.n	8003144 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003142:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8003144:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003146:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003148:	2500      	movs	r5, #0
 800314a:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800314c:	1d20      	adds	r0, r4, #4
 800314e:	f7ff fc26 	bl	800299e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003152:	f104 0018 	add.w	r0, r4, #24
 8003156:	f7ff fc22 	bl	800299e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800315a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800315c:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8003160:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003162:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8003164:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003168:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800316c:	224c      	movs	r2, #76	@ 0x4c
 800316e:	4629      	mov	r1, r5
 8003170:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8003174:	f001 f9be 	bl	80044f4 <memset>
 8003178:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <prvInitialiseNewTask+0xc0>)
 800317a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800317c:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003180:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8003182:	33d0      	adds	r3, #208	@ 0xd0
 8003184:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003186:	464a      	mov	r2, r9
 8003188:	4641      	mov	r1, r8
 800318a:	4638      	mov	r0, r7
 800318c:	f000 ff10 	bl	8003fb0 <pxPortInitialiseStack>
 8003190:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8003192:	f1ba 0f00 	cmp.w	sl, #0
 8003196:	d001      	beq.n	800319c <prvInitialiseNewTask+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003198:	f8ca 4000 	str.w	r4, [sl]
}
 800319c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80031a6:	e7ca      	b.n	800313e <prvInitialiseNewTask+0x56>
 80031a8:	20004bac 	.word	0x20004bac

080031ac <prvInitialiseTaskLists>:
{
 80031ac:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031ae:	2400      	movs	r4, #0
 80031b0:	e007      	b.n	80031c2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031b2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80031b6:	0093      	lsls	r3, r2, #2
 80031b8:	480e      	ldr	r0, [pc, #56]	@ (80031f4 <prvInitialiseTaskLists+0x48>)
 80031ba:	4418      	add	r0, r3
 80031bc:	f7ff fbe4 	bl	8002988 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031c0:	3401      	adds	r4, #1
 80031c2:	2c37      	cmp	r4, #55	@ 0x37
 80031c4:	d9f5      	bls.n	80031b2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80031c6:	4d0c      	ldr	r5, [pc, #48]	@ (80031f8 <prvInitialiseTaskLists+0x4c>)
 80031c8:	4628      	mov	r0, r5
 80031ca:	f7ff fbdd 	bl	8002988 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031ce:	4c0b      	ldr	r4, [pc, #44]	@ (80031fc <prvInitialiseTaskLists+0x50>)
 80031d0:	4620      	mov	r0, r4
 80031d2:	f7ff fbd9 	bl	8002988 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031d6:	480a      	ldr	r0, [pc, #40]	@ (8003200 <prvInitialiseTaskLists+0x54>)
 80031d8:	f7ff fbd6 	bl	8002988 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80031dc:	4809      	ldr	r0, [pc, #36]	@ (8003204 <prvInitialiseTaskLists+0x58>)
 80031de:	f7ff fbd3 	bl	8002988 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80031e2:	4809      	ldr	r0, [pc, #36]	@ (8003208 <prvInitialiseTaskLists+0x5c>)
 80031e4:	f7ff fbd0 	bl	8002988 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80031e8:	4b08      	ldr	r3, [pc, #32]	@ (800320c <prvInitialiseTaskLists+0x60>)
 80031ea:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031ec:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <prvInitialiseTaskLists+0x64>)
 80031ee:	601c      	str	r4, [r3, #0]
}
 80031f0:	bd38      	pop	{r3, r4, r5, pc}
 80031f2:	bf00      	nop
 80031f4:	200009f4 	.word	0x200009f4
 80031f8:	200009e0 	.word	0x200009e0
 80031fc:	200009cc 	.word	0x200009cc
 8003200:	200009b0 	.word	0x200009b0
 8003204:	2000099c 	.word	0x2000099c
 8003208:	20000984 	.word	0x20000984
 800320c:	200009c8 	.word	0x200009c8
 8003210:	200009c4 	.word	0x200009c4

08003214 <prvAddNewTaskToReadyList>:
{
 8003214:	b510      	push	{r4, lr}
 8003216:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003218:	f000 fef4 	bl	8004004 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800321c:	4a22      	ldr	r2, [pc, #136]	@ (80032a8 <prvAddNewTaskToReadyList+0x94>)
 800321e:	6813      	ldr	r3, [r2, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003224:	4b21      	ldr	r3, [pc, #132]	@ (80032ac <prvAddNewTaskToReadyList+0x98>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	b15b      	cbz	r3, 8003242 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800322a:	4b21      	ldr	r3, [pc, #132]	@ (80032b0 <prvAddNewTaskToReadyList+0x9c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	b96b      	cbnz	r3, 800324c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003230:	4b1e      	ldr	r3, [pc, #120]	@ (80032ac <prvAddNewTaskToReadyList+0x98>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003236:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003238:	429a      	cmp	r2, r3
 800323a:	d807      	bhi.n	800324c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800323c:	4b1b      	ldr	r3, [pc, #108]	@ (80032ac <prvAddNewTaskToReadyList+0x98>)
 800323e:	601c      	str	r4, [r3, #0]
 8003240:	e004      	b.n	800324c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8003242:	4b1a      	ldr	r3, [pc, #104]	@ (80032ac <prvAddNewTaskToReadyList+0x98>)
 8003244:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003246:	6813      	ldr	r3, [r2, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d029      	beq.n	80032a0 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800324c:	4a19      	ldr	r2, [pc, #100]	@ (80032b4 <prvAddNewTaskToReadyList+0xa0>)
 800324e:	6813      	ldr	r3, [r2, #0]
 8003250:	3301      	adds	r3, #1
 8003252:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003254:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8003256:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003258:	4b17      	ldr	r3, [pc, #92]	@ (80032b8 <prvAddNewTaskToReadyList+0xa4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4298      	cmp	r0, r3
 800325e:	d901      	bls.n	8003264 <prvAddNewTaskToReadyList+0x50>
 8003260:	4b15      	ldr	r3, [pc, #84]	@ (80032b8 <prvAddNewTaskToReadyList+0xa4>)
 8003262:	6018      	str	r0, [r3, #0]
 8003264:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003268:	1d21      	adds	r1, r4, #4
 800326a:	4b14      	ldr	r3, [pc, #80]	@ (80032bc <prvAddNewTaskToReadyList+0xa8>)
 800326c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003270:	f7ff fb98 	bl	80029a4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003274:	f000 fee8 	bl	8004048 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003278:	4b0d      	ldr	r3, [pc, #52]	@ (80032b0 <prvAddNewTaskToReadyList+0x9c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b17b      	cbz	r3, 800329e <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800327e:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <prvAddNewTaskToReadyList+0x98>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003284:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003286:	429a      	cmp	r2, r3
 8003288:	d209      	bcs.n	800329e <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800328a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800328e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003292:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	f3bf 8f6f 	isb	sy
}
 800329e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80032a0:	f7ff ff84 	bl	80031ac <prvInitialiseTaskLists>
 80032a4:	e7d2      	b.n	800324c <prvAddNewTaskToReadyList+0x38>
 80032a6:	bf00      	nop
 80032a8:	20000980 	.word	0x20000980
 80032ac:	20000e54 	.word	0x20000e54
 80032b0:	20000974 	.word	0x20000974
 80032b4:	20000964 	.word	0x20000964
 80032b8:	20000978 	.word	0x20000978
 80032bc:	200009f4 	.word	0x200009f4

080032c0 <prvDeleteTCB>:
	{
 80032c0:	b510      	push	{r4, lr}
 80032c2:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80032c4:	3054      	adds	r0, #84	@ 0x54
 80032c6:	f001 f91d 	bl	8004504 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032ca:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 80032ce:	b163      	cbz	r3, 80032ea <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d011      	beq.n	80032f8 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d00e      	beq.n	80032f6 <prvDeleteTCB+0x36>
 80032d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	e7fe      	b.n	80032e8 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80032ea:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80032ec:	f001 f8c4 	bl	8004478 <vPortFree>
				vPortFree( pxTCB );
 80032f0:	4620      	mov	r0, r4
 80032f2:	f001 f8c1 	bl	8004478 <vPortFree>
	}
 80032f6:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80032f8:	4620      	mov	r0, r4
 80032fa:	f001 f8bd 	bl	8004478 <vPortFree>
 80032fe:	e7fa      	b.n	80032f6 <prvDeleteTCB+0x36>

08003300 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003300:	4b0f      	ldr	r3, [pc, #60]	@ (8003340 <prvCheckTasksWaitingTermination+0x40>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	b1d3      	cbz	r3, 800333c <prvCheckTasksWaitingTermination+0x3c>
{
 8003306:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8003308:	f000 fe7c 	bl	8004004 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800330c:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <prvCheckTasksWaitingTermination+0x44>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003312:	1d20      	adds	r0, r4, #4
 8003314:	f7ff fb6a 	bl	80029ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003318:	4a0b      	ldr	r2, [pc, #44]	@ (8003348 <prvCheckTasksWaitingTermination+0x48>)
 800331a:	6813      	ldr	r3, [r2, #0]
 800331c:	3b01      	subs	r3, #1
 800331e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003320:	4a07      	ldr	r2, [pc, #28]	@ (8003340 <prvCheckTasksWaitingTermination+0x40>)
 8003322:	6813      	ldr	r3, [r2, #0]
 8003324:	3b01      	subs	r3, #1
 8003326:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8003328:	f000 fe8e 	bl	8004048 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800332c:	4620      	mov	r0, r4
 800332e:	f7ff ffc7 	bl	80032c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003332:	4b03      	ldr	r3, [pc, #12]	@ (8003340 <prvCheckTasksWaitingTermination+0x40>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e6      	bne.n	8003308 <prvCheckTasksWaitingTermination+0x8>
}
 800333a:	bd10      	pop	{r4, pc}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000998 	.word	0x20000998
 8003344:	2000099c 	.word	0x2000099c
 8003348:	20000980 	.word	0x20000980

0800334c <prvIdleTask>:
{
 800334c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800334e:	f7ff ffd7 	bl	8003300 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003352:	4b07      	ldr	r3, [pc, #28]	@ (8003370 <prvIdleTask+0x24>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d9f9      	bls.n	800334e <prvIdleTask+0x2>
				taskYIELD();
 800335a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800335e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003362:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	e7ee      	b.n	800334e <prvIdleTask+0x2>
 8003370:	200009f4 	.word	0x200009f4

08003374 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003374:	b570      	push	{r4, r5, r6, lr}
 8003376:	4604      	mov	r4, r0
 8003378:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800337a:	4b17      	ldr	r3, [pc, #92]	@ (80033d8 <prvAddCurrentTaskToDelayedList+0x64>)
 800337c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800337e:	4b17      	ldr	r3, [pc, #92]	@ (80033dc <prvAddCurrentTaskToDelayedList+0x68>)
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	3004      	adds	r0, #4
 8003384:	f7ff fb32 	bl	80029ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003388:	f1b4 3fff 	cmp.w	r4, #4294967295
 800338c:	d00d      	beq.n	80033aa <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800338e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003390:	4b12      	ldr	r3, [pc, #72]	@ (80033dc <prvAddCurrentTaskToDelayedList+0x68>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8003396:	42a6      	cmp	r6, r4
 8003398:	d910      	bls.n	80033bc <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800339a:	4b11      	ldr	r3, [pc, #68]	@ (80033e0 <prvAddCurrentTaskToDelayedList+0x6c>)
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <prvAddCurrentTaskToDelayedList+0x68>)
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	3104      	adds	r1, #4
 80033a4:	f7ff fb09 	bl	80029ba <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033aa:	2d00      	cmp	r5, #0
 80033ac:	d0ef      	beq.n	800338e <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ae:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <prvAddCurrentTaskToDelayedList+0x68>)
 80033b0:	6819      	ldr	r1, [r3, #0]
 80033b2:	3104      	adds	r1, #4
 80033b4:	480b      	ldr	r0, [pc, #44]	@ (80033e4 <prvAddCurrentTaskToDelayedList+0x70>)
 80033b6:	f7ff faf5 	bl	80029a4 <vListInsertEnd>
 80033ba:	e7f5      	b.n	80033a8 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033bc:	4b0a      	ldr	r3, [pc, #40]	@ (80033e8 <prvAddCurrentTaskToDelayedList+0x74>)
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <prvAddCurrentTaskToDelayedList+0x68>)
 80033c2:	6819      	ldr	r1, [r3, #0]
 80033c4:	3104      	adds	r1, #4
 80033c6:	f7ff faf8 	bl	80029ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <prvAddCurrentTaskToDelayedList+0x78>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	42a3      	cmp	r3, r4
 80033d0:	d9ea      	bls.n	80033a8 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 80033d2:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <prvAddCurrentTaskToDelayedList+0x78>)
 80033d4:	601c      	str	r4, [r3, #0]
}
 80033d6:	e7e7      	b.n	80033a8 <prvAddCurrentTaskToDelayedList+0x34>
 80033d8:	2000097c 	.word	0x2000097c
 80033dc:	20000e54 	.word	0x20000e54
 80033e0:	200009c4 	.word	0x200009c4
 80033e4:	20000984 	.word	0x20000984
 80033e8:	200009c8 	.word	0x200009c8
 80033ec:	20000960 	.word	0x20000960

080033f0 <xTaskCreateStatic>:
	{
 80033f0:	b530      	push	{r4, r5, lr}
 80033f2:	b087      	sub	sp, #28
 80033f4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80033f6:	b17c      	cbz	r4, 8003418 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033f8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80033fa:	b1b5      	cbz	r5, 800342a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80033fc:	25a8      	movs	r5, #168	@ 0xa8
 80033fe:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003400:	9d04      	ldr	r5, [sp, #16]
 8003402:	2da8      	cmp	r5, #168	@ 0xa8
 8003404:	d01a      	beq.n	800343c <xTaskCreateStatic+0x4c>
 8003406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	e7fe      	b.n	8003416 <xTaskCreateStatic+0x26>
 8003418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8003428:	e7fe      	b.n	8003428 <xTaskCreateStatic+0x38>
 800342a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800343a:	e7fe      	b.n	800343a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800343c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800343e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8003440:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003442:	2402      	movs	r4, #2
 8003444:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003448:	2400      	movs	r4, #0
 800344a:	9403      	str	r4, [sp, #12]
 800344c:	9502      	str	r5, [sp, #8]
 800344e:	ac05      	add	r4, sp, #20
 8003450:	9401      	str	r4, [sp, #4]
 8003452:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003454:	9400      	str	r4, [sp, #0]
 8003456:	f7ff fe47 	bl	80030e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800345a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800345c:	f7ff feda 	bl	8003214 <prvAddNewTaskToReadyList>
	}
 8003460:	9805      	ldr	r0, [sp, #20]
 8003462:	b007      	add	sp, #28
 8003464:	bd30      	pop	{r4, r5, pc}

08003466 <xTaskCreate>:
	{
 8003466:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800346a:	b085      	sub	sp, #20
 800346c:	4607      	mov	r7, r0
 800346e:	4688      	mov	r8, r1
 8003470:	4614      	mov	r4, r2
 8003472:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003474:	0090      	lsls	r0, r2, #2
 8003476:	f000 ff7d 	bl	8004374 <pvPortMalloc>
			if( pxStack != NULL )
 800347a:	b308      	cbz	r0, 80034c0 <xTaskCreate+0x5a>
 800347c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800347e:	20a8      	movs	r0, #168	@ 0xa8
 8003480:	f000 ff78 	bl	8004374 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003484:	4605      	mov	r5, r0
 8003486:	b1a8      	cbz	r0, 80034b4 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8003488:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800348c:	2300      	movs	r3, #0
 800348e:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003492:	9303      	str	r3, [sp, #12]
 8003494:	9002      	str	r0, [sp, #8]
 8003496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003498:	9301      	str	r3, [sp, #4]
 800349a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	4633      	mov	r3, r6
 80034a0:	4622      	mov	r2, r4
 80034a2:	4641      	mov	r1, r8
 80034a4:	4638      	mov	r0, r7
 80034a6:	f7ff fe1f 	bl	80030e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034aa:	4628      	mov	r0, r5
 80034ac:	f7ff feb2 	bl	8003214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034b0:	2001      	movs	r0, #1
 80034b2:	e007      	b.n	80034c4 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80034b4:	4648      	mov	r0, r9
 80034b6:	f000 ffdf 	bl	8004478 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034ba:	f04f 30ff 	mov.w	r0, #4294967295
 80034be:	e001      	b.n	80034c4 <xTaskCreate+0x5e>
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80034c4:	b005      	add	sp, #20
 80034c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080034cc <vTaskStartScheduler>:
{
 80034cc:	b510      	push	{r4, lr}
 80034ce:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034d0:	2400      	movs	r4, #0
 80034d2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034d4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034d6:	aa07      	add	r2, sp, #28
 80034d8:	a906      	add	r1, sp, #24
 80034da:	a805      	add	r0, sp, #20
 80034dc:	f7ff fa3c 	bl	8002958 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034e0:	9b05      	ldr	r3, [sp, #20]
 80034e2:	9302      	str	r3, [sp, #8]
 80034e4:	9b06      	ldr	r3, [sp, #24]
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	9400      	str	r4, [sp, #0]
 80034ea:	4623      	mov	r3, r4
 80034ec:	9a07      	ldr	r2, [sp, #28]
 80034ee:	491a      	ldr	r1, [pc, #104]	@ (8003558 <vTaskStartScheduler+0x8c>)
 80034f0:	481a      	ldr	r0, [pc, #104]	@ (800355c <vTaskStartScheduler+0x90>)
 80034f2:	f7ff ff7d 	bl	80033f0 <xTaskCreateStatic>
 80034f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003560 <vTaskStartScheduler+0x94>)
 80034f8:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 80034fa:	b1e8      	cbz	r0, 8003538 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 80034fc:	f000 fb5c 	bl	8003bb8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8003500:	2801      	cmp	r0, #1
 8003502:	d11a      	bne.n	800353a <vTaskStartScheduler+0x6e>
 8003504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003514:	4b13      	ldr	r3, [pc, #76]	@ (8003564 <vTaskStartScheduler+0x98>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3354      	adds	r3, #84	@ 0x54
 800351a:	4a13      	ldr	r2, [pc, #76]	@ (8003568 <vTaskStartScheduler+0x9c>)
 800351c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800351e:	4b13      	ldr	r3, [pc, #76]	@ (800356c <vTaskStartScheduler+0xa0>)
 8003520:	f04f 32ff 	mov.w	r2, #4294967295
 8003524:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003526:	4b12      	ldr	r3, [pc, #72]	@ (8003570 <vTaskStartScheduler+0xa4>)
 8003528:	2201      	movs	r2, #1
 800352a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800352c:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <vTaskStartScheduler+0xa8>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003532:	f000 fe01 	bl	8004138 <xPortStartScheduler>
 8003536:	e003      	b.n	8003540 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 8003538:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800353a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800353e:	d001      	beq.n	8003544 <vTaskStartScheduler+0x78>
}
 8003540:	b008      	add	sp, #32
 8003542:	bd10      	pop	{r4, pc}
 8003544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003554:	e7fe      	b.n	8003554 <vTaskStartScheduler+0x88>
 8003556:	bf00      	nop
 8003558:	08004750 	.word	0x08004750
 800355c:	0800334d 	.word	0x0800334d
 8003560:	2000095c 	.word	0x2000095c
 8003564:	20000e54 	.word	0x20000e54
 8003568:	20000010 	.word	0x20000010
 800356c:	20000960 	.word	0x20000960
 8003570:	20000974 	.word	0x20000974
 8003574:	2000097c 	.word	0x2000097c

08003578 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003578:	4a02      	ldr	r2, [pc, #8]	@ (8003584 <vTaskSuspendAll+0xc>)
 800357a:	6813      	ldr	r3, [r2, #0]
 800357c:	3301      	adds	r3, #1
 800357e:	6013      	str	r3, [r2, #0]
}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000958 	.word	0x20000958

08003588 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003588:	4b01      	ldr	r3, [pc, #4]	@ (8003590 <xTaskGetTickCount+0x8>)
 800358a:	6818      	ldr	r0, [r3, #0]
}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	2000097c 	.word	0x2000097c

08003594 <xTaskIncrementTick>:
{
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003596:	4b3a      	ldr	r3, [pc, #232]	@ (8003680 <xTaskIncrementTick+0xec>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d169      	bne.n	8003672 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800359e:	4b39      	ldr	r3, [pc, #228]	@ (8003684 <xTaskIncrementTick+0xf0>)
 80035a0:	681d      	ldr	r5, [r3, #0]
 80035a2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80035a4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035a6:	b9c5      	cbnz	r5, 80035da <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80035a8:	4b37      	ldr	r3, [pc, #220]	@ (8003688 <xTaskIncrementTick+0xf4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	b143      	cbz	r3, 80035c2 <xTaskIncrementTick+0x2e>
 80035b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	e7fe      	b.n	80035c0 <xTaskIncrementTick+0x2c>
 80035c2:	4a31      	ldr	r2, [pc, #196]	@ (8003688 <xTaskIncrementTick+0xf4>)
 80035c4:	6811      	ldr	r1, [r2, #0]
 80035c6:	4b31      	ldr	r3, [pc, #196]	@ (800368c <xTaskIncrementTick+0xf8>)
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	6010      	str	r0, [r2, #0]
 80035cc:	6019      	str	r1, [r3, #0]
 80035ce:	4a30      	ldr	r2, [pc, #192]	@ (8003690 <xTaskIncrementTick+0xfc>)
 80035d0:	6813      	ldr	r3, [r2, #0]
 80035d2:	3301      	adds	r3, #1
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	f7ff fd71 	bl	80030bc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035da:	4b2e      	ldr	r3, [pc, #184]	@ (8003694 <xTaskIncrementTick+0x100>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	42ab      	cmp	r3, r5
 80035e0:	d93d      	bls.n	800365e <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80035e2:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003698 <xTaskIncrementTick+0x104>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035ee:	009a      	lsls	r2, r3, #2
 80035f0:	4b2a      	ldr	r3, [pc, #168]	@ (800369c <xTaskIncrementTick+0x108>)
 80035f2:	589b      	ldr	r3, [r3, r2]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d900      	bls.n	80035fa <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80035f8:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80035fa:	4b29      	ldr	r3, [pc, #164]	@ (80036a0 <xTaskIncrementTick+0x10c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d03c      	beq.n	800367c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8003602:	2701      	movs	r7, #1
	return xSwitchRequired;
 8003604:	e03a      	b.n	800367c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8003606:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003608:	4b1f      	ldr	r3, [pc, #124]	@ (8003688 <xTaskIncrementTick+0xf4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	b343      	cbz	r3, 8003662 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003610:	4b1d      	ldr	r3, [pc, #116]	@ (8003688 <xTaskIncrementTick+0xf4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003618:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800361a:	429d      	cmp	r5, r3
 800361c:	d326      	bcc.n	800366c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800361e:	1d26      	adds	r6, r4, #4
 8003620:	4630      	mov	r0, r6
 8003622:	f7ff f9e3 	bl	80029ec <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003626:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003628:	b11b      	cbz	r3, 8003632 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800362a:	f104 0018 	add.w	r0, r4, #24
 800362e:	f7ff f9dd 	bl	80029ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003632:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003634:	4a1b      	ldr	r2, [pc, #108]	@ (80036a4 <xTaskIncrementTick+0x110>)
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	4293      	cmp	r3, r2
 800363a:	d901      	bls.n	8003640 <xTaskIncrementTick+0xac>
 800363c:	4a19      	ldr	r2, [pc, #100]	@ (80036a4 <xTaskIncrementTick+0x110>)
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003644:	009a      	lsls	r2, r3, #2
 8003646:	4631      	mov	r1, r6
 8003648:	4814      	ldr	r0, [pc, #80]	@ (800369c <xTaskIncrementTick+0x108>)
 800364a:	4410      	add	r0, r2
 800364c:	f7ff f9aa 	bl	80029a4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003650:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003652:	4b11      	ldr	r3, [pc, #68]	@ (8003698 <xTaskIncrementTick+0x104>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	429a      	cmp	r2, r3
 800365a:	d2d4      	bcs.n	8003606 <xTaskIncrementTick+0x72>
 800365c:	e7d4      	b.n	8003608 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800365e:	2700      	movs	r7, #0
 8003660:	e7d2      	b.n	8003608 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003662:	4b0c      	ldr	r3, [pc, #48]	@ (8003694 <xTaskIncrementTick+0x100>)
 8003664:	f04f 32ff 	mov.w	r2, #4294967295
 8003668:	601a      	str	r2, [r3, #0]
					break;
 800366a:	e7bb      	b.n	80035e4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800366c:	4a09      	ldr	r2, [pc, #36]	@ (8003694 <xTaskIncrementTick+0x100>)
 800366e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003670:	e7b8      	b.n	80035e4 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8003672:	4a0d      	ldr	r2, [pc, #52]	@ (80036a8 <xTaskIncrementTick+0x114>)
 8003674:	6813      	ldr	r3, [r2, #0]
 8003676:	3301      	adds	r3, #1
 8003678:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800367a:	2700      	movs	r7, #0
}
 800367c:	4638      	mov	r0, r7
 800367e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003680:	20000958 	.word	0x20000958
 8003684:	2000097c 	.word	0x2000097c
 8003688:	200009c8 	.word	0x200009c8
 800368c:	200009c4 	.word	0x200009c4
 8003690:	20000968 	.word	0x20000968
 8003694:	20000960 	.word	0x20000960
 8003698:	20000e54 	.word	0x20000e54
 800369c:	200009f4 	.word	0x200009f4
 80036a0:	2000096c 	.word	0x2000096c
 80036a4:	20000978 	.word	0x20000978
 80036a8:	20000970 	.word	0x20000970

080036ac <xTaskResumeAll>:
{
 80036ac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80036ae:	4b35      	ldr	r3, [pc, #212]	@ (8003784 <xTaskResumeAll+0xd8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	b943      	cbnz	r3, 80036c6 <xTaskResumeAll+0x1a>
 80036b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	e7fe      	b.n	80036c4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80036c6:	f000 fc9d 	bl	8004004 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80036ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003784 <xTaskResumeAll+0xd8>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	3a01      	subs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d14f      	bne.n	8003778 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003788 <xTaskResumeAll+0xdc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	b90b      	cbnz	r3, 80036e2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80036de:	2400      	movs	r4, #0
 80036e0:	e04b      	b.n	800377a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80036e2:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036e4:	4b29      	ldr	r3, [pc, #164]	@ (800378c <xTaskResumeAll+0xe0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	b31b      	cbz	r3, 8003732 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ea:	4b28      	ldr	r3, [pc, #160]	@ (800378c <xTaskResumeAll+0xe0>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036f0:	f104 0018 	add.w	r0, r4, #24
 80036f4:	f7ff f97a 	bl	80029ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036f8:	1d25      	adds	r5, r4, #4
 80036fa:	4628      	mov	r0, r5
 80036fc:	f7ff f976 	bl	80029ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003700:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003702:	4b23      	ldr	r3, [pc, #140]	@ (8003790 <xTaskResumeAll+0xe4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4298      	cmp	r0, r3
 8003708:	d901      	bls.n	800370e <xTaskResumeAll+0x62>
 800370a:	4b21      	ldr	r3, [pc, #132]	@ (8003790 <xTaskResumeAll+0xe4>)
 800370c:	6018      	str	r0, [r3, #0]
 800370e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003712:	4629      	mov	r1, r5
 8003714:	4b1f      	ldr	r3, [pc, #124]	@ (8003794 <xTaskResumeAll+0xe8>)
 8003716:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800371a:	f7ff f943 	bl	80029a4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800371e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003720:	4b1d      	ldr	r3, [pc, #116]	@ (8003798 <xTaskResumeAll+0xec>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	429a      	cmp	r2, r3
 8003728:	d3dc      	bcc.n	80036e4 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800372a:	4b1c      	ldr	r3, [pc, #112]	@ (800379c <xTaskResumeAll+0xf0>)
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e7d8      	b.n	80036e4 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8003732:	b10c      	cbz	r4, 8003738 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8003734:	f7ff fcc2 	bl	80030bc <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003738:	4b19      	ldr	r3, [pc, #100]	@ (80037a0 <xTaskResumeAll+0xf4>)
 800373a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800373c:	b984      	cbnz	r4, 8003760 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800373e:	4b17      	ldr	r3, [pc, #92]	@ (800379c <xTaskResumeAll+0xf0>)
 8003740:	681c      	ldr	r4, [r3, #0]
 8003742:	b1d4      	cbz	r4, 800377a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8003744:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800374c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003758:	2401      	movs	r4, #1
 800375a:	e00e      	b.n	800377a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800375c:	3c01      	subs	r4, #1
 800375e:	d007      	beq.n	8003770 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8003760:	f7ff ff18 	bl	8003594 <xTaskIncrementTick>
 8003764:	2800      	cmp	r0, #0
 8003766:	d0f9      	beq.n	800375c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8003768:	4b0c      	ldr	r3, [pc, #48]	@ (800379c <xTaskResumeAll+0xf0>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e7f5      	b.n	800375c <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8003770:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <xTaskResumeAll+0xf4>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	e7e2      	b.n	800373e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8003778:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800377a:	f000 fc65 	bl	8004048 <vPortExitCritical>
}
 800377e:	4620      	mov	r0, r4
 8003780:	bd38      	pop	{r3, r4, r5, pc}
 8003782:	bf00      	nop
 8003784:	20000958 	.word	0x20000958
 8003788:	20000980 	.word	0x20000980
 800378c:	200009b0 	.word	0x200009b0
 8003790:	20000978 	.word	0x20000978
 8003794:	200009f4 	.word	0x200009f4
 8003798:	20000e54 	.word	0x20000e54
 800379c:	2000096c 	.word	0x2000096c
 80037a0:	20000970 	.word	0x20000970

080037a4 <vTaskDelay>:
	{
 80037a4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037a6:	b1a8      	cbz	r0, 80037d4 <vTaskDelay+0x30>
 80037a8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80037aa:	4b10      	ldr	r3, [pc, #64]	@ (80037ec <vTaskDelay+0x48>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	b143      	cbz	r3, 80037c2 <vTaskDelay+0x1e>
 80037b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	e7fe      	b.n	80037c0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80037c2:	f7ff fed9 	bl	8003578 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037c6:	2100      	movs	r1, #0
 80037c8:	4620      	mov	r0, r4
 80037ca:	f7ff fdd3 	bl	8003374 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80037ce:	f7ff ff6d 	bl	80036ac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80037d2:	b948      	cbnz	r0, 80037e8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80037d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80037d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	f3bf 8f6f 	isb	sy
	}
 80037e8:	bd10      	pop	{r4, pc}
 80037ea:	bf00      	nop
 80037ec:	20000958 	.word	0x20000958

080037f0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037f0:	4b22      	ldr	r3, [pc, #136]	@ (800387c <vTaskSwitchContext+0x8c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	b11b      	cbz	r3, 80037fe <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80037f6:	4b22      	ldr	r3, [pc, #136]	@ (8003880 <vTaskSwitchContext+0x90>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80037fe:	4b20      	ldr	r3, [pc, #128]	@ (8003880 <vTaskSwitchContext+0x90>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003804:	4b1f      	ldr	r3, [pc, #124]	@ (8003884 <vTaskSwitchContext+0x94>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800380c:	008a      	lsls	r2, r1, #2
 800380e:	491e      	ldr	r1, [pc, #120]	@ (8003888 <vTaskSwitchContext+0x98>)
 8003810:	588a      	ldr	r2, [r1, r2]
 8003812:	b95a      	cbnz	r2, 800382c <vTaskSwitchContext+0x3c>
 8003814:	b10b      	cbz	r3, 800381a <vTaskSwitchContext+0x2a>
 8003816:	3b01      	subs	r3, #1
 8003818:	e7f6      	b.n	8003808 <vTaskSwitchContext+0x18>
 800381a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	e7fe      	b.n	800382a <vTaskSwitchContext+0x3a>
 800382c:	4608      	mov	r0, r1
 800382e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003832:	008a      	lsls	r2, r1, #2
 8003834:	4402      	add	r2, r0
 8003836:	6851      	ldr	r1, [r2, #4]
 8003838:	6849      	ldr	r1, [r1, #4]
 800383a:	6051      	str	r1, [r2, #4]
 800383c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8003840:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8003844:	3208      	adds	r2, #8
 8003846:	4402      	add	r2, r0
 8003848:	4291      	cmp	r1, r2
 800384a:	d00f      	beq.n	800386c <vTaskSwitchContext+0x7c>
 800384c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003850:	0091      	lsls	r1, r2, #2
 8003852:	4a0d      	ldr	r2, [pc, #52]	@ (8003888 <vTaskSwitchContext+0x98>)
 8003854:	440a      	add	r2, r1
 8003856:	6852      	ldr	r2, [r2, #4]
 8003858:	68d1      	ldr	r1, [r2, #12]
 800385a:	4a0c      	ldr	r2, [pc, #48]	@ (800388c <vTaskSwitchContext+0x9c>)
 800385c:	6011      	str	r1, [r2, #0]
 800385e:	4909      	ldr	r1, [pc, #36]	@ (8003884 <vTaskSwitchContext+0x94>)
 8003860:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003862:	6813      	ldr	r3, [r2, #0]
 8003864:	3354      	adds	r3, #84	@ 0x54
 8003866:	4a0a      	ldr	r2, [pc, #40]	@ (8003890 <vTaskSwitchContext+0xa0>)
 8003868:	6013      	str	r3, [r2, #0]
}
 800386a:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800386c:	6848      	ldr	r0, [r1, #4]
 800386e:	4662      	mov	r2, ip
 8003870:	0091      	lsls	r1, r2, #2
 8003872:	4a05      	ldr	r2, [pc, #20]	@ (8003888 <vTaskSwitchContext+0x98>)
 8003874:	440a      	add	r2, r1
 8003876:	6050      	str	r0, [r2, #4]
 8003878:	e7e8      	b.n	800384c <vTaskSwitchContext+0x5c>
 800387a:	bf00      	nop
 800387c:	20000958 	.word	0x20000958
 8003880:	2000096c 	.word	0x2000096c
 8003884:	20000978 	.word	0x20000978
 8003888:	200009f4 	.word	0x200009f4
 800388c:	20000e54 	.word	0x20000e54
 8003890:	20000010 	.word	0x20000010

08003894 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003894:	b158      	cbz	r0, 80038ae <vTaskPlaceOnEventList+0x1a>
{
 8003896:	b510      	push	{r4, lr}
 8003898:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800389a:	4a09      	ldr	r2, [pc, #36]	@ (80038c0 <vTaskPlaceOnEventList+0x2c>)
 800389c:	6811      	ldr	r1, [r2, #0]
 800389e:	3118      	adds	r1, #24
 80038a0:	f7ff f88b 	bl	80029ba <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038a4:	2101      	movs	r1, #1
 80038a6:	4620      	mov	r0, r4
 80038a8:	f7ff fd64 	bl	8003374 <prvAddCurrentTaskToDelayedList>
}
 80038ac:	bd10      	pop	{r4, pc}
 80038ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80038be:	e7fe      	b.n	80038be <vTaskPlaceOnEventList+0x2a>
 80038c0:	20000e54 	.word	0x20000e54

080038c4 <vTaskPlaceOnEventListRestricted>:
	{
 80038c4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80038c6:	b170      	cbz	r0, 80038e6 <vTaskPlaceOnEventListRestricted+0x22>
 80038c8:	460d      	mov	r5, r1
 80038ca:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038cc:	4a0a      	ldr	r2, [pc, #40]	@ (80038f8 <vTaskPlaceOnEventListRestricted+0x34>)
 80038ce:	6811      	ldr	r1, [r2, #0]
 80038d0:	3118      	adds	r1, #24
 80038d2:	f7ff f867 	bl	80029a4 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80038d6:	b10c      	cbz	r4, 80038dc <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80038d8:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038dc:	4621      	mov	r1, r4
 80038de:	4628      	mov	r0, r5
 80038e0:	f7ff fd48 	bl	8003374 <prvAddCurrentTaskToDelayedList>
	}
 80038e4:	bd38      	pop	{r3, r4, r5, pc}
 80038e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80038f6:	e7fe      	b.n	80038f6 <vTaskPlaceOnEventListRestricted+0x32>
 80038f8:	20000e54 	.word	0x20000e54

080038fc <xTaskRemoveFromEventList>:
{
 80038fc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038fe:	68c3      	ldr	r3, [r0, #12]
 8003900:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003902:	b324      	cbz	r4, 800394e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003904:	f104 0518 	add.w	r5, r4, #24
 8003908:	4628      	mov	r0, r5
 800390a:	f7ff f86f 	bl	80029ec <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800390e:	4b18      	ldr	r3, [pc, #96]	@ (8003970 <xTaskRemoveFromEventList+0x74>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	bb2b      	cbnz	r3, 8003960 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003914:	1d25      	adds	r5, r4, #4
 8003916:	4628      	mov	r0, r5
 8003918:	f7ff f868 	bl	80029ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800391c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800391e:	4b15      	ldr	r3, [pc, #84]	@ (8003974 <xTaskRemoveFromEventList+0x78>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4298      	cmp	r0, r3
 8003924:	d901      	bls.n	800392a <xTaskRemoveFromEventList+0x2e>
 8003926:	4b13      	ldr	r3, [pc, #76]	@ (8003974 <xTaskRemoveFromEventList+0x78>)
 8003928:	6018      	str	r0, [r3, #0]
 800392a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800392e:	4629      	mov	r1, r5
 8003930:	4b11      	ldr	r3, [pc, #68]	@ (8003978 <xTaskRemoveFromEventList+0x7c>)
 8003932:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003936:	f7ff f835 	bl	80029a4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800393a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800393c:	4b0f      	ldr	r3, [pc, #60]	@ (800397c <xTaskRemoveFromEventList+0x80>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003942:	429a      	cmp	r2, r3
 8003944:	d911      	bls.n	800396a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8003946:	2001      	movs	r0, #1
 8003948:	4b0d      	ldr	r3, [pc, #52]	@ (8003980 <xTaskRemoveFromEventList+0x84>)
 800394a:	6018      	str	r0, [r3, #0]
}
 800394c:	bd38      	pop	{r3, r4, r5, pc}
 800394e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800395e:	e7fe      	b.n	800395e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003960:	4629      	mov	r1, r5
 8003962:	4808      	ldr	r0, [pc, #32]	@ (8003984 <xTaskRemoveFromEventList+0x88>)
 8003964:	f7ff f81e 	bl	80029a4 <vListInsertEnd>
 8003968:	e7e7      	b.n	800393a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800396a:	2000      	movs	r0, #0
	return xReturn;
 800396c:	e7ee      	b.n	800394c <xTaskRemoveFromEventList+0x50>
 800396e:	bf00      	nop
 8003970:	20000958 	.word	0x20000958
 8003974:	20000978 	.word	0x20000978
 8003978:	200009f4 	.word	0x200009f4
 800397c:	20000e54 	.word	0x20000e54
 8003980:	2000096c 	.word	0x2000096c
 8003984:	200009b0 	.word	0x200009b0

08003988 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003988:	4b03      	ldr	r3, [pc, #12]	@ (8003998 <vTaskInternalSetTimeOutState+0x10>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800398e:	4b03      	ldr	r3, [pc, #12]	@ (800399c <vTaskInternalSetTimeOutState+0x14>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6043      	str	r3, [r0, #4]
}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000968 	.word	0x20000968
 800399c:	2000097c 	.word	0x2000097c

080039a0 <xTaskCheckForTimeOut>:
{
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80039a2:	b1c8      	cbz	r0, 80039d8 <xTaskCheckForTimeOut+0x38>
 80039a4:	460c      	mov	r4, r1
 80039a6:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80039a8:	b1f9      	cbz	r1, 80039ea <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 80039aa:	f000 fb2b 	bl	8004004 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80039ae:	4b1b      	ldr	r3, [pc, #108]	@ (8003a1c <xTaskCheckForTimeOut+0x7c>)
 80039b0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039b2:	686b      	ldr	r3, [r5, #4]
 80039b4:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80039b6:	6822      	ldr	r2, [r4, #0]
 80039b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80039bc:	d026      	beq.n	8003a0c <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039be:	4e18      	ldr	r6, [pc, #96]	@ (8003a20 <xTaskCheckForTimeOut+0x80>)
 80039c0:	6836      	ldr	r6, [r6, #0]
 80039c2:	682f      	ldr	r7, [r5, #0]
 80039c4:	42b7      	cmp	r7, r6
 80039c6:	d001      	beq.n	80039cc <xTaskCheckForTimeOut+0x2c>
 80039c8:	428b      	cmp	r3, r1
 80039ca:	d924      	bls.n	8003a16 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039cc:	4282      	cmp	r2, r0
 80039ce:	d815      	bhi.n	80039fc <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80039d4:	2401      	movs	r4, #1
 80039d6:	e01a      	b.n	8003a0e <xTaskCheckForTimeOut+0x6e>
 80039d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80039e8:	e7fe      	b.n	80039e8 <xTaskCheckForTimeOut+0x48>
 80039ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ee:	f383 8811 	msr	BASEPRI, r3
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80039fa:	e7fe      	b.n	80039fa <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 80039fc:	1a5b      	subs	r3, r3, r1
 80039fe:	4413      	add	r3, r2
 8003a00:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a02:	4628      	mov	r0, r5
 8003a04:	f7ff ffc0 	bl	8003988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a08:	2400      	movs	r4, #0
 8003a0a:	e000      	b.n	8003a0e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8003a0c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003a0e:	f000 fb1b 	bl	8004048 <vPortExitCritical>
}
 8003a12:	4620      	mov	r0, r4
 8003a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8003a16:	2401      	movs	r4, #1
 8003a18:	e7f9      	b.n	8003a0e <xTaskCheckForTimeOut+0x6e>
 8003a1a:	bf00      	nop
 8003a1c:	2000097c 	.word	0x2000097c
 8003a20:	20000968 	.word	0x20000968

08003a24 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003a24:	4b01      	ldr	r3, [pc, #4]	@ (8003a2c <vTaskMissedYield+0x8>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
}
 8003a2a:	4770      	bx	lr
 8003a2c:	2000096c 	.word	0x2000096c

08003a30 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003a30:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <xTaskGetSchedulerState+0x18>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	b133      	cbz	r3, 8003a44 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a36:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <xTaskGetSchedulerState+0x1c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	b10b      	cbz	r3, 8003a40 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a3c:	2000      	movs	r0, #0
	}
 8003a3e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8003a40:	2002      	movs	r0, #2
 8003a42:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a44:	2001      	movs	r0, #1
 8003a46:	4770      	bx	lr
 8003a48:	20000974 	.word	0x20000974
 8003a4c:	20000958 	.word	0x20000958

08003a50 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d03b      	beq.n	8003acc <xTaskPriorityDisinherit+0x7c>
	{
 8003a54:	b538      	push	{r3, r4, r5, lr}
 8003a56:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8003a58:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad4 <xTaskPriorityDisinherit+0x84>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4283      	cmp	r3, r0
 8003a5e:	d008      	beq.n	8003a72 <xTaskPriorityDisinherit+0x22>
 8003a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	e7fe      	b.n	8003a70 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a72:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003a74:	b943      	cbnz	r3, 8003a88 <xTaskPriorityDisinherit+0x38>
 8003a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	e7fe      	b.n	8003a86 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a8c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003a8e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8003a90:	4291      	cmp	r1, r2
 8003a92:	d01d      	beq.n	8003ad0 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a94:	b10b      	cbz	r3, 8003a9a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8003a96:	2000      	movs	r0, #0
	}
 8003a98:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a9a:	1d05      	adds	r5, r0, #4
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	f7fe ffa5 	bl	80029ec <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003aa2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003aa4:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa6:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8003aaa:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <xTaskPriorityDisinherit+0x88>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4298      	cmp	r0, r3
 8003ab2:	d901      	bls.n	8003ab8 <xTaskPriorityDisinherit+0x68>
 8003ab4:	4b08      	ldr	r3, [pc, #32]	@ (8003ad8 <xTaskPriorityDisinherit+0x88>)
 8003ab6:	6018      	str	r0, [r3, #0]
 8003ab8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003abc:	4629      	mov	r1, r5
 8003abe:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <xTaskPriorityDisinherit+0x8c>)
 8003ac0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003ac4:	f7fe ff6e 	bl	80029a4 <vListInsertEnd>
					xReturn = pdTRUE;
 8003ac8:	2001      	movs	r0, #1
 8003aca:	e7e5      	b.n	8003a98 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8003acc:	2000      	movs	r0, #0
	}
 8003ace:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	e7e1      	b.n	8003a98 <xTaskPriorityDisinherit+0x48>
 8003ad4:	20000e54 	.word	0x20000e54
 8003ad8:	20000978 	.word	0x20000978
 8003adc:	200009f4 	.word	0x200009f4

08003ae0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ae0:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <prvGetNextExpireTime+0x1c>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	6813      	ldr	r3, [r2, #0]
 8003ae6:	b92b      	cbnz	r3, 8003af4 <prvGetNextExpireTime+0x14>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003aec:	b923      	cbnz	r3, 8003af8 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aee:	68d3      	ldr	r3, [r2, #12]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003af4:	2300      	movs	r3, #0
 8003af6:	e7f8      	b.n	8003aea <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003af8:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8003afa:	4770      	bx	lr
 8003afc:	20000f58 	.word	0x20000f58

08003b00 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003b00:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b02:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b04:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003b06:	4291      	cmp	r1, r2
 8003b08:	d80c      	bhi.n	8003b24 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b0a:	1ad2      	subs	r2, r2, r3
 8003b0c:	6983      	ldr	r3, [r0, #24]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d301      	bcc.n	8003b16 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003b12:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8003b14:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b16:	1d01      	adds	r1, r0, #4
 8003b18:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <prvInsertTimerInActiveList+0x40>)
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	f7fe ff4d 	bl	80029ba <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8003b20:	2000      	movs	r0, #0
 8003b22:	e7f7      	b.n	8003b14 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d201      	bcs.n	8003b2c <prvInsertTimerInActiveList+0x2c>
 8003b28:	4299      	cmp	r1, r3
 8003b2a:	d206      	bcs.n	8003b3a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b2c:	1d01      	adds	r1, r0, #4
 8003b2e:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <prvInsertTimerInActiveList+0x44>)
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	f7fe ff42 	bl	80029ba <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8003b36:	2000      	movs	r0, #0
 8003b38:	e7ec      	b.n	8003b14 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8003b3a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8003b3c:	e7ea      	b.n	8003b14 <prvInsertTimerInActiveList+0x14>
 8003b3e:	bf00      	nop
 8003b40:	20000f54 	.word	0x20000f54
 8003b44:	20000f58 	.word	0x20000f58

08003b48 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003b48:	b530      	push	{r4, r5, lr}
 8003b4a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003b4c:	f000 fa5a 	bl	8004004 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003b50:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <prvCheckForValidListAndQueue+0x50>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	b11b      	cbz	r3, 8003b5e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b56:	f000 fa77 	bl	8004048 <vPortExitCritical>
}
 8003b5a:	b003      	add	sp, #12
 8003b5c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8003b5e:	4d0f      	ldr	r5, [pc, #60]	@ (8003b9c <prvCheckForValidListAndQueue+0x54>)
 8003b60:	4628      	mov	r0, r5
 8003b62:	f7fe ff11 	bl	8002988 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003b66:	4c0e      	ldr	r4, [pc, #56]	@ (8003ba0 <prvCheckForValidListAndQueue+0x58>)
 8003b68:	4620      	mov	r0, r4
 8003b6a:	f7fe ff0d 	bl	8002988 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <prvCheckForValidListAndQueue+0x5c>)
 8003b70:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003b72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba8 <prvCheckForValidListAndQueue+0x60>)
 8003b74:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b76:	2300      	movs	r3, #0
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bac <prvCheckForValidListAndQueue+0x64>)
 8003b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb0 <prvCheckForValidListAndQueue+0x68>)
 8003b7e:	2110      	movs	r1, #16
 8003b80:	200a      	movs	r0, #10
 8003b82:	f7ff f839 	bl	8002bf8 <xQueueGenericCreateStatic>
 8003b86:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <prvCheckForValidListAndQueue+0x50>)
 8003b88:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	d0e3      	beq.n	8003b56 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b8e:	4909      	ldr	r1, [pc, #36]	@ (8003bb4 <prvCheckForValidListAndQueue+0x6c>)
 8003b90:	f7ff fa56 	bl	8003040 <vQueueAddToRegistry>
 8003b94:	e7df      	b.n	8003b56 <prvCheckForValidListAndQueue+0xe>
 8003b96:	bf00      	nop
 8003b98:	20000f50 	.word	0x20000f50
 8003b9c:	20000f70 	.word	0x20000f70
 8003ba0:	20000f5c 	.word	0x20000f5c
 8003ba4:	20000f58 	.word	0x20000f58
 8003ba8:	20000f54 	.word	0x20000f54
 8003bac:	20000e58 	.word	0x20000e58
 8003bb0:	20000ea8 	.word	0x20000ea8
 8003bb4:	08004758 	.word	0x08004758

08003bb8 <xTimerCreateTimerTask>:
{
 8003bb8:	b510      	push	{r4, lr}
 8003bba:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8003bbc:	f7ff ffc4 	bl	8003b48 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8003bc0:	4b12      	ldr	r3, [pc, #72]	@ (8003c0c <xTimerCreateTimerTask+0x54>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	b1cb      	cbz	r3, 8003bfa <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003bc6:	2400      	movs	r4, #0
 8003bc8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003bca:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003bcc:	aa07      	add	r2, sp, #28
 8003bce:	a906      	add	r1, sp, #24
 8003bd0:	a805      	add	r0, sp, #20
 8003bd2:	f7fe fecd 	bl	8002970 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003bd6:	9b05      	ldr	r3, [sp, #20]
 8003bd8:	9302      	str	r3, [sp, #8]
 8003bda:	9b06      	ldr	r3, [sp, #24]
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	2302      	movs	r3, #2
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	4623      	mov	r3, r4
 8003be4:	9a07      	ldr	r2, [sp, #28]
 8003be6:	490a      	ldr	r1, [pc, #40]	@ (8003c10 <xTimerCreateTimerTask+0x58>)
 8003be8:	480a      	ldr	r0, [pc, #40]	@ (8003c14 <xTimerCreateTimerTask+0x5c>)
 8003bea:	f7ff fc01 	bl	80033f0 <xTaskCreateStatic>
 8003bee:	4b0a      	ldr	r3, [pc, #40]	@ (8003c18 <xTimerCreateTimerTask+0x60>)
 8003bf0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8003bf2:	b110      	cbz	r0, 8003bfa <xTimerCreateTimerTask+0x42>
}
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	b008      	add	sp, #32
 8003bf8:	bd10      	pop	{r4, pc}
 8003bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8003c0a:	e7fe      	b.n	8003c0a <xTimerCreateTimerTask+0x52>
 8003c0c:	20000f50 	.word	0x20000f50
 8003c10:	08004760 	.word	0x08004760
 8003c14:	08003f1d 	.word	0x08003f1d
 8003c18:	20000f4c 	.word	0x20000f4c

08003c1c <xTimerGenericCommand>:
	configASSERT( xTimer );
 8003c1c:	b1b8      	cbz	r0, 8003c4e <xTimerGenericCommand+0x32>
 8003c1e:	469c      	mov	ip, r3
 8003c20:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8003c22:	4818      	ldr	r0, [pc, #96]	@ (8003c84 <xTimerGenericCommand+0x68>)
 8003c24:	6800      	ldr	r0, [r0, #0]
 8003c26:	b358      	cbz	r0, 8003c80 <xTimerGenericCommand+0x64>
{
 8003c28:	b500      	push	{lr}
 8003c2a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8003c2c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c2e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c30:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c32:	2905      	cmp	r1, #5
 8003c34:	dc1c      	bgt.n	8003c70 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c36:	f7ff fefb 	bl	8003a30 <xTaskGetSchedulerState>
 8003c3a:	2802      	cmp	r0, #2
 8003c3c:	d010      	beq.n	8003c60 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c3e:	2300      	movs	r3, #0
 8003c40:	461a      	mov	r2, r3
 8003c42:	4669      	mov	r1, sp
 8003c44:	480f      	ldr	r0, [pc, #60]	@ (8003c84 <xTimerGenericCommand+0x68>)
 8003c46:	6800      	ldr	r0, [r0, #0]
 8003c48:	f7ff f820 	bl	8002c8c <xQueueGenericSend>
 8003c4c:	e015      	b.n	8003c7a <xTimerGenericCommand+0x5e>
 8003c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8003c5e:	e7fe      	b.n	8003c5e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c60:	2300      	movs	r3, #0
 8003c62:	9a06      	ldr	r2, [sp, #24]
 8003c64:	4669      	mov	r1, sp
 8003c66:	4807      	ldr	r0, [pc, #28]	@ (8003c84 <xTimerGenericCommand+0x68>)
 8003c68:	6800      	ldr	r0, [r0, #0]
 8003c6a:	f7ff f80f 	bl	8002c8c <xQueueGenericSend>
 8003c6e:	e004      	b.n	8003c7a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c70:	2300      	movs	r3, #0
 8003c72:	4662      	mov	r2, ip
 8003c74:	4669      	mov	r1, sp
 8003c76:	f7ff f8cd 	bl	8002e14 <xQueueGenericSendFromISR>
}
 8003c7a:	b005      	add	sp, #20
 8003c7c:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8003c80:	2000      	movs	r0, #0
}
 8003c82:	4770      	bx	lr
 8003c84:	20000f50 	.word	0x20000f50

08003c88 <prvSwitchTimerLists>:
{
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cfc <prvSwitchTimerLists+0x74>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	b362      	cbz	r2, 8003cee <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c98:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c9a:	1d25      	adds	r5, r4, #4
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	f7fe fea5 	bl	80029ec <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ca2:	6a23      	ldr	r3, [r4, #32]
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ca8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003cac:	f013 0f04 	tst.w	r3, #4
 8003cb0:	d0ec      	beq.n	8003c8c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003cb2:	69a3      	ldr	r3, [r4, #24]
 8003cb4:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8003cb6:	429e      	cmp	r6, r3
 8003cb8:	d207      	bcs.n	8003cca <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003cba:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cbc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003cfc <prvSwitchTimerLists+0x74>)
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	f7fe fe79 	bl	80029ba <vListInsert>
 8003cc8:	e7e0      	b.n	8003c8c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cca:	2100      	movs	r1, #0
 8003ccc:	9100      	str	r1, [sp, #0]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4632      	mov	r2, r6
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f7ff ffa2 	bl	8003c1c <xTimerGenericCommand>
				configASSERT( xResult );
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d1d7      	bne.n	8003c8c <prvSwitchTimerLists+0x4>
 8003cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	e7fe      	b.n	8003cec <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8003cee:	4a04      	ldr	r2, [pc, #16]	@ (8003d00 <prvSwitchTimerLists+0x78>)
 8003cf0:	6810      	ldr	r0, [r2, #0]
 8003cf2:	4902      	ldr	r1, [pc, #8]	@ (8003cfc <prvSwitchTimerLists+0x74>)
 8003cf4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8003cf6:	6013      	str	r3, [r2, #0]
}
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
 8003cfc:	20000f58 	.word	0x20000f58
 8003d00:	20000f54 	.word	0x20000f54

08003d04 <prvSampleTimeNow>:
{
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8003d08:	f7ff fc3e 	bl	8003588 <xTaskGetTickCount>
 8003d0c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8003d0e:	4b07      	ldr	r3, [pc, #28]	@ (8003d2c <prvSampleTimeNow+0x28>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4283      	cmp	r3, r0
 8003d14:	d805      	bhi.n	8003d22 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8003d1a:	4b04      	ldr	r3, [pc, #16]	@ (8003d2c <prvSampleTimeNow+0x28>)
 8003d1c:	601c      	str	r4, [r3, #0]
}
 8003d1e:	4620      	mov	r0, r4
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8003d22:	f7ff ffb1 	bl	8003c88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	602b      	str	r3, [r5, #0]
 8003d2a:	e7f6      	b.n	8003d1a <prvSampleTimeNow+0x16>
 8003d2c:	20000f48 	.word	0x20000f48

08003d30 <prvProcessExpiredTimer>:
{
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	4606      	mov	r6, r0
 8003d36:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d38:	4917      	ldr	r1, [pc, #92]	@ (8003d98 <prvProcessExpiredTimer+0x68>)
 8003d3a:	6809      	ldr	r1, [r1, #0]
 8003d3c:	68c9      	ldr	r1, [r1, #12]
 8003d3e:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d40:	1d20      	adds	r0, r4, #4
 8003d42:	f7fe fe53 	bl	80029ec <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d46:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8003d4a:	f01c 0f04 	tst.w	ip, #4
 8003d4e:	d108      	bne.n	8003d62 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d50:	f02c 0c01 	bic.w	ip, ip, #1
 8003d54:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d58:	6a23      	ldr	r3, [r4, #32]
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	4798      	blx	r3
}
 8003d5e:	b002      	add	sp, #8
 8003d60:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d62:	69a1      	ldr	r1, [r4, #24]
 8003d64:	4633      	mov	r3, r6
 8003d66:	462a      	mov	r2, r5
 8003d68:	4431      	add	r1, r6
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f7ff fec8 	bl	8003b00 <prvInsertTimerInActiveList>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d0f1      	beq.n	8003d58 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d74:	2100      	movs	r1, #0
 8003d76:	9100      	str	r1, [sp, #0]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4632      	mov	r2, r6
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f7ff ff4d 	bl	8003c1c <xTimerGenericCommand>
			configASSERT( xResult );
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d1e8      	bne.n	8003d58 <prvProcessExpiredTimer+0x28>
 8003d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	e7fe      	b.n	8003d96 <prvProcessExpiredTimer+0x66>
 8003d98:	20000f58 	.word	0x20000f58

08003d9c <prvProcessTimerOrBlockTask>:
{
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	4606      	mov	r6, r0
 8003da2:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8003da4:	f7ff fbe8 	bl	8003578 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003da8:	a801      	add	r0, sp, #4
 8003daa:	f7ff ffab 	bl	8003d04 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8003dae:	9b01      	ldr	r3, [sp, #4]
 8003db0:	bb33      	cbnz	r3, 8003e00 <prvProcessTimerOrBlockTask+0x64>
 8003db2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003db4:	b9e4      	cbnz	r4, 8003df0 <prvProcessTimerOrBlockTask+0x54>
 8003db6:	42b0      	cmp	r0, r6
 8003db8:	d213      	bcs.n	8003de2 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003dba:	4622      	mov	r2, r4
 8003dbc:	1b71      	subs	r1, r6, r5
 8003dbe:	4b12      	ldr	r3, [pc, #72]	@ (8003e08 <prvProcessTimerOrBlockTask+0x6c>)
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	f7ff f951 	bl	8003068 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003dc6:	f7ff fc71 	bl	80036ac <xTaskResumeAll>
 8003dca:	b9d8      	cbnz	r0, 8003e04 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8003dcc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003dd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	e010      	b.n	8003e04 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8003de2:	f7ff fc63 	bl	80036ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003de6:	4629      	mov	r1, r5
 8003de8:	4630      	mov	r0, r6
 8003dea:	f7ff ffa1 	bl	8003d30 <prvProcessExpiredTimer>
 8003dee:	e009      	b.n	8003e04 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003df0:	4a06      	ldr	r2, [pc, #24]	@ (8003e0c <prvProcessTimerOrBlockTask+0x70>)
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	b90a      	cbnz	r2, 8003dfc <prvProcessTimerOrBlockTask+0x60>
 8003df8:	2401      	movs	r4, #1
 8003dfa:	e7de      	b.n	8003dba <prvProcessTimerOrBlockTask+0x1e>
 8003dfc:	461c      	mov	r4, r3
 8003dfe:	e7dc      	b.n	8003dba <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8003e00:	f7ff fc54 	bl	80036ac <xTaskResumeAll>
}
 8003e04:	b002      	add	sp, #8
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	20000f50 	.word	0x20000f50
 8003e0c:	20000f54 	.word	0x20000f54

08003e10 <prvProcessReceivedCommands>:
{
 8003e10:	b510      	push	{r4, lr}
 8003e12:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e14:	e002      	b.n	8003e1c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e16:	9b04      	ldr	r3, [sp, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	da0f      	bge.n	8003e3c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	a904      	add	r1, sp, #16
 8003e20:	4b3d      	ldr	r3, [pc, #244]	@ (8003f18 <prvProcessReceivedCommands+0x108>)
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	f7ff f85d 	bl	8002ee2 <xQueueReceive>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d073      	beq.n	8003f14 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e2c:	9b04      	ldr	r3, [sp, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	daf1      	bge.n	8003e16 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e32:	9907      	ldr	r1, [sp, #28]
 8003e34:	9806      	ldr	r0, [sp, #24]
 8003e36:	9b05      	ldr	r3, [sp, #20]
 8003e38:	4798      	blx	r3
 8003e3a:	e7ec      	b.n	8003e16 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e3c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e3e:	6963      	ldr	r3, [r4, #20]
 8003e40:	b113      	cbz	r3, 8003e48 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e42:	1d20      	adds	r0, r4, #4
 8003e44:	f7fe fdd2 	bl	80029ec <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e48:	a803      	add	r0, sp, #12
 8003e4a:	f7ff ff5b 	bl	8003d04 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8003e4e:	9b04      	ldr	r3, [sp, #16]
 8003e50:	2b09      	cmp	r3, #9
 8003e52:	d8e3      	bhi.n	8003e1c <prvProcessReceivedCommands+0xc>
 8003e54:	e8df f003 	tbb	[pc, r3]
 8003e58:	30050505 	.word	0x30050505
 8003e5c:	05055037 	.word	0x05055037
 8003e60:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e62:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e6e:	9b05      	ldr	r3, [sp, #20]
 8003e70:	69a1      	ldr	r1, [r4, #24]
 8003e72:	4602      	mov	r2, r0
 8003e74:	4419      	add	r1, r3
 8003e76:	4620      	mov	r0, r4
 8003e78:	f7ff fe42 	bl	8003b00 <prvInsertTimerInActiveList>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d0cd      	beq.n	8003e1c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e80:	6a23      	ldr	r3, [r4, #32]
 8003e82:	4620      	mov	r0, r4
 8003e84:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e86:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003e8a:	f013 0f04 	tst.w	r3, #4
 8003e8e:	d0c5      	beq.n	8003e1c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e90:	69a2      	ldr	r2, [r4, #24]
 8003e92:	2100      	movs	r1, #0
 8003e94:	9100      	str	r1, [sp, #0]
 8003e96:	460b      	mov	r3, r1
 8003e98:	9805      	ldr	r0, [sp, #20]
 8003e9a:	4402      	add	r2, r0
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f7ff febd 	bl	8003c1c <xTimerGenericCommand>
							configASSERT( xResult );
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	d1ba      	bne.n	8003e1c <prvProcessReceivedCommands+0xc>
 8003ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	e7fe      	b.n	8003eb6 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003eb8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8003ec4:	e7aa      	b.n	8003e1c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ec6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ed2:	9905      	ldr	r1, [sp, #20]
 8003ed4:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ed6:	b131      	cbz	r1, 8003ee6 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ed8:	4603      	mov	r3, r0
 8003eda:	4602      	mov	r2, r0
 8003edc:	4401      	add	r1, r0
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f7ff fe0e 	bl	8003b00 <prvInsertTimerInActiveList>
					break;
 8003ee4:	e79a      	b.n	8003e1c <prvProcessReceivedCommands+0xc>
 8003ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ef6:	e7fe      	b.n	8003ef6 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ef8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003efc:	f013 0f02 	tst.w	r3, #2
 8003f00:	d004      	beq.n	8003f0c <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8003f0a:	e787      	b.n	8003e1c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	f000 fab3 	bl	8004478 <vPortFree>
 8003f12:	e783      	b.n	8003e1c <prvProcessReceivedCommands+0xc>
}
 8003f14:	b008      	add	sp, #32
 8003f16:	bd10      	pop	{r4, pc}
 8003f18:	20000f50 	.word	0x20000f50

08003f1c <prvTimerTask>:
{
 8003f1c:	b500      	push	{lr}
 8003f1e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f20:	a801      	add	r0, sp, #4
 8003f22:	f7ff fddd 	bl	8003ae0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f26:	9901      	ldr	r1, [sp, #4]
 8003f28:	f7ff ff38 	bl	8003d9c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8003f2c:	f7ff ff70 	bl	8003e10 <prvProcessReceivedCommands>
	for( ;; )
 8003f30:	e7f6      	b.n	8003f20 <prvTimerTask+0x4>
	...

08003f34 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f34:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <prvTaskExitError+0x3c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f42:	d008      	beq.n	8003f56 <prvTaskExitError+0x22>
 8003f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	e7fe      	b.n	8003f54 <prvTaskExitError+0x20>
 8003f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f66:	9b01      	ldr	r3, [sp, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0fc      	beq.n	8003f66 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f6c:	b002      	add	sp, #8
 8003f6e:	4770      	bx	lr
 8003f70:	2000000c 	.word	0x2000000c

08003f74 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003f74:	4808      	ldr	r0, [pc, #32]	@ (8003f98 <prvPortStartFirstTask+0x24>)
 8003f76:	6800      	ldr	r0, [r0, #0]
 8003f78:	6800      	ldr	r0, [r0, #0]
 8003f7a:	f380 8808 	msr	MSP, r0
 8003f7e:	f04f 0000 	mov.w	r0, #0
 8003f82:	f380 8814 	msr	CONTROL, r0
 8003f86:	b662      	cpsie	i
 8003f88:	b661      	cpsie	f
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	df00      	svc	0
 8003f94:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f96:	0000      	.short	0x0000
 8003f98:	e000ed08 	.word	0xe000ed08

08003f9c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f9c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003fac <vPortEnableVFP+0x10>
 8003fa0:	6801      	ldr	r1, [r0, #0]
 8003fa2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003fa6:	6001      	str	r1, [r0, #0]
 8003fa8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003faa:	0000      	.short	0x0000
 8003fac:	e000ed88 	.word	0xe000ed88

08003fb0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fb4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fb8:	f021 0101 	bic.w	r1, r1, #1
 8003fbc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fc0:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <pxPortInitialiseStack+0x28>)
 8003fc2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fc6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fca:	f06f 0302 	mvn.w	r3, #2
 8003fce:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003fd2:	3844      	subs	r0, #68	@ 0x44
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	08003f35 	.word	0x08003f35
 8003fdc:	00000000 	.word	0x00000000

08003fe0 <SVC_Handler>:
	__asm volatile (
 8003fe0:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <pxCurrentTCBConst2>)
 8003fe2:	6819      	ldr	r1, [r3, #0]
 8003fe4:	6808      	ldr	r0, [r1, #0]
 8003fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fea:	f380 8809 	msr	PSP, r0
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	f380 8811 	msr	BASEPRI, r0
 8003ffa:	4770      	bx	lr
 8003ffc:	f3af 8000 	nop.w

08004000 <pxCurrentTCBConst2>:
 8004000:	20000e54 	.word	0x20000e54

08004004 <vPortEnterCritical>:
 8004004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004014:	4a0b      	ldr	r2, [pc, #44]	@ (8004044 <vPortEnterCritical+0x40>)
 8004016:	6813      	ldr	r3, [r2, #0]
 8004018:	3301      	adds	r3, #1
 800401a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800401c:	2b01      	cmp	r3, #1
 800401e:	d000      	beq.n	8004022 <vPortEnterCritical+0x1e>
}
 8004020:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004022:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004026:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800402a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800402e:	d0f7      	beq.n	8004020 <vPortEnterCritical+0x1c>
 8004030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	e7fe      	b.n	8004040 <vPortEnterCritical+0x3c>
 8004042:	bf00      	nop
 8004044:	2000000c 	.word	0x2000000c

08004048 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004048:	4b09      	ldr	r3, [pc, #36]	@ (8004070 <vPortExitCritical+0x28>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	b943      	cbnz	r3, 8004060 <vPortExitCritical+0x18>
 800404e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	e7fe      	b.n	800405e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004060:	3b01      	subs	r3, #1
 8004062:	4a03      	ldr	r2, [pc, #12]	@ (8004070 <vPortExitCritical+0x28>)
 8004064:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004066:	b90b      	cbnz	r3, 800406c <vPortExitCritical+0x24>
	__asm volatile
 8004068:	f383 8811 	msr	BASEPRI, r3
}
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	2000000c 	.word	0x2000000c
	...

08004080 <PendSV_Handler>:
	__asm volatile
 8004080:	f3ef 8009 	mrs	r0, PSP
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <pxCurrentTCBConst>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	f01e 0f10 	tst.w	lr, #16
 8004090:	bf08      	it	eq
 8004092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409a:	6010      	str	r0, [r2, #0]
 800409c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80040a4:	f380 8811 	msr	BASEPRI, r0
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f7ff fb9e 	bl	80037f0 <vTaskSwitchContext>
 80040b4:	f04f 0000 	mov.w	r0, #0
 80040b8:	f380 8811 	msr	BASEPRI, r0
 80040bc:	bc09      	pop	{r0, r3}
 80040be:	6819      	ldr	r1, [r3, #0]
 80040c0:	6808      	ldr	r0, [r1, #0]
 80040c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c6:	f01e 0f10 	tst.w	lr, #16
 80040ca:	bf08      	it	eq
 80040cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040d0:	f380 8809 	msr	PSP, r0
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst>:
 80040e0:	20000e54 	.word	0x20000e54

080040e4 <xPortSysTickHandler>:
{
 80040e4:	b508      	push	{r3, lr}
	__asm volatile
 80040e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80040f6:	f7ff fa4d 	bl	8003594 <xTaskIncrementTick>
 80040fa:	b128      	cbz	r0, 8004108 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004104:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8004108:	2300      	movs	r3, #0
 800410a:	f383 8811 	msr	BASEPRI, r3
}
 800410e:	bd08      	pop	{r3, pc}

08004110 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004110:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004114:	2300      	movs	r3, #0
 8004116:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004118:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800411a:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <vPortSetupTimerInterrupt+0x20>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4905      	ldr	r1, [pc, #20]	@ (8004134 <vPortSetupTimerInterrupt+0x24>)
 8004120:	fba1 1303 	umull	r1, r3, r1, r3
 8004124:	099b      	lsrs	r3, r3, #6
 8004126:	3b01      	subs	r3, #1
 8004128:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800412a:	2307      	movs	r3, #7
 800412c:	6113      	str	r3, [r2, #16]
}
 800412e:	4770      	bx	lr
 8004130:	20000000 	.word	0x20000000
 8004134:	10624dd3 	.word	0x10624dd3

08004138 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004138:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800413c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8004140:	4b3d      	ldr	r3, [pc, #244]	@ (8004238 <xPortStartScheduler+0x100>)
 8004142:	429a      	cmp	r2, r3
 8004144:	d01c      	beq.n	8004180 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004146:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800414a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800414e:	4b3b      	ldr	r3, [pc, #236]	@ (800423c <xPortStartScheduler+0x104>)
 8004150:	429a      	cmp	r2, r3
 8004152:	d01e      	beq.n	8004192 <xPortStartScheduler+0x5a>
{
 8004154:	b530      	push	{r4, r5, lr}
 8004156:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004158:	4b39      	ldr	r3, [pc, #228]	@ (8004240 <xPortStartScheduler+0x108>)
 800415a:	781a      	ldrb	r2, [r3, #0]
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004160:	22ff      	movs	r2, #255	@ 0xff
 8004162:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800416c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004170:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004174:	4a33      	ldr	r2, [pc, #204]	@ (8004244 <xPortStartScheduler+0x10c>)
 8004176:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004178:	4b33      	ldr	r3, [pc, #204]	@ (8004248 <xPortStartScheduler+0x110>)
 800417a:	2207      	movs	r2, #7
 800417c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800417e:	e01b      	b.n	80041b8 <xPortStartScheduler+0x80>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004190:	e7fe      	b.n	8004190 <xPortStartScheduler+0x58>
 8004192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041a2:	e7fe      	b.n	80041a2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 80041a4:	4a28      	ldr	r2, [pc, #160]	@ (8004248 <xPortStartScheduler+0x110>)
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80041bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80041c0:	d1f0      	bne.n	80041a4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041c2:	4b21      	ldr	r3, [pc, #132]	@ (8004248 <xPortStartScheduler+0x110>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d008      	beq.n	80041dc <xPortStartScheduler+0xa4>
 80041ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	e7fe      	b.n	80041da <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	4a1a      	ldr	r2, [pc, #104]	@ (8004248 <xPortStartScheduler+0x110>)
 80041e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041e6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041e8:	9b01      	ldr	r3, [sp, #4]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	4a14      	ldr	r2, [pc, #80]	@ (8004240 <xPortStartScheduler+0x108>)
 80041ee:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041f0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 80041f4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80041f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041fc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004200:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8004204:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004208:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800420c:	f7ff ff80 	bl	8004110 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004210:	2500      	movs	r5, #0
 8004212:	4b0e      	ldr	r3, [pc, #56]	@ (800424c <xPortStartScheduler+0x114>)
 8004214:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8004216:	f7ff fec1 	bl	8003f9c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800421a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800421e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004222:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8004226:	f7ff fea5 	bl	8003f74 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800422a:	f7ff fae1 	bl	80037f0 <vTaskSwitchContext>
	prvTaskExitError();
 800422e:	f7ff fe81 	bl	8003f34 <prvTaskExitError>
}
 8004232:	4628      	mov	r0, r5
 8004234:	b003      	add	sp, #12
 8004236:	bd30      	pop	{r4, r5, pc}
 8004238:	410fc271 	.word	0x410fc271
 800423c:	410fc270 	.word	0x410fc270
 8004240:	e000e400 	.word	0xe000e400
 8004244:	20000f88 	.word	0x20000f88
 8004248:	20000f84 	.word	0x20000f84
 800424c:	2000000c 	.word	0x2000000c

08004250 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004250:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004254:	2b0f      	cmp	r3, #15
 8004256:	d90f      	bls.n	8004278 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004258:	4a11      	ldr	r2, [pc, #68]	@ (80042a0 <vPortValidateInterruptPriority+0x50>)
 800425a:	5c9b      	ldrb	r3, [r3, r2]
 800425c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800425e:	4a11      	ldr	r2, [pc, #68]	@ (80042a4 <vPortValidateInterruptPriority+0x54>)
 8004260:	7812      	ldrb	r2, [r2, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d908      	bls.n	8004278 <vPortValidateInterruptPriority+0x28>
 8004266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	e7fe      	b.n	8004276 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004278:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800427c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8004280:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004284:	4a08      	ldr	r2, [pc, #32]	@ (80042a8 <vPortValidateInterruptPriority+0x58>)
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	4293      	cmp	r3, r2
 800428a:	d908      	bls.n	800429e <vPortValidateInterruptPriority+0x4e>
 800428c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	e7fe      	b.n	800429c <vPortValidateInterruptPriority+0x4c>
	}
 800429e:	4770      	bx	lr
 80042a0:	e000e3f0 	.word	0xe000e3f0
 80042a4:	20000f88 	.word	0x20000f88
 80042a8:	20000f84 	.word	0x20000f84

080042ac <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042ac:	4a12      	ldr	r2, [pc, #72]	@ (80042f8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042ae:	f012 0f07 	tst.w	r2, #7
 80042b2:	d01e      	beq.n	80042f2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042b4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042b6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042ba:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 80042be:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042c0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042c2:	480e      	ldr	r0, [pc, #56]	@ (80042fc <prvHeapInit+0x50>)
 80042c4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042c6:	2100      	movs	r1, #0
 80042c8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042ca:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80042cc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042ce:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80042d2:	480b      	ldr	r0, [pc, #44]	@ (8004300 <prvHeapInit+0x54>)
 80042d4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80042d6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042d8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042da:	1a99      	subs	r1, r3, r2
 80042dc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042de:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042e0:	4b08      	ldr	r3, [pc, #32]	@ (8004304 <prvHeapInit+0x58>)
 80042e2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042e4:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <prvHeapInit+0x5c>)
 80042e6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042e8:	4b08      	ldr	r3, [pc, #32]	@ (800430c <prvHeapInit+0x60>)
 80042ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80042ee:	601a      	str	r2, [r3, #0]
}
 80042f0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042f2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80042f6:	e7e4      	b.n	80042c2 <prvHeapInit+0x16>
 80042f8:	20000fac 	.word	0x20000fac
 80042fc:	20000fa4 	.word	0x20000fa4
 8004300:	20000fa0 	.word	0x20000fa0
 8004304:	20000f98 	.word	0x20000f98
 8004308:	20000f9c 	.word	0x20000f9c
 800430c:	20000f8c 	.word	0x20000f8c

08004310 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004310:	4b16      	ldr	r3, [pc, #88]	@ (800436c <prvInsertBlockIntoFreeList+0x5c>)
 8004312:	461a      	mov	r2, r3
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4283      	cmp	r3, r0
 8004318:	d3fb      	bcc.n	8004312 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800431a:	6851      	ldr	r1, [r2, #4]
 800431c:	eb02 0c01 	add.w	ip, r2, r1
 8004320:	4584      	cmp	ip, r0
 8004322:	d009      	beq.n	8004338 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004324:	6841      	ldr	r1, [r0, #4]
 8004326:	eb00 0c01 	add.w	ip, r0, r1
 800432a:	4563      	cmp	r3, ip
 800432c:	d009      	beq.n	8004342 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800432e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004330:	4290      	cmp	r0, r2
 8004332:	d019      	beq.n	8004368 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004334:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8004336:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004338:	6840      	ldr	r0, [r0, #4]
 800433a:	4401      	add	r1, r0
 800433c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800433e:	4610      	mov	r0, r2
 8004340:	e7f0      	b.n	8004324 <prvInsertBlockIntoFreeList+0x14>
{
 8004342:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004344:	4c0a      	ldr	r4, [pc, #40]	@ (8004370 <prvInsertBlockIntoFreeList+0x60>)
 8004346:	6824      	ldr	r4, [r4, #0]
 8004348:	42a3      	cmp	r3, r4
 800434a:	d00b      	beq.n	8004364 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4419      	add	r1, r3
 8004350:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004352:	6813      	ldr	r3, [r2, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8004358:	4290      	cmp	r0, r2
 800435a:	d000      	beq.n	800435e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800435c:	6010      	str	r0, [r2, #0]
	}
}
 800435e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004362:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004364:	6004      	str	r4, [r0, #0]
 8004366:	e7f7      	b.n	8004358 <prvInsertBlockIntoFreeList+0x48>
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000fa4 	.word	0x20000fa4
 8004370:	20000fa0 	.word	0x20000fa0

08004374 <pvPortMalloc>:
{
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004378:	f7ff f8fe 	bl	8003578 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800437c:	4b38      	ldr	r3, [pc, #224]	@ (8004460 <pvPortMalloc+0xec>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	b1b3      	cbz	r3, 80043b0 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004382:	4b38      	ldr	r3, [pc, #224]	@ (8004464 <pvPortMalloc+0xf0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	421c      	tst	r4, r3
 8004388:	d150      	bne.n	800442c <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 800438a:	2c00      	cmp	r4, #0
 800438c:	d050      	beq.n	8004430 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800438e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004392:	f014 0f07 	tst.w	r4, #7
 8004396:	d002      	beq.n	800439e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004398:	f022 0207 	bic.w	r2, r2, #7
 800439c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800439e:	2a00      	cmp	r2, #0
 80043a0:	d055      	beq.n	800444e <pvPortMalloc+0xda>
 80043a2:	4b31      	ldr	r3, [pc, #196]	@ (8004468 <pvPortMalloc+0xf4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d353      	bcc.n	8004452 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 80043aa:	4930      	ldr	r1, [pc, #192]	@ (800446c <pvPortMalloc+0xf8>)
 80043ac:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ae:	e004      	b.n	80043ba <pvPortMalloc+0x46>
			prvHeapInit();
 80043b0:	f7ff ff7c 	bl	80042ac <prvHeapInit>
 80043b4:	e7e5      	b.n	8004382 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80043b6:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80043b8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ba:	6863      	ldr	r3, [r4, #4]
 80043bc:	4293      	cmp	r3, r2
 80043be:	d202      	bcs.n	80043c6 <pvPortMalloc+0x52>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f7      	bne.n	80043b6 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 80043c6:	4b26      	ldr	r3, [pc, #152]	@ (8004460 <pvPortMalloc+0xec>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	42a3      	cmp	r3, r4
 80043cc:	d043      	beq.n	8004456 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043ce:	680d      	ldr	r5, [r1, #0]
 80043d0:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043d6:	6863      	ldr	r3, [r4, #4]
 80043d8:	1a9b      	subs	r3, r3, r2
 80043da:	2b10      	cmp	r3, #16
 80043dc:	d910      	bls.n	8004400 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043de:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043e0:	f010 0f07 	tst.w	r0, #7
 80043e4:	d008      	beq.n	80043f8 <pvPortMalloc+0x84>
 80043e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	e7fe      	b.n	80043f6 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043f8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80043fa:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043fc:	f7ff ff88 	bl	8004310 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004400:	6862      	ldr	r2, [r4, #4]
 8004402:	4919      	ldr	r1, [pc, #100]	@ (8004468 <pvPortMalloc+0xf4>)
 8004404:	680b      	ldr	r3, [r1, #0]
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800440a:	4919      	ldr	r1, [pc, #100]	@ (8004470 <pvPortMalloc+0xfc>)
 800440c:	6809      	ldr	r1, [r1, #0]
 800440e:	428b      	cmp	r3, r1
 8004410:	d201      	bcs.n	8004416 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004412:	4917      	ldr	r1, [pc, #92]	@ (8004470 <pvPortMalloc+0xfc>)
 8004414:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004416:	4b13      	ldr	r3, [pc, #76]	@ (8004464 <pvPortMalloc+0xf0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4313      	orrs	r3, r2
 800441c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8004422:	4a14      	ldr	r2, [pc, #80]	@ (8004474 <pvPortMalloc+0x100>)
 8004424:	6813      	ldr	r3, [r2, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e002      	b.n	8004432 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 800442c:	2500      	movs	r5, #0
 800442e:	e000      	b.n	8004432 <pvPortMalloc+0xbe>
 8004430:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8004432:	f7ff f93b 	bl	80036ac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004436:	f015 0f07 	tst.w	r5, #7
 800443a:	d00e      	beq.n	800445a <pvPortMalloc+0xe6>
 800443c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	e7fe      	b.n	800444c <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 800444e:	2500      	movs	r5, #0
 8004450:	e7ef      	b.n	8004432 <pvPortMalloc+0xbe>
 8004452:	2500      	movs	r5, #0
 8004454:	e7ed      	b.n	8004432 <pvPortMalloc+0xbe>
 8004456:	2500      	movs	r5, #0
 8004458:	e7eb      	b.n	8004432 <pvPortMalloc+0xbe>
}
 800445a:	4628      	mov	r0, r5
 800445c:	bd38      	pop	{r3, r4, r5, pc}
 800445e:	bf00      	nop
 8004460:	20000fa0 	.word	0x20000fa0
 8004464:	20000f8c 	.word	0x20000f8c
 8004468:	20000f9c 	.word	0x20000f9c
 800446c:	20000fa4 	.word	0x20000fa4
 8004470:	20000f98 	.word	0x20000f98
 8004474:	20000f94 	.word	0x20000f94

08004478 <vPortFree>:
	if( pv != NULL )
 8004478:	2800      	cmp	r0, #0
 800447a:	d034      	beq.n	80044e6 <vPortFree+0x6e>
{
 800447c:	b538      	push	{r3, r4, r5, lr}
 800447e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8004480:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004484:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004488:	4a17      	ldr	r2, [pc, #92]	@ (80044e8 <vPortFree+0x70>)
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	4213      	tst	r3, r2
 800448e:	d108      	bne.n	80044a2 <vPortFree+0x2a>
 8004490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	e7fe      	b.n	80044a0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044a2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80044a6:	b141      	cbz	r1, 80044ba <vPortFree+0x42>
 80044a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	e7fe      	b.n	80044b8 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044ba:	ea23 0302 	bic.w	r3, r3, r2
 80044be:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80044c2:	f7ff f859 	bl	8003578 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044c6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80044ca:	4a08      	ldr	r2, [pc, #32]	@ (80044ec <vPortFree+0x74>)
 80044cc:	6813      	ldr	r3, [r2, #0]
 80044ce:	440b      	add	r3, r1
 80044d0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044d2:	4628      	mov	r0, r5
 80044d4:	f7ff ff1c 	bl	8004310 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80044d8:	4a05      	ldr	r2, [pc, #20]	@ (80044f0 <vPortFree+0x78>)
 80044da:	6813      	ldr	r3, [r2, #0]
 80044dc:	3301      	adds	r3, #1
 80044de:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80044e0:	f7ff f8e4 	bl	80036ac <xTaskResumeAll>
}
 80044e4:	bd38      	pop	{r3, r4, r5, pc}
 80044e6:	4770      	bx	lr
 80044e8:	20000f8c 	.word	0x20000f8c
 80044ec:	20000f9c 	.word	0x20000f9c
 80044f0:	20000f90 	.word	0x20000f90

080044f4 <memset>:
 80044f4:	4402      	add	r2, r0
 80044f6:	4603      	mov	r3, r0
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d100      	bne.n	80044fe <memset+0xa>
 80044fc:	4770      	bx	lr
 80044fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004502:	e7f9      	b.n	80044f8 <memset+0x4>

08004504 <_reclaim_reent>:
 8004504:	4b29      	ldr	r3, [pc, #164]	@ (80045ac <_reclaim_reent+0xa8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4283      	cmp	r3, r0
 800450a:	b570      	push	{r4, r5, r6, lr}
 800450c:	4604      	mov	r4, r0
 800450e:	d04b      	beq.n	80045a8 <_reclaim_reent+0xa4>
 8004510:	69c3      	ldr	r3, [r0, #28]
 8004512:	b1ab      	cbz	r3, 8004540 <_reclaim_reent+0x3c>
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	b16b      	cbz	r3, 8004534 <_reclaim_reent+0x30>
 8004518:	2500      	movs	r5, #0
 800451a:	69e3      	ldr	r3, [r4, #28]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	5959      	ldr	r1, [r3, r5]
 8004520:	2900      	cmp	r1, #0
 8004522:	d13b      	bne.n	800459c <_reclaim_reent+0x98>
 8004524:	3504      	adds	r5, #4
 8004526:	2d80      	cmp	r5, #128	@ 0x80
 8004528:	d1f7      	bne.n	800451a <_reclaim_reent+0x16>
 800452a:	69e3      	ldr	r3, [r4, #28]
 800452c:	4620      	mov	r0, r4
 800452e:	68d9      	ldr	r1, [r3, #12]
 8004530:	f000 f872 	bl	8004618 <_free_r>
 8004534:	69e3      	ldr	r3, [r4, #28]
 8004536:	6819      	ldr	r1, [r3, #0]
 8004538:	b111      	cbz	r1, 8004540 <_reclaim_reent+0x3c>
 800453a:	4620      	mov	r0, r4
 800453c:	f000 f86c 	bl	8004618 <_free_r>
 8004540:	6961      	ldr	r1, [r4, #20]
 8004542:	b111      	cbz	r1, 800454a <_reclaim_reent+0x46>
 8004544:	4620      	mov	r0, r4
 8004546:	f000 f867 	bl	8004618 <_free_r>
 800454a:	69e1      	ldr	r1, [r4, #28]
 800454c:	b111      	cbz	r1, 8004554 <_reclaim_reent+0x50>
 800454e:	4620      	mov	r0, r4
 8004550:	f000 f862 	bl	8004618 <_free_r>
 8004554:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004556:	b111      	cbz	r1, 800455e <_reclaim_reent+0x5a>
 8004558:	4620      	mov	r0, r4
 800455a:	f000 f85d 	bl	8004618 <_free_r>
 800455e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004560:	b111      	cbz	r1, 8004568 <_reclaim_reent+0x64>
 8004562:	4620      	mov	r0, r4
 8004564:	f000 f858 	bl	8004618 <_free_r>
 8004568:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800456a:	b111      	cbz	r1, 8004572 <_reclaim_reent+0x6e>
 800456c:	4620      	mov	r0, r4
 800456e:	f000 f853 	bl	8004618 <_free_r>
 8004572:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004574:	b111      	cbz	r1, 800457c <_reclaim_reent+0x78>
 8004576:	4620      	mov	r0, r4
 8004578:	f000 f84e 	bl	8004618 <_free_r>
 800457c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800457e:	b111      	cbz	r1, 8004586 <_reclaim_reent+0x82>
 8004580:	4620      	mov	r0, r4
 8004582:	f000 f849 	bl	8004618 <_free_r>
 8004586:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004588:	b111      	cbz	r1, 8004590 <_reclaim_reent+0x8c>
 800458a:	4620      	mov	r0, r4
 800458c:	f000 f844 	bl	8004618 <_free_r>
 8004590:	6a23      	ldr	r3, [r4, #32]
 8004592:	b14b      	cbz	r3, 80045a8 <_reclaim_reent+0xa4>
 8004594:	4620      	mov	r0, r4
 8004596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800459a:	4718      	bx	r3
 800459c:	680e      	ldr	r6, [r1, #0]
 800459e:	4620      	mov	r0, r4
 80045a0:	f000 f83a 	bl	8004618 <_free_r>
 80045a4:	4631      	mov	r1, r6
 80045a6:	e7bb      	b.n	8004520 <_reclaim_reent+0x1c>
 80045a8:	bd70      	pop	{r4, r5, r6, pc}
 80045aa:	bf00      	nop
 80045ac:	20000010 	.word	0x20000010

080045b0 <__libc_init_array>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	4d0d      	ldr	r5, [pc, #52]	@ (80045e8 <__libc_init_array+0x38>)
 80045b4:	4c0d      	ldr	r4, [pc, #52]	@ (80045ec <__libc_init_array+0x3c>)
 80045b6:	1b64      	subs	r4, r4, r5
 80045b8:	10a4      	asrs	r4, r4, #2
 80045ba:	2600      	movs	r6, #0
 80045bc:	42a6      	cmp	r6, r4
 80045be:	d109      	bne.n	80045d4 <__libc_init_array+0x24>
 80045c0:	4d0b      	ldr	r5, [pc, #44]	@ (80045f0 <__libc_init_array+0x40>)
 80045c2:	4c0c      	ldr	r4, [pc, #48]	@ (80045f4 <__libc_init_array+0x44>)
 80045c4:	f000 f87e 	bl	80046c4 <_init>
 80045c8:	1b64      	subs	r4, r4, r5
 80045ca:	10a4      	asrs	r4, r4, #2
 80045cc:	2600      	movs	r6, #0
 80045ce:	42a6      	cmp	r6, r4
 80045d0:	d105      	bne.n	80045de <__libc_init_array+0x2e>
 80045d2:	bd70      	pop	{r4, r5, r6, pc}
 80045d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d8:	4798      	blx	r3
 80045da:	3601      	adds	r6, #1
 80045dc:	e7ee      	b.n	80045bc <__libc_init_array+0xc>
 80045de:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e2:	4798      	blx	r3
 80045e4:	3601      	adds	r6, #1
 80045e6:	e7f2      	b.n	80045ce <__libc_init_array+0x1e>
 80045e8:	08004770 	.word	0x08004770
 80045ec:	08004770 	.word	0x08004770
 80045f0:	08004770 	.word	0x08004770
 80045f4:	08004774 	.word	0x08004774

080045f8 <__retarget_lock_acquire_recursive>:
 80045f8:	4770      	bx	lr

080045fa <__retarget_lock_release_recursive>:
 80045fa:	4770      	bx	lr

080045fc <memcpy>:
 80045fc:	440a      	add	r2, r1
 80045fe:	4291      	cmp	r1, r2
 8004600:	f100 33ff 	add.w	r3, r0, #4294967295
 8004604:	d100      	bne.n	8004608 <memcpy+0xc>
 8004606:	4770      	bx	lr
 8004608:	b510      	push	{r4, lr}
 800460a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800460e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004612:	4291      	cmp	r1, r2
 8004614:	d1f9      	bne.n	800460a <memcpy+0xe>
 8004616:	bd10      	pop	{r4, pc}

08004618 <_free_r>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4605      	mov	r5, r0
 800461c:	2900      	cmp	r1, #0
 800461e:	d041      	beq.n	80046a4 <_free_r+0x8c>
 8004620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004624:	1f0c      	subs	r4, r1, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	bfb8      	it	lt
 800462a:	18e4      	addlt	r4, r4, r3
 800462c:	f000 f83e 	bl	80046ac <__malloc_lock>
 8004630:	4a1d      	ldr	r2, [pc, #116]	@ (80046a8 <_free_r+0x90>)
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	b933      	cbnz	r3, 8004644 <_free_r+0x2c>
 8004636:	6063      	str	r3, [r4, #4]
 8004638:	6014      	str	r4, [r2, #0]
 800463a:	4628      	mov	r0, r5
 800463c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004640:	f000 b83a 	b.w	80046b8 <__malloc_unlock>
 8004644:	42a3      	cmp	r3, r4
 8004646:	d908      	bls.n	800465a <_free_r+0x42>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	1821      	adds	r1, r4, r0
 800464c:	428b      	cmp	r3, r1
 800464e:	bf01      	itttt	eq
 8004650:	6819      	ldreq	r1, [r3, #0]
 8004652:	685b      	ldreq	r3, [r3, #4]
 8004654:	1809      	addeq	r1, r1, r0
 8004656:	6021      	streq	r1, [r4, #0]
 8004658:	e7ed      	b.n	8004636 <_free_r+0x1e>
 800465a:	461a      	mov	r2, r3
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	b10b      	cbz	r3, 8004664 <_free_r+0x4c>
 8004660:	42a3      	cmp	r3, r4
 8004662:	d9fa      	bls.n	800465a <_free_r+0x42>
 8004664:	6811      	ldr	r1, [r2, #0]
 8004666:	1850      	adds	r0, r2, r1
 8004668:	42a0      	cmp	r0, r4
 800466a:	d10b      	bne.n	8004684 <_free_r+0x6c>
 800466c:	6820      	ldr	r0, [r4, #0]
 800466e:	4401      	add	r1, r0
 8004670:	1850      	adds	r0, r2, r1
 8004672:	4283      	cmp	r3, r0
 8004674:	6011      	str	r1, [r2, #0]
 8004676:	d1e0      	bne.n	800463a <_free_r+0x22>
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	6053      	str	r3, [r2, #4]
 800467e:	4408      	add	r0, r1
 8004680:	6010      	str	r0, [r2, #0]
 8004682:	e7da      	b.n	800463a <_free_r+0x22>
 8004684:	d902      	bls.n	800468c <_free_r+0x74>
 8004686:	230c      	movs	r3, #12
 8004688:	602b      	str	r3, [r5, #0]
 800468a:	e7d6      	b.n	800463a <_free_r+0x22>
 800468c:	6820      	ldr	r0, [r4, #0]
 800468e:	1821      	adds	r1, r4, r0
 8004690:	428b      	cmp	r3, r1
 8004692:	bf04      	itt	eq
 8004694:	6819      	ldreq	r1, [r3, #0]
 8004696:	685b      	ldreq	r3, [r3, #4]
 8004698:	6063      	str	r3, [r4, #4]
 800469a:	bf04      	itt	eq
 800469c:	1809      	addeq	r1, r1, r0
 800469e:	6021      	streq	r1, [r4, #0]
 80046a0:	6054      	str	r4, [r2, #4]
 80046a2:	e7ca      	b.n	800463a <_free_r+0x22>
 80046a4:	bd38      	pop	{r3, r4, r5, pc}
 80046a6:	bf00      	nop
 80046a8:	20004ce8 	.word	0x20004ce8

080046ac <__malloc_lock>:
 80046ac:	4801      	ldr	r0, [pc, #4]	@ (80046b4 <__malloc_lock+0x8>)
 80046ae:	f7ff bfa3 	b.w	80045f8 <__retarget_lock_acquire_recursive>
 80046b2:	bf00      	nop
 80046b4:	20004ce4 	.word	0x20004ce4

080046b8 <__malloc_unlock>:
 80046b8:	4801      	ldr	r0, [pc, #4]	@ (80046c0 <__malloc_unlock+0x8>)
 80046ba:	f7ff bf9e 	b.w	80045fa <__retarget_lock_release_recursive>
 80046be:	bf00      	nop
 80046c0:	20004ce4 	.word	0x20004ce4

080046c4 <_init>:
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	bf00      	nop
 80046c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ca:	bc08      	pop	{r3}
 80046cc:	469e      	mov	lr, r3
 80046ce:	4770      	bx	lr

080046d0 <_fini>:
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	bf00      	nop
 80046d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d6:	bc08      	pop	{r3}
 80046d8:	469e      	mov	lr, r3
 80046da:	4770      	bx	lr
